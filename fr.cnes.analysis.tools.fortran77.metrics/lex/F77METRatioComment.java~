/* The following code was generated by JFlex 1.6.1 */

/************************************************************************************************/
/* i-Code CNES is a static code analyzer.                                                       */
/* This software is a free software, under the terms of the Eclipse Public License version 1.0. */ 
/* http://www.eclipse.org/legal/epl-v10.html                                             */
/************************************************************************************************/ 

/********************************************************************************/
/* This file is used to generate a metric checker for comment's rate. For 		*/
/* further information on this, we advise you to refer to CNES manual dealing	*/
/* with metrics.																*/
/* As many comments have been done on the RATEComment.lex file, this file 		*/
/* will restrain its comments on modifications.									*/
/*																				*/
/********************************************************************************/

package fr.cnes.analysis.tools.fortran77.metrics;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.List;
import java.io.File;
import java.util.logging.Logger;


import org.eclipse.core.runtime.Path;

import fr.cnes.analysis.tools.analyzer.exception.JFlexException;
import fr.cnes.analysis.tools.analyzer.datas.AbstractMetric;
import fr.cnes.analysis.tools.analyzer.datas.FileValue;
import fr.cnes.analysis.tools.analyzer.datas.FunctionValue;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lex/F77METRatioComment.lex</tt>
 */
public class F77METRatioComment extends AbstractMetric {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int NAMING = 4;
  public static final int NEW_LINE = 6;
  public static final int LINE = 8;
  public static final int AVOID = 10;
  public static final int DECL = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\26\1\32\1\33\1\34\1\32\22\0\1\26\1\1\1\31"+
    "\3\0\1\35\1\30\2\0\1\1\5\0\12\23\7\0\1\20\1\16"+
    "\1\2\1\14\1\13\1\3\1\17\1\27\1\24\2\27\1\22\1\21"+
    "\1\5\1\10\1\11\1\27\1\12\1\25\1\6\1\4\5\27\4\0"+
    "\1\23\1\0\1\20\1\16\1\2\1\14\1\13\1\3\1\17\1\27"+
    "\1\24\2\27\1\22\1\21\1\5\1\10\1\11\1\27\1\12\1\25"+
    "\1\6\1\4\5\27\12\0\1\33\252\0\2\7\115\0\1\15\u1ea8\0"+
    "\1\33\1\33\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\2\2\10\1\1\3\2\1\1\4\1\5"+
    "\1\6\1\7\1\5\1\10\1\11\1\12\2\13\11\12"+
    "\1\6\2\12\1\6\1\5\14\6\1\14\1\5\1\15"+
    "\1\16\1\17\15\0\1\20\2\0\1\4\16\0\1\21"+
    "\2\0\1\6\20\0\1\14\1\6\26\0\1\22\15\0"+
    "\1\23\147\0\1\24\16\0\1\25\16\0\1\26\10\0"+
    "\1\27\4\0\1\27\10\0\1\30\4\0\1\30\10\0"+
    "\1\6\151\0\2\27\2\30\2\6";

  private static int [] zzUnpackAction() {
    int [] result = new int[434];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\36\0\74\0\132\0\170\0\226\0\264\0\322"+
    "\0\322\0\360\0\u010e\0\360\0\u012c\0\u014a\0\u0168\0\u0186"+
    "\0\u01a4\0\u01c2\0\322\0\u01e0\0\u01fe\0\u021c\0\322\0\u023a"+
    "\0\u0258\0\u023a\0\u0276\0\u0294\0\u02b2\0\u02b2\0\u02d0\0\u02ee"+
    "\0\u02d0\0\u030c\0\u032a\0\u0348\0\u0366\0\u0384\0\u03a2\0\u03c0"+
    "\0\u02b2\0\u03de\0\u03fc\0\u041a\0\u02b2\0\u0438\0\u0456\0\u0474"+
    "\0\u0492\0\u04b0\0\u04ce\0\u04ec\0\u050a\0\u0528\0\u0546\0\u0564"+
    "\0\u0582\0\u05a0\0\u0438\0\u05be\0\u05dc\0\u05fa\0\u0618\0\u0636"+
    "\0\u0654\0\u0672\0\u0690\0\u06ae\0\u06cc\0\u06ea\0\u0708\0\u0726"+
    "\0\u0744\0\u0762\0\u0780\0\u023a\0\u079e\0\u07bc\0\u07da\0\u07f8"+
    "\0\u0816\0\u0834\0\u0852\0\u0870\0\u088e\0\u08ac\0\u08ca\0\u08e8"+
    "\0\u0906\0\u0924\0\u0942\0\u0960\0\u097e\0\u023a\0\u099c\0\u09ba"+
    "\0\u09d8\0\u09f6\0\u0a14\0\u0a32\0\u0a50\0\u0a6e\0\u0a8c\0\u0aaa"+
    "\0\u0ac8\0\u0ae6\0\u0b04\0\u0b22\0\u0b40\0\u0b5e\0\u0b7c\0\u0b9a"+
    "\0\u0bb8\0\u0bd6\0\u05fa\0\u0bf4\0\u0c12\0\u0c30\0\u0c4e\0\u0c6c"+
    "\0\u0c8a\0\u0ca8\0\u0cc6\0\u0ce4\0\u0d02\0\u0d20\0\u0d3e\0\u0d5c"+
    "\0\u0d7a\0\u0d98\0\u0db6\0\u0dd4\0\u0df2\0\u0e10\0\u0e2e\0\u0e4c"+
    "\0\u0e6a\0\u023a\0\u0e88\0\u0ea6\0\u0ec4\0\u0ee2\0\u0f00\0\u0f1e"+
    "\0\u0f3c\0\u0f5a\0\u0f78\0\u0f96\0\u0fb4\0\u0fd2\0\u0ff0\0\u023a"+
    "\0\u100e\0\u102c\0\u104a\0\u1068\0\u1086\0\u10a4\0\u10c2\0\u10e0"+
    "\0\u10fe\0\u111c\0\u113a\0\u1158\0\u1176\0\u1194\0\u11b2\0\u11d0"+
    "\0\u11ee\0\u120c\0\u122a\0\u1248\0\u1266\0\u1284\0\u12a2\0\u12c0"+
    "\0\u12de\0\u12fc\0\u131a\0\u1338\0\u1356\0\u1374\0\u1392\0\u13b0"+
    "\0\u13ce\0\u13ec\0\u140a\0\u1428\0\u1446\0\u1464\0\u1482\0\u14a0"+
    "\0\u14be\0\u14dc\0\u14fa\0\u1518\0\u1536\0\u1554\0\u1572\0\u1590"+
    "\0\u15ae\0\u15cc\0\u15ea\0\u1608\0\u1626\0\u1644\0\u1662\0\u1680"+
    "\0\u169e\0\u16bc\0\u16da\0\u16f8\0\u1716\0\u1734\0\u1752\0\u1770"+
    "\0\u178e\0\u17ac\0\u17ca\0\u17e8\0\u1806\0\u1824\0\u1842\0\u1860"+
    "\0\u187e\0\u189c\0\u18ba\0\u18d8\0\u18f6\0\u1914\0\u1932\0\u1950"+
    "\0\u196e\0\u198c\0\u19aa\0\u19c8\0\u19e6\0\u1a04\0\u1a22\0\u1a40"+
    "\0\u1a5e\0\u1a7c\0\u1a9a\0\u1ab8\0\u1ad6\0\u1af4\0\u1b12\0\u1b30"+
    "\0\u1b4e\0\u1b6c\0\u1b8a\0\u1ba8\0\u1bc6\0\u1be4\0\u1c02\0\u1c20"+
    "\0\u1c3e\0\u1c5c\0\u1c7a\0\u1c98\0\u1cb6\0\u1cd4\0\u1cf2\0\u1d10"+
    "\0\u1d2e\0\u1d4c\0\u1d6a\0\u1d88\0\u1da6\0\u1dc4\0\u1de2\0\u1e00"+
    "\0\u1e1e\0\u1e3c\0\u1e5a\0\u1e78\0\u1e96\0\u1eb4\0\u1ed2\0\u1ef0"+
    "\0\u1f0e\0\u1f2c\0\u1f4a\0\u1f68\0\u1f86\0\u1fa4\0\u1fc2\0\u1fe0"+
    "\0\u1ffe\0\u201c\0\u203a\0\u2058\0\u2076\0\u2094\0\u1c20\0\u20b2"+
    "\0\u20d0\0\u20ee\0\u210c\0\u023a\0\u212a\0\u2148\0\u2166\0\u2184"+
    "\0\u21a2\0\u21c0\0\u21de\0\u21fc\0\u1de2\0\u221a\0\u2238\0\u2256"+
    "\0\u2274\0\u023a\0\u2292\0\u22b0\0\u22ce\0\u22ec\0\u230a\0\u2328"+
    "\0\u2346\0\u2364\0\u1fa4\0\u2382\0\u23a0\0\u23be\0\u23dc\0\u23fa"+
    "\0\u2418\0\u2436\0\u2454\0\u2472\0\u2490\0\u24ae\0\u24cc\0\u24ea"+
    "\0\u2508\0\u2526\0\u2544\0\u2562\0\u2580\0\u259e\0\u25bc\0\u25da"+
    "\0\u25f8\0\u2616\0\u2634\0\u2652\0\u2670\0\u268e\0\u26ac\0\u26ca"+
    "\0\u26e8\0\u2706\0\u2724\0\u2742\0\u2760\0\u277e\0\u279c\0\u27ba"+
    "\0\u27d8\0\u27f6\0\u2814\0\u2832\0\u2850\0\u286e\0\u288c\0\u28aa"+
    "\0\u28c8\0\u28e6\0\u2904\0\u2922\0\u2940\0\u295e\0\u297c\0\u299a"+
    "\0\u29b8\0\u29d6\0\u29f4\0\u2a12\0\u2a30\0\u2a4e\0\u2a6c\0\u2a8a"+
    "\0\u2aa8\0\u2ac6\0\u2ae4\0\u2b02\0\u2b20\0\u2b3e\0\u2b5c\0\u2b7a"+
    "\0\u2b98\0\u2bb6\0\u2bd4\0\u2bf2\0\u2c10\0\u2c2e\0\u2c4c\0\u2c6a"+
    "\0\u2c88\0\u2ca6\0\u2cc4\0\u2ce2\0\u2d00\0\u2d1e\0\u2d3c\0\u2d5a"+
    "\0\u2d78\0\u2d96\0\u2db4\0\u2dd2\0\u2df0\0\u2e0e\0\u2e2c\0\u2e4a"+
    "\0\u2e68\0\u2e86\0\u2ea4\0\u2ec2\0\u2ee0\0\u2efe\0\u2f1c\0\u2f3a"+
    "\0\u2f58\0\u2f76\0\u2f94\0\u2fb2\0\u0762\0\u079e\0\u0960\0\u099c"+
    "\0\u0b5e\0\u0b9a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[434];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\1\11\1\12\1\13\3\14\1\15\1\14\1\16"+
    "\3\14\1\17\3\14\1\20\2\14\1\21\1\22\1\23"+
    "\1\14\1\24\1\25\1\26\1\27\1\23\1\10\32\30"+
    "\1\31\2\32\3\30\5\33\1\30\5\33\1\30\5\33"+
    "\1\30\2\33\1\30\1\33\2\30\1\34\2\32\1\30"+
    "\1\35\1\36\1\37\1\40\3\41\1\42\1\41\1\43"+
    "\1\41\1\44\1\41\1\45\3\41\1\46\2\41\1\47"+
    "\1\50\1\51\1\41\1\52\1\53\1\54\1\55\1\51"+
    "\1\35\2\56\1\57\1\60\3\57\1\61\1\57\1\62"+
    "\1\57\1\63\1\57\1\64\3\57\1\65\2\57\1\66"+
    "\1\67\1\56\1\57\1\70\1\71\1\72\2\73\1\56"+
    "\32\30\1\74\2\32\33\30\1\75\2\32\1\76\21\0"+
    "\1\77\17\0\1\100\3\0\1\101\1\0\1\102\3\0"+
    "\1\103\3\0\1\104\2\0\1\101\1\103\13\0\1\100"+
    "\1\105\2\0\1\101\1\0\1\102\3\0\1\103\3\0"+
    "\1\104\2\0\1\101\1\103\15\0\1\106\13\0\1\77"+
    "\17\0\1\100\3\0\1\101\1\0\1\102\1\107\2\0"+
    "\1\103\3\0\1\104\2\0\1\101\1\103\14\0\1\110"+
    "\14\0\1\77\17\0\1\100\3\0\1\101\1\111\1\102"+
    "\3\0\1\103\3\0\1\104\2\0\1\101\1\103\13\0"+
    "\1\100\1\0\1\106\1\0\1\101\1\0\1\102\3\0"+
    "\1\103\3\0\1\104\2\0\1\101\1\103\13\0\1\100"+
    "\1\110\2\0\1\101\1\0\1\102\3\0\1\103\3\0"+
    "\1\104\2\0\1\101\1\103\10\0\21\112\1\113\6\112"+
    "\1\114\5\112\21\115\1\116\7\115\1\114\4\115\21\0"+
    "\1\77\10\0\1\117\73\0\1\31\5\0\5\33\1\0"+
    "\5\33\1\0\10\33\1\0\1\33\40\0\1\34\24\0"+
    "\1\120\17\0\1\121\3\0\1\122\1\0\1\123\3\0"+
    "\1\124\3\0\1\125\2\0\1\122\1\124\13\0\1\121"+
    "\1\126\2\0\1\122\1\0\1\123\3\0\1\124\3\0"+
    "\1\125\2\0\1\122\1\124\15\0\1\127\13\0\1\120"+
    "\17\0\1\121\3\0\1\122\1\0\1\123\1\130\2\0"+
    "\1\124\3\0\1\125\2\0\1\122\1\124\13\0\1\121"+
    "\1\0\1\131\1\0\1\122\1\0\1\123\3\0\1\124"+
    "\3\0\1\125\2\0\1\122\1\124\14\0\1\132\14\0"+
    "\1\120\17\0\1\121\3\0\1\122\1\133\1\123\3\0"+
    "\1\124\3\0\1\125\2\0\1\122\1\124\13\0\1\121"+
    "\1\0\1\127\1\0\1\122\1\0\1\123\3\0\1\124"+
    "\3\0\1\125\2\0\1\122\1\124\13\0\1\121\1\132"+
    "\2\0\1\122\1\0\1\123\3\0\1\124\3\0\1\125"+
    "\2\0\1\122\1\124\10\0\21\134\1\135\6\134\1\136"+
    "\5\134\21\137\1\140\7\137\1\136\4\137\21\0\1\120"+
    "\10\0\1\141\24\0\1\142\17\0\1\143\3\0\1\144"+
    "\1\0\1\145\3\0\1\146\3\0\1\147\2\0\1\144"+
    "\1\146\13\0\1\143\1\150\2\0\1\144\1\0\1\145"+
    "\3\0\1\146\3\0\1\147\2\0\1\144\1\146\15\0"+
    "\1\151\13\0\1\142\17\0\1\143\3\0\1\144\1\0"+
    "\1\145\1\152\2\0\1\146\3\0\1\147\2\0\1\144"+
    "\1\146\13\0\1\143\1\0\1\153\1\0\1\144\1\0"+
    "\1\145\3\0\1\146\3\0\1\147\2\0\1\144\1\146"+
    "\14\0\1\154\14\0\1\142\17\0\1\143\3\0\1\144"+
    "\1\155\1\145\3\0\1\146\3\0\1\147\2\0\1\144"+
    "\1\146\13\0\1\143\1\0\1\151\1\0\1\144\1\0"+
    "\1\145\3\0\1\146\3\0\1\147\2\0\1\144\1\146"+
    "\13\0\1\143\1\154\2\0\1\144\1\0\1\145\3\0"+
    "\1\146\3\0\1\147\2\0\1\144\1\146\10\0\21\156"+
    "\1\157\6\156\1\30\5\156\21\160\1\161\7\160\1\30"+
    "\4\160\21\0\1\142\10\0\1\162\35\0\1\74\35\0"+
    "\1\75\3\0\26\30\1\163\3\30\1\0\1\30\1\163"+
    "\1\30\10\0\1\164\31\0\1\165\36\0\1\166\42\0"+
    "\1\167\27\0\1\170\41\0\1\171\32\0\1\172\36\0"+
    "\1\173\37\0\1\174\43\0\1\175\33\0\1\176\21\0"+
    "\30\112\1\114\15\112\1\177\17\112\1\114\5\112\31\115"+
    "\1\114\14\115\1\200\20\115\1\114\4\115\32\0\1\117"+
    "\13\0\1\201\31\0\1\202\36\0\1\203\42\0\1\204"+
    "\27\0\1\205\41\0\1\206\32\0\1\207\36\0\1\210"+
    "\37\0\1\211\41\0\1\212\37\0\1\213\33\0\1\214"+
    "\21\0\30\134\1\136\15\134\1\215\17\134\1\136\5\134"+
    "\31\137\1\136\14\137\1\216\20\137\1\136\4\137\32\0"+
    "\1\141\13\0\1\217\31\0\1\220\36\0\1\221\42\0"+
    "\1\222\27\0\1\223\41\0\1\224\32\0\1\225\36\0"+
    "\1\226\37\0\1\227\41\0\1\230\37\0\1\231\33\0"+
    "\1\232\21\0\30\156\1\30\15\156\1\233\17\156\1\30"+
    "\5\156\31\160\1\30\14\160\1\234\20\160\1\30\4\160"+
    "\32\0\1\162\17\0\1\235\26\0\1\236\36\0\1\237"+
    "\37\0\1\240\43\0\1\241\33\0\1\242\23\0\1\243"+
    "\46\0\1\244\24\0\1\245\14\0\1\246\30\0\1\247"+
    "\27\0\1\250\31\0\14\112\1\251\13\112\1\114\5\112"+
    "\14\115\1\252\14\115\1\114\4\115\14\0\1\253\26\0"+
    "\1\254\36\0\1\255\37\0\1\256\43\0\1\257\33\0"+
    "\1\260\23\0\1\261\46\0\1\262\24\0\1\263\14\0"+
    "\1\264\30\0\1\265\27\0\1\266\31\0\14\134\1\267"+
    "\13\134\1\136\5\134\14\137\1\270\14\137\1\136\4\137"+
    "\14\0\1\271\26\0\1\272\36\0\1\273\37\0\1\274"+
    "\43\0\1\275\33\0\1\276\23\0\1\277\46\0\1\300"+
    "\24\0\1\301\14\0\1\302\30\0\1\303\27\0\1\304"+
    "\31\0\14\156\1\305\13\156\1\30\5\156\14\160\1\306"+
    "\14\160\1\30\4\160\4\0\1\307\33\0\1\310\46\0"+
    "\1\311\24\0\1\312\14\0\1\313\30\0\1\314\27\0"+
    "\1\315\37\0\1\316\41\0\1\317\36\0\1\320\34\0"+
    "\1\321\33\0\1\322\47\0\1\323\13\0\4\112\1\324"+
    "\23\112\1\114\5\112\4\115\1\325\24\115\1\114\4\115"+
    "\4\0\1\326\33\0\1\327\46\0\1\330\24\0\1\331"+
    "\14\0\1\332\30\0\1\333\27\0\1\334\37\0\1\335"+
    "\41\0\1\336\36\0\1\337\34\0\1\340\33\0\1\341"+
    "\47\0\1\342\13\0\4\134\1\343\23\134\1\136\5\134"+
    "\4\137\1\344\24\137\1\136\4\137\4\0\1\345\33\0"+
    "\1\346\46\0\1\347\24\0\1\350\14\0\1\351\30\0"+
    "\1\352\27\0\1\353\37\0\1\354\41\0\1\355\36\0"+
    "\1\356\34\0\1\357\33\0\1\360\47\0\1\361\13\0"+
    "\4\156\1\362\23\156\1\30\5\156\4\160\1\363\24\160"+
    "\1\30\4\160\22\0\1\364\21\0\1\365\41\0\1\366"+
    "\36\0\1\367\34\0\1\370\33\0\1\371\47\0\1\372"+
    "\22\0\1\373\14\0\1\373\14\0\1\374\46\0\1\375"+
    "\41\0\1\376\21\0\1\377\44\0\1\u0100\22\0\22\112"+
    "\1\u0101\5\112\1\114\5\112\22\115\1\u0102\6\115\1\114"+
    "\4\115\22\0\1\u0103\21\0\1\u0104\41\0\1\u0105\36\0"+
    "\1\u0106\34\0\1\u0107\33\0\1\u0108\47\0\1\u0109\22\0"+
    "\1\u010a\14\0\1\u010a\14\0\1\u010b\46\0\1\u010c\41\0"+
    "\1\u010d\21\0\1\u010e\44\0\1\u010f\22\0\22\134\1\u0110"+
    "\5\134\1\136\5\134\22\137\1\u0111\6\137\1\136\4\137"+
    "\22\0\1\u0112\21\0\1\u0113\41\0\1\u0114\36\0\1\u0115"+
    "\34\0\1\u0116\33\0\1\u0117\47\0\1\u0118\22\0\1\u0119"+
    "\14\0\1\u0119\14\0\1\u011a\46\0\1\u011b\41\0\1\u011c"+
    "\21\0\1\u011d\44\0\1\u011e\22\0\22\156\1\u011f\5\156"+
    "\1\30\5\156\22\160\1\u0120\6\160\1\30\4\160\13\0"+
    "\1\u0121\31\0\1\u0122\14\0\1\u0122\14\0\1\u0123\46\0"+
    "\1\u0124\41\0\1\u0125\21\0\1\u0126\44\0\1\u0127\32\0"+
    "\1\u0128\45\0\1\u0129\21\0\1\u012a\52\0\1\u0100\22\0"+
    "\1\u012b\31\0\5\u012c\1\0\5\u012c\1\0\10\u012c\1\0"+
    "\1\u012c\6\0\13\112\1\u012d\14\112\1\114\5\112\13\115"+
    "\1\u012e\15\115\1\114\4\115\13\0\1\u012f\31\0\1\u0130"+
    "\14\0\1\u0130\14\0\1\u0131\46\0\1\u0132\41\0\1\u0133"+
    "\21\0\1\u0134\44\0\1\u0135\32\0\1\u0136\45\0\1\u0137"+
    "\21\0\1\u0138\52\0\1\u010f\22\0\1\u0139\31\0\5\u013a"+
    "\1\0\5\u013a\1\0\10\u013a\1\0\1\u013a\6\0\13\134"+
    "\1\u013b\14\134\1\136\5\134\13\137\1\u013c\15\137\1\136"+
    "\4\137\13\0\1\u013d\31\0\1\u013e\14\0\1\u013e\14\0"+
    "\1\u013f\46\0\1\u0140\41\0\1\u0141\21\0\1\u0142\44\0"+
    "\1\u0143\32\0\1\u0144\45\0\1\u0145\21\0\1\u0146\52\0"+
    "\1\u011e\22\0\1\u0147\31\0\5\30\1\0\5\30\1\0"+
    "\10\30\1\0\1\30\6\0\13\156\1\u0148\14\156\1\30"+
    "\5\156\13\160\1\u0149\15\160\1\30\4\160\11\0\1\u014a"+
    "\14\0\1\u0121\5\0\1\u0121\11\0\1\u014b\45\0\1\u014c"+
    "\21\0\1\u014d\52\0\1\u0127\22\0\1\u014e\34\0\1\u0100"+
    "\32\0\1\323\45\0\1\323\32\0\1\u014f\14\0\1\u014f"+
    "\11\0\11\112\1\u0150\14\112\1\u012d\1\112\1\114\3\112"+
    "\1\u012d\1\112\11\115\1\u0151\14\115\1\u012e\2\115\1\114"+
    "\2\115\1\u012e\1\115\11\0\1\u0152\14\0\1\u012f\5\0"+
    "\1\u012f\11\0\1\u0153\45\0\1\u0154\21\0\1\u0155\52\0"+
    "\1\u0135\22\0\1\u0156\34\0\1\u010f\32\0\1\342\45\0"+
    "\1\342\32\0\1\u0157\14\0\1\u0157\11\0\11\134\1\u0158"+
    "\14\134\1\u013b\1\134\1\136\3\134\1\u013b\1\134\11\137"+
    "\1\u0159\14\137\1\u013c\2\137\1\136\2\137\1\u013c\1\137"+
    "\11\0\1\u015a\14\0\1\u013d\5\0\1\u013d\11\0\1\u015b"+
    "\45\0\1\u015c\21\0\1\u015d\52\0\1\u0143\22\0\1\u015e"+
    "\34\0\1\u011e\32\0\1\361\45\0\1\361\32\0\1\u015f"+
    "\14\0\1\u015f\11\0\11\156\1\u0160\14\156\1\u0148\1\156"+
    "\1\30\3\156\1\u0148\1\156\11\160\1\u0161\14\160\1\u0149"+
    "\2\160\1\30\2\160\1\u0149\1\160\12\0\1\u0162\30\0"+
    "\1\u0127\32\0\1\372\45\0\1\372\32\0\1\u0163\14\0"+
    "\1\u0163\16\0\1\323\30\0\12\112\1\u0164\15\112\1\114"+
    "\5\112\12\115\1\u0165\16\115\1\114\4\115\12\0\1\u0166"+
    "\30\0\1\u0135\32\0\1\u0109\45\0\1\u0109\32\0\1\u0167"+
    "\14\0\1\u0167\16\0\1\342\30\0\12\134\1\u0168\15\134"+
    "\1\136\5\134\12\137\1\u0169\16\137\1\136\4\137\12\0"+
    "\1\u016a\30\0\1\u0143\32\0\1\u0118\45\0\1\u0118\32\0"+
    "\1\u016b\14\0\1\u016b\16\0\1\361\30\0\12\156\1\u016c"+
    "\15\156\1\30\5\156\12\160\1\u016d\16\160\1\30\4\160"+
    "\10\0\1\u016e\32\0\1\372\30\0\10\112\1\u016f\17\112"+
    "\1\114\5\112\10\115\1\u0170\20\115\1\114\4\115\10\0"+
    "\1\u0171\32\0\1\u0109\30\0\10\134\1\u0172\17\134\1\136"+
    "\5\134\10\137\1\u0173\20\137\1\136\4\137\10\0\1\u0174"+
    "\32\0\1\u0118\30\0\10\156\1\u0175\17\156\1\30\5\156"+
    "\10\160\1\u0176\20\160\1\30\4\160\2\0\1\u0177\33\0"+
    "\2\112\1\u0178\25\112\1\114\5\112\2\115\1\u0179\26\115"+
    "\1\114\4\115\2\0\1\u017a\33\0\2\134\1\u017b\25\134"+
    "\1\136\5\134\2\137\1\u017c\26\137\1\136\4\137\2\0"+
    "\1\u017d\33\0\2\156\1\u017e\25\156\1\30\5\156\2\160"+
    "\1\u017f\26\160\1\30\4\160\13\0\1\u0180\22\0\13\112"+
    "\1\u0181\14\112\1\114\5\112\13\115\1\u0182\15\115\1\114"+
    "\4\115\13\0\1\u0183\22\0\13\134\1\u0184\14\134\1\136"+
    "\5\134\13\137\1\u0185\15\137\1\136\4\137\13\0\1\u0186"+
    "\22\0\13\156\1\u0187\14\156\1\30\5\156\13\160\1\u0188"+
    "\15\160\1\30\4\160\14\0\1\u0189\21\0\14\112\1\u018a"+
    "\13\112\1\114\5\112\14\115\1\u018b\14\115\1\114\4\115"+
    "\14\0\1\u018c\21\0\14\134\1\u018d\13\134\1\136\5\134"+
    "\14\137\1\u018e\14\137\1\136\4\137\14\0\1\u018f\21\0"+
    "\14\156\1\u0190\13\156\1\30\5\156\14\160\1\u0191\14\160"+
    "\1\30\4\160\4\0\1\u0192\31\0\4\112\1\u0193\23\112"+
    "\1\114\5\112\4\115\1\u0194\24\115\1\114\4\115\4\0"+
    "\1\u0195\31\0\4\134\1\u0196\23\134\1\136\5\134\4\137"+
    "\1\u0197\24\137\1\136\4\137\4\0\1\u0198\31\0\4\156"+
    "\1\u0199\23\156\1\30\5\156\4\160\1\u019a\24\160\1\30"+
    "\4\160\12\0\1\u019b\23\0\12\112\1\u019c\15\112\1\114"+
    "\5\112\12\115\1\u019d\16\115\1\114\4\115\12\0\1\u019e"+
    "\23\0\12\134\1\u019f\15\134\1\136\5\134\12\137\1\u01a0"+
    "\16\137\1\136\4\137\12\0\1\u01a1\23\0\12\156\1\u01a2"+
    "\15\156\1\30\5\156\12\160\1\u01a3\16\160\1\30\4\160"+
    "\13\0\1\u01a4\22\0\13\112\1\u01a5\14\112\1\114\5\112"+
    "\13\115\1\u01a6\15\115\1\114\4\115\13\0\1\u01a7\22\0"+
    "\13\134\1\u01a8\14\134\1\136\5\134\13\137\1\u01a9\15\137"+
    "\1\136\4\137\13\0\1\u01aa\22\0\13\156\1\u01ab\14\156"+
    "\1\30\5\156\13\160\1\u01ac\15\160\1\30\4\160\2\u012c"+
    "\5\0\1\u012c\5\0\1\u012c\10\0\1\u012c\1\0\6\u012c"+
    "\2\u01ad\5\112\1\u01ad\5\112\1\u01ad\10\112\1\u01ad\1\112"+
    "\1\114\5\u01ad\2\u01ae\5\115\1\u01ae\5\115\1\u01ae\10\115"+
    "\1\u01ae\1\115\1\u01ae\1\114\4\u01ae\2\u013a\5\0\1\u013a"+
    "\5\0\1\u013a\10\0\1\u013a\1\0\6\u013a\2\u01af\5\134"+
    "\1\u01af\5\134\1\u01af\10\134\1\u01af\1\134\1\136\5\u01af"+
    "\2\u01b0\5\137\1\u01b0\5\137\1\u01b0\10\137\1\u01b0\1\137"+
    "\1\u01b0\1\136\4\u01b0\2\30\5\0\1\30\5\0\1\30"+
    "\10\0\1\30\1\0\6\30\2\u01b1\5\156\1\u01b1\5\156"+
    "\1\u01b1\10\156\1\u01b1\1\156\1\30\5\u01b1\2\u01b2\5\160"+
    "\1\u01b2\5\160\1\u01b2\10\160\1\u01b2\1\160\1\u01b2\1\30"+
    "\4\u01b2";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12240];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\20\1\1\11\1\1\1\11\44\1\15\0\1\11"+
    "\2\0\1\1\16\0\1\11\2\0\1\1\20\0\2\1"+
    "\26\0\1\11\15\0\1\11\147\0\1\1\16\0\1\1"+
    "\16\0\1\1\10\0\1\1\4\0\1\11\10\0\1\1"+
    "\4\0\1\11\10\0\1\1\151\0\6\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[434];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	private static final Logger LOGGER = Logger.getLogger(F77METRatioComment.class.getName());
	
	
	String location = "MAIN PROGRAM";
	FileValue fileValue;
	Float numLines = 0.0f;
	Float numComments = 0.0f;
	boolean endLine = true;
	int functionLine = 0;
    String parsedFileName;
	
	
	public F77METRatioComment() {
	}
	
	@Override
	public void setInputFile(File file) throws FileNotFoundException {
        LOGGER.finest("begin method setInputFile");
        fileValue = new FileValue(this.getContribution().getAttribute("id"), this.getContribution().getAttribute("name"), file);
		this.zzReader = new FileReader(new Path(file.getAbsolutePath()).toOSString());
        this.parsedFileName = file.toString();
        LOGGER.finest("end method setInputFile");       
	}
	
	private void endLocation() {
        LOGGER.finest("begin method endLocation");
		final List<FunctionValue> list =
                fileValue.getFunctionValues();
        if (list.isEmpty()) {
        	if (numLines<10) list.add(new FunctionValue(location, Float.NaN, functionLine+1));
        	else list.add(new FunctionValue(location, (numComments/(numLines))*100, functionLine+1));
        } else {
            final FunctionValue last = list.get(list.size() - 1);
            if (last.getLocation().equals(location)) {
                if (numLines<10) last.setValue(Float.NaN);
        		else last.setValue((numComments/(numLines))*100);
            } else {
				if (numLines<10) list.add(new FunctionValue(location, Float.NaN, functionLine+1));
        		else list.add(new FunctionValue(location, (numComments/(numLines))*100, functionLine+1));
			}
        }
        LOGGER.finest("end method endLocation");
	}
	


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public F77METRatioComment(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 178) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public FileValue run() throws java.io.IOException, JFlexException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          { 	return fileValue;
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { LOGGER.finest("YYINITIAL -> NEW_LINE (Transition : .)");
                			     yybegin(LINE);
            }
          case 25: break;
          case 2: 
            { LOGGER.finest("YYINITIAL -> COMMENT (Transition : COMMENT_WORD)");
			                     yybegin(COMMENT);
            }
          case 26: break;
          case 3: 
            { LOGGER.finest("YYINITIAL -> NEW_LINE (Transition : SPACE)");
			                    yybegin(NEW_LINE);
            }
          case 27: break;
          case 4: 
            { numLines = numLines + 1;
    			                 LOGGER.finest("Setting value [numLines ="+numLines+"]");
    							 LOGGER.finest("YYINITIAL -> NEW_LINE (Transition : \\n | \\r)");
    							 yybegin(NEW_LINE);
            }
          case 28: break;
          case 5: 
            { String errorMessage = "Class"+this.getClass().getName()+"\nIllegal character <" + yytext() + ">\nFile :"+ this.parsedFileName+"\nat line:"+yyline+" column:"+yycolumn;
                                throw new JFlexException(new Exception(errorMessage));
            }
          case 29: break;
          case 6: 
            { 
            }
          case 30: break;
          case 7: 
            { numComments++; 
                                numLines++; 
                                LOGGER.finest("Setting values [numComments ="+numComments+" | numLines = "+ numLines+"]");
                                LOGGER.finest("COMMENT -> NEW_LINE (Transition : \\n | \\r)");
                                yybegin(NEW_LINE);
            }
          case 31: break;
          case 8: 
            { numLines = 0.0f; 
    							 numComments = 0.0f; 
    							 functionLine = yyline;
    							 location = location + " " + yytext();
                                 LOGGER.finest("Setting values [numComments ="+numComments+" | numLines = "+ numLines+" | functionLine = "+ functionLine+" | location = "+ location+"]");
    							 LOGGER.finest("NAMING -> DECL (Transition : VAR)");
    							 yybegin(DECL);
            }
          case 32: break;
          case 9: 
            { LOGGER.finest("NAMING -> NEW_LINE (Transition : \\n | \\r)");
                			     yybegin(NEW_LINE);
            }
          case 33: break;
          case 10: 
            { LOGGER.finest("NEW_LINE -> LINE (Transition : .");
                			     yybegin(LINE);
            }
          case 34: break;
          case 11: 
            { if (yycolumn == 0) {
    			                    LOGGER.finest("NEW_LINE -> COMMENT (Transition : COMMENT_WORD && yycolumn == 0)");
    								yybegin(COMMENT);
    							 } else {
    							    LOGGER.finest("NEW_LINE -> LINE (Transition : COMMENT_WORD && yycolumn != 0)");
    								yybegin(LINE);
    							 }
            }
          case 35: break;
          case 12: 
            { numLines = numLines + 1;
    			                 LOGGER.finest("Setting value [numLines ="+numLines+"]");
    			                 LOGGER.finest("LINE -> NEW_LINE (Transition : \\n | \\r)");
    							 yybegin(NEW_LINE);
            }
          case 36: break;
          case 13: 
            { numLines++;
			                     LOGGER.finest("Setting value [numLines ="+numLines+"]");
			                     LOGGER.finest("AVOID -> NEW_LINE (Transition : \\n | \\r)");
							     yybegin(NEW_LINE);
            }
          case 37: break;
          case 14: 
            { if (endLine) {
                                        LOGGER.finest("DECL -> NEW_LINE (Transition : \\n | \\r && endLine = true)");
                                        yybegin(NEW_LINE);
                                    }
                                    endLine = true;
                                    LOGGER.finest("Setting value [endLine ="+endLine+"]");
            }
          case 38: break;
          case 15: 
            { endLine = false;
			                        LOGGER.finest("Setting value [endLine ="+endLine+"]");
            }
          case 39: break;
          case 16: 
            { LOGGER.finest("YYINITIAL -> LINE (Transition : STRING)");
			                     yybegin(LINE);
            }
          case 40: break;
          case 17: 
            { LOGGER.finest("NEW_LINE -> LINE (Transition : STRING");
                			     yybegin(LINE);
            }
          case 41: break;
          case 18: 
            { endLocation(); 
    			                 LOGGER.finest("NEW_LINE -> AVOID (Transition : END");
    							 yybegin(AVOID);
            }
          case 42: break;
          case 19: 
            { endLocation(); 
    							 LOGGER.finest("LINE -> AVOID (Transition : END");
    							 yybegin(AVOID);
            }
          case 43: break;
          case 20: 
            { location = yytext(); 
                    			LOGGER.finest("Setting value [location ="+location+"]");
                    			LOGGER.finest("YYINITIAL -> NAMING (Transition : TYPE)");
                    			yybegin(NAMING);
            }
          case 44: break;
          case 21: 
            { location = yytext(); 
    			                 LOGGER.finest("Setting value [location ="+location+"]");
    							 LOGGER.finest("NEW_LINE -> NAMING (Transition : TYPE");
    							 yybegin(NAMING);
            }
          case 45: break;
          case 22: 
            { location = yytext();
			                     LOGGER.finest("Setting value [location ="+location+"]");
			                     LOGGER.finest("LINE -> NAMING (Transition : TYPE");
							     yybegin(NAMING);
            }
          case 46: break;
          case 23: 
            { LOGGER.finest("YYINITIAL -> LINE (Transition : FALSE)");
                			     yybegin(LINE);
            }
          case 47: break;
          case 24: 
            { LOGGER.finest("NEW_LINE -> LINE (Transition : FALSE");
			                     yybegin(LINE);
            }
          case 48: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
