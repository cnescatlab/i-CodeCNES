/* The following code was generated by JFlex 1.6.1 */

/************************************************************************************************/
/* i-Code CNES is a static code analyzer.                                                       */
/* This software is a free software, under the terms of the Eclipse Public License version 1.0. */ 
/* http://www.eclipse.org/legal/epl-v10.html                                                    */
/************************************************************************************************/ 

/*****************************************************************************/
/* This file is used to generate a rule checker for Tr.ModifCondSortie rule. */
/* For further information on this, we advise you to refer to RNC manuals.	 */
/* As many comments have been done on the ExampleRule.lex file, this file    */
/* will restrain its comments on modifications.								 */
/*																			 */
/*****************************************************************************/

package fr.cnes.analysis.tools.fortran77.rules;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.File;
import java.util.LinkedList;
import java.util.List;

import java.util.logging.Logger;

import org.eclipse.core.runtime.Path;

import fr.cnes.analysis.tools.analyzer.exception.JFlexException;
import fr.cnes.analysis.tools.analyzer.datas.AbstractRule;
import fr.cnes.analysis.tools.analyzer.datas.Violation;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lex/COMDATALoopCondition.lex</tt>
 */
public class COMDATALoopCondition extends AbstractRule {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int NAMING = 4;
  public static final int NEW_LINE = 6;
  public static final int LINE = 8;
  public static final int ENTER_DO = 10;
  public static final int ENTER_WHILE = 12;
  public static final int VAR = 14;
  public static final int PAR = 16;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8, 8
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\36\1\37\1\37\1\37\22\0\1\33\1\1\1\32\2\0"+
    "\1\30\1\0\1\31\1\40\1\41\1\3\5\0\12\27\3\0\1\42"+
    "\3\0\1\21\1\17\1\2\1\15\1\14\1\4\1\20\1\35\1\25"+
    "\2\24\1\23\1\22\1\6\1\11\1\12\1\24\1\13\1\26\1\7"+
    "\1\5\1\24\1\34\3\24\4\0\1\27\1\0\1\21\1\17\1\2"+
    "\1\15\1\14\1\4\1\20\1\35\1\25\2\24\1\23\1\22\1\6"+
    "\1\11\1\12\1\24\1\13\1\26\1\7\1\5\1\24\1\34\3\24"+
    "\12\0\1\37\252\0\2\10\115\0\1\16\u1ea8\0\1\37\1\37\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\11\0\1\1\1\2\1\3\6\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\2\13\2\14\1\12\3\14"+
    "\1\12\3\14\2\12\3\15\1\6\3\15\1\6\3\15"+
    "\2\6\1\16\2\17\1\20\1\21\1\22\1\23\3\24"+
    "\1\6\1\25\1\26\1\27\1\30\3\0\1\31\3\0"+
    "\1\14\1\0\1\14\1\0\2\14\1\32\1\0\3\14"+
    "\2\0\1\15\1\0\1\15\1\0\2\15\1\33\1\0"+
    "\3\15\1\0\1\17\6\0\1\10\3\14\1\0\2\14"+
    "\1\0\3\14\3\15\1\0\2\15\1\0\3\15\1\17"+
    "\1\0\1\17\1\22\6\0\2\14\1\0\3\14\1\0"+
    "\1\14\1\0\3\14\2\15\1\0\3\15\1\0\1\15"+
    "\1\0\3\15\1\0\1\17\7\0\2\14\1\0\2\14"+
    "\1\34\2\0\1\14\1\0\3\14\1\0\2\15\1\0"+
    "\2\15\1\35\2\0\1\15\1\0\3\15\2\36\5\0"+
    "\1\37\1\0\1\14\1\0\1\14\1\0\2\14\1\34"+
    "\2\0\1\14\1\0\1\40\2\14\1\0\1\15\1\0"+
    "\1\15\1\0\2\15\1\35\2\0\1\15\1\0\1\41"+
    "\2\15\5\0\1\14\1\0\1\14\1\0\1\14\1\0"+
    "\2\14\1\0\1\15\1\0\1\15\1\0\1\15\1\0"+
    "\2\15\1\0\1\40\2\0\1\14\1\41\2\0\1\15";

  private static int [] zzUnpackAction() {
    int [] result = new int[266];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\43\0\106\0\151\0\214\0\257\0\322\0\365"+
    "\0\u0118\0\u013b\0\u013b\0\u013b\0\u015e\0\u0181\0\u01a4\0\u01c7"+
    "\0\u01ea\0\u020d\0\u013b\0\u013b\0\u013b\0\u013b\0\u0230\0\u013b"+
    "\0\u013b\0\u0253\0\u013b\0\u0276\0\u0299\0\u02bc\0\u02df\0\u0302"+
    "\0\u0325\0\u0348\0\u036b\0\u038e\0\u03b1\0\u03d4\0\u03f7\0\u041a"+
    "\0\u043d\0\u0460\0\u0483\0\u04a6\0\u04c9\0\u04ec\0\u050f\0\u0532"+
    "\0\u0555\0\u0578\0\u03d4\0\u03f7\0\u013b\0\u059b\0\u05be\0\u013b"+
    "\0\u013b\0\u05e1\0\u013b\0\u013b\0\u03d4\0\u03f7\0\u0604\0\u013b"+
    "\0\u0627\0\u013b\0\u013b\0\u064a\0\u066d\0\u0690\0\u013b\0\u06b3"+
    "\0\u06d6\0\u06f9\0\u071c\0\u073f\0\u0762\0\u0785\0\u07a8\0\u07cb"+
    "\0\u0299\0\u07ee\0\u0811\0\u0834\0\u0857\0\u03d4\0\u03f7\0\u087a"+
    "\0\u089d\0\u08c0\0\u08e3\0\u0906\0\u0929\0\u0460\0\u094c\0\u096f"+
    "\0\u0992\0\u09b5\0\u09d8\0\u09fb\0\u0a1e\0\u0a41\0\u0a64\0\u0a87"+
    "\0\u0aaa\0\u0acd\0\u0af0\0\u0b13\0\u0b36\0\u0b59\0\u0b7c\0\u0b9f"+
    "\0\u0bc2\0\u0be5\0\u0c08\0\u0c2b\0\u0c4e\0\u0c71\0\u0c94\0\u0cb7"+
    "\0\u0cda\0\u0cfd\0\u0d20\0\u0d43\0\u0d66\0\u0d89\0\u0dac\0\u0dcf"+
    "\0\u0df2\0\u0e15\0\u0e38\0\u0e5b\0\u0e7e\0\u0ea1\0\u0ec4\0\u0ee7"+
    "\0\u0f0a\0\u0f2d\0\u0f50\0\u0f73\0\u0f96\0\u0fb9\0\u0fdc\0\u0fff"+
    "\0\u1022\0\u1045\0\u1068\0\u108b\0\u10ae\0\u10d1\0\u10f4\0\u1117"+
    "\0\u113a\0\u115d\0\u1180\0\u11a3\0\u11c6\0\u11e9\0\u120c\0\u122f"+
    "\0\u1252\0\u1275\0\u1298\0\u12bb\0\u12de\0\u1301\0\u1324\0\u1347"+
    "\0\u136a\0\u138d\0\u13b0\0\u13d3\0\u13f6\0\u1419\0\u143c\0\u0299"+
    "\0\u145f\0\u1482\0\u14a5\0\u14c8\0\u14eb\0\u150e\0\u1531\0\u1554"+
    "\0\u1577\0\u159a\0\u15bd\0\u15e0\0\u1603\0\u0460\0\u1626\0\u1649"+
    "\0\u166c\0\u168f\0\u16b2\0\u16d5\0\u16f8\0\u013b\0\u059b\0\u171b"+
    "\0\u173e\0\u1761\0\u1784\0\u17a7\0\u013b\0\u17ca\0\u17ed\0\u1810"+
    "\0\u1833\0\u1856\0\u1879\0\u189c\0\u013b\0\u18bf\0\u18e2\0\u1905"+
    "\0\u1928\0\u0299\0\u194b\0\u196e\0\u1991\0\u19b4\0\u19d7\0\u19fa"+
    "\0\u1a1d\0\u1a40\0\u1a63\0\u013b\0\u1a86\0\u1aa9\0\u1acc\0\u1aef"+
    "\0\u0460\0\u1b12\0\u1b35\0\u1b58\0\u1b7b\0\u1b9e\0\u1bc1\0\u1be4"+
    "\0\u1c07\0\u1c2a\0\u1c4d\0\u1c70\0\u1c93\0\u1cb6\0\u1cd9\0\u1cfc"+
    "\0\u1d1f\0\u1d42\0\u1d65\0\u1d88\0\u1dab\0\u1dce\0\u1df1\0\u1e14"+
    "\0\u1e37\0\u1e5a\0\u013b\0\u1e7d\0\u1ea0\0\u1ec3\0\u013b\0\u1ee6"+
    "\0\u1f09\0\u1f2c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[266];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\12\1\13\2\14\1\15\3\12\1\16\1\12\1\17"+
    "\2\12\1\20\1\21\3\12\1\22\2\12\1\16\1\21"+
    "\7\12\1\23\1\24\3\12\1\25\1\13\34\25\1\26"+
    "\1\24\4\25\1\13\1\27\1\25\4\27\1\25\5\27"+
    "\1\25\10\27\5\25\2\27\1\30\1\24\3\25\1\31"+
    "\1\13\1\32\1\33\1\34\3\35\1\36\1\35\1\37"+
    "\1\35\1\40\1\41\1\42\3\35\1\43\2\35\1\44"+
    "\1\45\2\31\1\46\1\47\1\31\2\35\1\25\1\24"+
    "\3\31\1\25\1\13\1\50\1\25\1\51\3\52\1\53"+
    "\1\52\1\54\1\52\1\55\1\56\1\57\3\52\1\60"+
    "\2\52\1\61\1\62\2\25\1\63\1\64\1\25\2\52"+
    "\1\65\1\24\4\25\1\13\1\66\1\25\4\66\1\25"+
    "\5\66\1\25\10\66\2\25\1\63\1\64\1\25\1\67"+
    "\1\66\1\70\1\24\1\71\3\25\1\13\1\72\1\25"+
    "\4\72\1\25\5\72\1\25\10\72\2\25\1\63\1\64"+
    "\1\25\2\72\1\73\1\24\3\25\1\74\1\13\27\74"+
    "\1\75\1\76\1\77\2\74\1\100\1\24\2\74\1\101"+
    "\1\25\1\13\36\25\1\102\1\103\1\25\50\0\1\104"+
    "\43\0\1\105\47\0\1\106\40\0\1\107\36\0\1\110"+
    "\46\0\1\111\33\0\1\27\1\0\4\27\1\0\5\27"+
    "\1\0\11\27\1\112\3\0\2\27\7\0\1\35\1\0"+
    "\4\35\1\0\1\113\4\35\1\0\11\35\1\114\3\0"+
    "\2\35\7\0\1\35\1\0\1\35\1\115\2\35\1\0"+
    "\5\35\1\0\11\35\1\114\3\0\2\35\7\0\1\35"+
    "\1\0\4\35\1\0\5\35\1\0\11\35\1\114\3\0"+
    "\2\35\13\0\1\116\36\0\1\35\1\0\4\35\1\0"+
    "\2\35\1\117\2\35\1\0\11\35\1\114\3\0\2\35"+
    "\7\0\1\35\1\0\2\35\1\120\1\35\1\0\5\35"+
    "\1\0\11\35\1\114\3\0\2\35\7\0\1\35\1\0"+
    "\4\35\1\0\1\121\4\35\1\0\11\35\1\114\3\0"+
    "\2\35\12\0\1\122\37\0\1\35\1\0\4\35\1\0"+
    "\1\123\4\35\1\0\11\35\1\114\3\0\2\35\7\0"+
    "\1\35\1\0\2\35\1\124\1\35\1\0\5\35\1\0"+
    "\11\35\1\114\3\0\2\35\7\0\1\35\1\0\1\35"+
    "\1\125\2\35\1\0\5\35\1\0\11\35\1\114\3\0"+
    "\2\35\5\0\31\126\1\25\11\126\32\127\1\25\10\127"+
    "\2\0\1\52\1\0\4\52\1\0\1\130\4\52\1\0"+
    "\11\52\1\131\3\0\2\52\7\0\1\52\1\0\1\52"+
    "\1\132\2\52\1\0\5\52\1\0\11\52\1\131\3\0"+
    "\2\52\7\0\1\52\1\0\4\52\1\0\5\52\1\0"+
    "\11\52\1\131\3\0\2\52\13\0\1\133\36\0\1\52"+
    "\1\0\4\52\1\0\2\52\1\134\2\52\1\0\11\52"+
    "\1\131\3\0\2\52\7\0\1\52\1\0\2\52\1\135"+
    "\1\52\1\0\5\52\1\0\11\52\1\131\3\0\2\52"+
    "\7\0\1\52\1\0\4\52\1\0\1\136\4\52\1\0"+
    "\11\52\1\131\3\0\2\52\12\0\1\137\37\0\1\52"+
    "\1\0\4\52\1\0\1\140\4\52\1\0\11\52\1\131"+
    "\3\0\2\52\7\0\1\52\1\0\2\52\1\141\1\52"+
    "\1\0\5\52\1\0\11\52\1\131\3\0\2\52\7\0"+
    "\1\52\1\0\1\52\1\142\2\52\1\0\5\52\1\0"+
    "\11\52\1\131\3\0\2\52\7\0\1\66\1\0\4\66"+
    "\1\0\5\66\1\0\11\66\1\143\3\0\2\66\7\0"+
    "\1\66\1\0\4\66\1\0\5\66\1\0\11\66\1\143"+
    "\3\0\1\66\1\144\7\0\1\72\1\0\4\72\1\0"+
    "\5\72\1\0\11\72\1\145\3\0\2\72\40\0\1\77"+
    "\51\0\1\25\6\0\1\146\43\0\1\147\44\0\1\150"+
    "\50\0\1\151\40\0\1\152\27\0\1\153\1\0\4\153"+
    "\1\0\5\153\1\0\10\153\5\0\2\153\7\0\1\35"+
    "\1\0\2\35\1\154\1\35\1\0\5\35\1\0\11\35"+
    "\1\114\3\0\2\35\7\0\1\155\1\0\4\155\1\0"+
    "\5\155\1\0\10\155\5\0\2\155\7\0\1\35\1\0"+
    "\2\35\1\156\1\35\1\0\5\35\1\0\11\35\1\114"+
    "\3\0\2\35\14\0\1\157\35\0\1\35\1\0\4\35"+
    "\1\0\1\160\4\35\1\0\11\35\1\114\3\0\2\35"+
    "\7\0\1\35\1\0\4\35\1\0\4\35\1\161\1\0"+
    "\11\35\1\114\3\0\2\35\24\0\1\162\25\0\1\35"+
    "\1\0\4\35\1\0\4\35\1\163\1\0\11\35\1\114"+
    "\3\0\2\35\7\0\1\35\1\0\3\35\1\164\1\0"+
    "\5\35\1\0\11\35\1\114\3\0\2\35\7\0\1\35"+
    "\1\0\4\35\1\0\5\35\1\0\1\165\10\35\1\114"+
    "\3\0\2\35\7\0\1\52\1\0\2\52\1\166\1\52"+
    "\1\0\5\52\1\0\11\52\1\131\3\0\2\52\7\0"+
    "\1\167\1\0\4\167\1\0\5\167\1\0\10\167\5\0"+
    "\2\167\7\0\1\52\1\0\2\52\1\170\1\52\1\0"+
    "\5\52\1\0\11\52\1\131\3\0\2\52\14\0\1\171"+
    "\35\0\1\52\1\0\4\52\1\0\1\172\4\52\1\0"+
    "\11\52\1\131\3\0\2\52\7\0\1\52\1\0\4\52"+
    "\1\0\4\52\1\173\1\0\11\52\1\131\3\0\2\52"+
    "\24\0\1\174\25\0\1\52\1\0\4\52\1\0\4\52"+
    "\1\175\1\0\11\52\1\131\3\0\2\52\7\0\1\52"+
    "\1\0\3\52\1\176\1\0\5\52\1\0\11\52\1\131"+
    "\3\0\2\52\7\0\1\52\1\0\4\52\1\0\5\52"+
    "\1\0\1\177\10\52\1\131\3\0\2\52\7\0\1\200"+
    "\1\0\4\200\1\0\5\200\1\0\10\200\5\0\2\200"+
    "\7\0\1\66\1\0\4\66\1\201\5\66\1\0\6\66"+
    "\1\202\2\66\1\143\3\0\2\66\7\0\1\203\1\0"+
    "\4\203\1\0\5\203\1\0\10\203\5\0\2\203\7\0"+
    "\1\204\54\0\1\205\30\0\1\206\15\0\1\207\35\0"+
    "\1\210\34\0\1\211\37\0\1\153\1\0\4\153\1\0"+
    "\5\153\1\0\11\153\4\0\2\153\7\0\1\35\1\0"+
    "\3\35\1\212\1\0\5\35\1\0\11\35\1\114\3\0"+
    "\2\35\7\0\1\155\1\0\4\155\1\0\5\155\1\0"+
    "\11\155\4\0\2\155\7\0\1\213\1\0\4\35\1\0"+
    "\5\35\1\0\11\35\1\114\3\0\2\35\21\0\1\214"+
    "\30\0\1\215\1\0\4\35\1\0\5\35\1\0\1\35"+
    "\1\216\7\35\1\114\3\0\2\35\7\0\1\35\1\0"+
    "\4\35\1\0\4\35\1\217\1\0\11\35\1\114\2\0"+
    "\1\220\1\221\1\35\20\0\1\222\31\0\1\35\1\0"+
    "\1\35\1\223\2\35\1\0\5\35\1\0\11\35\1\114"+
    "\3\0\2\35\7\0\1\35\1\0\4\35\1\0\3\35"+
    "\1\224\1\35\1\0\11\35\1\114\3\0\2\35\7\0"+
    "\1\35\1\0\4\35\1\0\2\35\1\225\2\35\1\0"+
    "\11\35\1\114\3\0\2\35\7\0\1\52\1\0\3\52"+
    "\1\226\1\0\5\52\1\0\11\52\1\131\3\0\2\52"+
    "\7\0\1\167\1\0\4\167\1\0\5\167\1\0\11\167"+
    "\4\0\2\167\7\0\1\227\1\0\4\52\1\0\5\52"+
    "\1\0\11\52\1\131\3\0\2\52\21\0\1\230\30\0"+
    "\1\231\1\0\4\52\1\0\5\52\1\0\1\52\1\232"+
    "\7\52\1\131\3\0\2\52\7\0\1\52\1\0\4\52"+
    "\1\0\4\52\1\233\1\0\11\52\1\131\2\0\1\234"+
    "\1\235\1\52\20\0\1\236\31\0\1\52\1\0\1\52"+
    "\1\237\2\52\1\0\5\52\1\0\11\52\1\131\3\0"+
    "\2\52\7\0\1\52\1\0\4\52\1\0\3\52\1\240"+
    "\1\52\1\0\11\52\1\131\3\0\2\52\7\0\1\52"+
    "\1\0\4\52\1\0\2\52\1\241\2\52\1\0\11\52"+
    "\1\131\3\0\2\52\7\0\1\200\1\0\4\200\1\0"+
    "\5\200\1\0\11\200\4\0\2\200\30\0\1\242\21\0"+
    "\1\66\1\0\4\66\1\0\5\66\1\0\4\66\1\243"+
    "\4\66\1\143\3\0\2\66\7\0\1\203\1\0\4\203"+
    "\1\0\5\203\1\0\11\203\4\0\2\203\14\0\1\244"+
    "\46\0\1\245\43\0\1\246\41\0\1\247\40\0\1\250"+
    "\54\0\1\251\21\0\1\35\1\0\4\35\1\252\5\35"+
    "\1\0\6\35\1\253\2\35\1\114\3\0\2\35\7\0"+
    "\1\35\1\0\3\35\1\254\1\0\5\35\1\0\11\35"+
    "\1\114\3\0\2\35\20\0\1\255\31\0\1\35\1\0"+
    "\4\35\1\0\3\35\1\256\1\35\1\0\11\35\1\114"+
    "\3\0\2\35\7\0\1\35\1\0\4\35\1\0\2\35"+
    "\1\257\2\35\1\0\11\35\1\114\3\0\2\35\7\0"+
    "\1\35\1\0\4\35\1\0\1\260\4\35\1\0\11\35"+
    "\1\114\3\0\2\35\22\0\1\261\15\0\1\220\1\262"+
    "\10\0\1\35\1\0\4\35\1\0\5\35\1\0\11\35"+
    "\1\114\3\0\1\35\1\263\16\0\1\264\33\0\1\35"+
    "\1\0\4\35\1\0\5\35\1\0\4\35\1\265\4\35"+
    "\1\114\3\0\2\35\7\0\1\35\1\0\4\35\1\0"+
    "\2\35\1\266\2\35\1\0\11\35\1\114\3\0\2\35"+
    "\7\0\1\35\1\0\4\35\1\0\1\267\4\35\1\0"+
    "\11\35\1\114\3\0\2\35\7\0\1\52\1\0\4\52"+
    "\1\270\5\52\1\0\6\52\1\271\2\52\1\131\3\0"+
    "\2\52\7\0\1\52\1\0\3\52\1\272\1\0\5\52"+
    "\1\0\11\52\1\131\3\0\2\52\20\0\1\273\31\0"+
    "\1\52\1\0\4\52\1\0\3\52\1\274\1\52\1\0"+
    "\11\52\1\131\3\0\2\52\7\0\1\52\1\0\4\52"+
    "\1\0\2\52\1\275\2\52\1\0\11\52\1\131\3\0"+
    "\2\52\7\0\1\52\1\0\4\52\1\0\1\276\4\52"+
    "\1\0\11\52\1\131\3\0\2\52\22\0\1\277\15\0"+
    "\1\234\1\300\10\0\1\52\1\0\4\52\1\0\5\52"+
    "\1\0\11\52\1\131\3\0\1\52\1\301\16\0\1\302"+
    "\33\0\1\52\1\0\4\52\1\0\5\52\1\0\4\52"+
    "\1\303\4\52\1\131\3\0\2\52\7\0\1\52\1\0"+
    "\4\52\1\0\2\52\1\304\2\52\1\0\11\52\1\131"+
    "\3\0\2\52\7\0\1\52\1\0\4\52\1\0\1\305"+
    "\4\52\1\0\11\52\1\131\3\0\2\52\21\0\1\306"+
    "\30\0\1\66\1\0\4\66\1\0\3\66\1\307\1\66"+
    "\1\0\11\66\1\143\3\0\2\66\15\0\1\310\14\0"+
    "\1\310\21\0\1\311\53\0\1\312\46\0\1\313\26\0"+
    "\1\314\51\0\1\315\34\0\1\316\36\0\1\35\1\0"+
    "\2\35\1\317\1\35\1\0\5\35\1\0\11\35\1\114"+
    "\3\0\2\35\7\0\1\35\1\0\4\35\1\320\5\35"+
    "\1\0\6\35\1\321\2\35\1\114\3\0\2\35\11\0"+
    "\1\322\40\0\1\35\1\0\4\35\1\0\4\35\1\323"+
    "\1\0\11\35\1\114\3\0\2\35\7\0\1\35\1\0"+
    "\4\35\1\0\5\35\1\0\2\35\1\324\6\35\1\114"+
    "\3\0\2\35\16\0\1\325\66\0\1\326\7\0\1\35"+
    "\1\0\4\35\1\327\5\35\1\0\6\35\1\330\2\35"+
    "\1\114\3\0\2\35\12\0\1\331\37\0\1\35\1\0"+
    "\4\35\1\0\3\35\1\332\1\35\1\0\11\35\1\114"+
    "\3\0\2\35\7\0\1\35\1\0\1\333\3\35\1\0"+
    "\5\35\1\0\11\35\1\114\3\0\2\35\7\0\1\35"+
    "\1\0\1\35\1\334\2\35\1\0\5\35\1\0\11\35"+
    "\1\114\3\0\2\35\13\0\1\335\36\0\1\52\1\0"+
    "\2\52\1\336\1\52\1\0\5\52\1\0\11\52\1\131"+
    "\3\0\2\52\7\0\1\52\1\0\4\52\1\337\5\52"+
    "\1\0\6\52\1\340\2\52\1\131\3\0\2\52\11\0"+
    "\1\341\40\0\1\52\1\0\4\52\1\0\4\52\1\342"+
    "\1\0\11\52\1\131\3\0\2\52\7\0\1\52\1\0"+
    "\4\52\1\0\5\52\1\0\2\52\1\343\6\52\1\131"+
    "\3\0\2\52\16\0\1\344\66\0\1\345\7\0\1\52"+
    "\1\0\4\52\1\346\5\52\1\0\6\52\1\347\2\52"+
    "\1\131\3\0\2\52\12\0\1\350\37\0\1\52\1\0"+
    "\4\52\1\0\3\52\1\351\1\52\1\0\11\52\1\131"+
    "\3\0\2\52\7\0\1\52\1\0\1\352\3\52\1\0"+
    "\5\52\1\0\11\52\1\131\3\0\2\52\7\0\1\52"+
    "\1\0\1\52\1\353\2\52\1\0\5\52\1\0\11\52"+
    "\1\131\3\0\2\52\16\0\1\354\52\0\1\355\26\0"+
    "\1\356\57\0\1\315\27\0\1\357\40\0\1\360\37\0"+
    "\1\35\1\0\1\35\1\361\2\35\1\0\5\35\1\0"+
    "\11\35\1\114\3\0\2\35\16\0\1\362\33\0\1\35"+
    "\1\0\4\35\1\0\1\363\4\35\1\0\11\35\1\114"+
    "\3\0\2\35\26\0\1\364\23\0\1\35\1\0\1\35"+
    "\1\365\2\35\1\0\5\35\1\0\11\35\1\114\3\0"+
    "\2\35\7\0\1\35\1\0\4\35\1\0\5\35\1\0"+
    "\3\35\1\332\5\35\1\114\3\0\2\35\15\0\1\327"+
    "\14\0\1\327\40\0\1\360\21\0\1\35\1\0\4\35"+
    "\1\0\5\35\1\0\4\35\1\361\4\35\1\114\3\0"+
    "\2\35\14\0\1\366\35\0\1\35\1\0\4\35\1\0"+
    "\5\35\1\0\2\35\1\367\6\35\1\114\3\0\2\35"+
    "\7\0\1\35\1\0\3\35\1\370\1\0\5\35\1\0"+
    "\11\35\1\114\3\0\2\35\12\0\1\371\37\0\1\52"+
    "\1\0\1\52\1\372\2\52\1\0\5\52\1\0\11\52"+
    "\1\131\3\0\2\52\16\0\1\373\33\0\1\52\1\0"+
    "\4\52\1\0\1\374\4\52\1\0\11\52\1\131\3\0"+
    "\2\52\26\0\1\375\23\0\1\52\1\0\1\52\1\376"+
    "\2\52\1\0\5\52\1\0\11\52\1\131\3\0\2\52"+
    "\7\0\1\52\1\0\4\52\1\0\5\52\1\0\3\52"+
    "\1\351\5\52\1\131\3\0\2\52\15\0\1\346\14\0"+
    "\1\346\40\0\1\371\21\0\1\52\1\0\4\52\1\0"+
    "\5\52\1\0\4\52\1\372\4\52\1\131\3\0\2\52"+
    "\14\0\1\377\35\0\1\52\1\0\4\52\1\0\5\52"+
    "\1\0\2\52\1\u0100\6\52\1\131\3\0\2\52\7\0"+
    "\1\52\1\0\3\52\1\u0101\1\0\5\52\1\0\11\52"+
    "\1\131\3\0\2\52\13\0\1\315\36\0\1\251\53\0"+
    "\1\251\37\0\1\u0102\14\0\1\u0102\31\0\1\325\30\0"+
    "\1\35\1\0\4\35\1\0\3\35\1\260\1\35\1\0"+
    "\11\35\1\114\3\0\2\35\13\0\1\u0103\36\0\1\35"+
    "\1\0\2\35\1\332\1\35\1\0\5\35\1\0\11\35"+
    "\1\114\3\0\2\35\7\0\1\u0104\42\0\1\35\1\0"+
    "\4\35\1\0\2\35\1\265\2\35\1\0\11\35\1\114"+
    "\3\0\2\35\15\0\1\u0105\14\0\1\u0105\17\0\1\265"+
    "\1\0\4\35\1\0\5\35\1\0\11\35\1\114\3\0"+
    "\2\35\7\0\1\35\1\0\4\35\1\u0105\5\35\1\0"+
    "\6\35\1\u0106\2\35\1\114\3\0\2\35\21\0\1\344"+
    "\30\0\1\52\1\0\4\52\1\0\3\52\1\276\1\52"+
    "\1\0\11\52\1\131\3\0\2\52\13\0\1\u0107\36\0"+
    "\1\52\1\0\2\52\1\351\1\52\1\0\5\52\1\0"+
    "\11\52\1\131\3\0\2\52\7\0\1\u0108\42\0\1\52"+
    "\1\0\4\52\1\0\2\52\1\303\2\52\1\0\11\52"+
    "\1\131\3\0\2\52\15\0\1\u0109\14\0\1\u0109\17\0"+
    "\1\303\1\0\4\52\1\0\5\52\1\0\11\52\1\131"+
    "\3\0\2\52\7\0\1\52\1\0\4\52\1\u0109\5\52"+
    "\1\0\6\52\1\u010a\2\52\1\131\3\0\2\52\13\0"+
    "\1\251\50\0\1\u0103\34\0\1\u0104\36\0\1\35\1\0"+
    "\2\35\1\265\1\35\1\0\5\35\1\0\11\35\1\114"+
    "\3\0\2\35\21\0\1\u0107\34\0\1\u0108\36\0\1\52"+
    "\1\0\2\52\1\303\1\52\1\0\5\52\1\0\11\52"+
    "\1\131\3\0\2\52\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8015];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\11\0\3\11\6\1\4\11\1\1\2\11\1\1\1\11"+
    "\31\1\1\11\2\1\2\11\1\1\2\11\3\1\1\11"+
    "\1\1\2\11\3\0\1\11\3\0\1\1\1\0\1\1"+
    "\1\0\3\1\1\0\3\1\2\0\1\1\1\0\1\1"+
    "\1\0\3\1\1\0\3\1\1\0\1\1\6\0\4\1"+
    "\1\0\2\1\1\0\6\1\1\0\2\1\1\0\4\1"+
    "\1\0\2\1\6\0\2\1\1\0\3\1\1\0\1\1"+
    "\1\0\5\1\1\0\3\1\1\0\1\1\1\0\3\1"+
    "\1\0\1\1\7\0\2\1\1\0\3\1\2\0\1\1"+
    "\1\0\3\1\1\0\2\1\1\0\3\1\2\0\1\1"+
    "\1\0\3\1\1\11\1\1\5\0\1\11\1\0\1\1"+
    "\1\0\1\1\1\0\2\1\1\11\2\0\1\1\1\0"+
    "\3\1\1\0\1\1\1\0\1\1\1\0\2\1\1\11"+
    "\2\0\1\1\1\0\3\1\5\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\2\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\2\1\1\0\1\11\2\0\1\1"+
    "\1\11\2\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[266];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private static final Logger LOGGER = Logger.getLogger(COMDATALoopCondition.class.getName());

	String location = "MAIN PROGRAM";
	
	List<String> identifiers = new LinkedList<String>();
	List<String> conditionsDo = new LinkedList<String>();
	List<String> conditionsWhile = new LinkedList<String>();
	List<Integer> numDo = new LinkedList<Integer>();
	List<Integer> numWhile = new LinkedList<Integer>();
	 
	String condition = "";
	int par = 0;
	int valueLoop = 0;
	boolean doVar = true;
	String descr = "";
	String parsedFileName;
	
	public COMDATALoopCondition() {
    }
	
	@Override
	public void setInputFile(final File file) throws FileNotFoundException {
		super.setInputFile(file);
        LOGGER.finest("begin method setInputFile");
        this.parsedFileName = file.toString();
		this.zzReader = new FileReader(new Path(file.getAbsolutePath()).toOSString());
        LOGGER.finest("end method setInputFile");
	}
	
	/** If the last identifier is:
	    - DO -> check conditionsDo list
	    - WHILE -> check conditionsWhile list
	**/
	private void closeCondition() {
        LOGGER.finest("begin method closeCondition");
		int idLength = identifiers.size() - 1;
		if (identifiers.get(idLength).equals("DO")) 
			closeDoLoop();
		else if (identifiers.get(idLength).equals("WHILE"))
			closeWhileLoop();
		identifiers.remove(idLength);
        LOGGER.finest("end method closeCondition");
	}
	
	/** Delete the identifiers and variables in do loop **/
	private void closeDoLoop() {
        LOGGER.finest("begin method closeDoLoop");
		if(!numDo.isEmpty()){
			int condLength = numDo.get(numDo.size()-1);
			for (int i = 0; i < condLength; i++) {
				if(!conditionsDo.isEmpty()) {
					conditionsDo.remove(conditionsDo.size()-1);
				}
			}
			numDo.remove(numDo.size()-1);
		}
        LOGGER.finest("end method closeDoLoop");
	}
	
	/** Delete the identifiers and variables in do while loop **/
	private void closeWhileLoop() {
        LOGGER.finest("begin method closeWhileLoop");
		if(!numWhile.isEmpty()) {
			int condLength = numWhile.get(numWhile.size()-1);
			for (int i = 0; i < condLength; i++) {
				if(!conditionsWhile.isEmpty()) {
					conditionsWhile.remove(conditionsWhile.size()-1);
				}
			}
			numWhile.remove(numWhile.size()-1);
		}
        LOGGER.finest("end method closeWhileLoop");
	}
	
	/** If the last variable is in the list of DO variables -> error **/
	private void checkDo() {
        LOGGER.finest("begin method checkDo");
		if(conditionsDo.contains(descr)) {
			try {
				LOGGER.fine("Setting error line "+yyline+1+" for the variable "+descr+".");
				this.setError(location,"The variable " + descr + " is modified inside the loop.", yyline+1);
			} catch (JFlexException e) {
				e.printStackTrace();
			}
		}
        LOGGER.finest("end method checkDo");
	}
	
	/** If the variables of do while is the to be modified -> error
	    else -> delete variable from list **/
	private void checkDoWhile() {
        LOGGER.finest("begin method checkDoWhile");
		if(!numWhile.isEmpty()) {
			int val = numWhile.get(numWhile.size()-1);
			if(val != 1) {
				numWhile.set(numWhile.size()-1, val-1);
				conditionsWhile.remove(descr);
			}
			else {
				try {
					LOGGER.fine("Setting error line "+yyline+1+" for the variable "+descr+".");
					this.setError(location,"The variable " + descr + " is modified inside the loop.", yyline+1);
				} catch (JFlexException e) {
					e.printStackTrace();
				}
			}
		}
        LOGGER.finest("end method checkDoWhile");
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public COMDATALoopCondition(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 192) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public List<Violation> run() throws java.io.IOException, JFlexException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          {     return getViolations();
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> LINE (Transition : . )");
                                    yybegin(LINE);
            }
          case 34: break;
          case 2: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - [ALL] -> COMMENT (Transition : FREE_COMMENT \""+yytext()+"\" )");
                				    yybegin(COMMENT);
            }
          case 35: break;
          case 3: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> COMMENT (Transition : COMMENT_WORD \""+yytext()+"\" )");
                                    yybegin(COMMENT);
            }
          case 36: break;
          case 4: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> NEW_LINE (Transition : \\n )");
                                    yybegin(NEW_LINE);
            }
          case 37: break;
          case 5: 
            { String errorMessage = "Class"+this.getClass().getName()+"\nIllegal character <" + yytext() + ">\nFile :"+ this.parsedFileName+"\nat line:"+(yyline+1)+" column:"+yycolumn;
                                    throw new JFlexException(new Exception(errorMessage));
            }
          case 38: break;
          case 6: 
            { 
            }
          case 39: break;
          case 7: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - COMMENT -> NEW_LINE (Transition : \\n )");
                                    yybegin(NEW_LINE);
            }
          case 40: break;
          case 8: 
            { location = location + " " + yytext();
                                    conditionsDo.clear();
                                    conditionsWhile.clear();
                                    identifiers.clear();
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NAMING -> COMMENT (Transition : VAR \""+yytext()+"\" )");
                                    yybegin(COMMENT);
            }
          case 41: break;
          case 9: 
            { conditionsDo.clear(); conditionsWhile.clear(); identifiers.clear();
								 LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NAMING -> NEW_LINE (Transition : \\n )");
								 yybegin(NEW_LINE);
            }
          case 42: break;
          case 10: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> LINE (Transition : . )");
                                    yybegin(LINE);
            }
          case 43: break;
          case 11: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> COMMENT (Transition : COMMENT_WORD \""+yytext()+"\" )");
                                    yybegin(COMMENT);
            }
          case 44: break;
          case 12: 
            { condition = yytext();
								 if (!conditionsDo.isEmpty()) {
								 	if (conditionsDo.contains(condition)) {
								 		descr = yytext();
								 		LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> VAR (Transition : VAR \""+yytext()+"\" )");
								 		yybegin(VAR);
								 	}
								 }
								 if (!conditionsWhile.isEmpty()) {
								 	if (conditionsWhile.contains(condition)) {
								 		descr = yytext();
								 		LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> VAR (Transition : VAR \""+yytext()+"\" )");
								 		yybegin(VAR);
								 	}
								 }
            }
          case 45: break;
          case 13: 
            { condition = yytext();
								 if (!conditionsDo.isEmpty()) {
								 	if (conditionsDo.contains(condition)) {
								 		descr = yytext();
								 		LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> VAR (Transition : VAR \""+yytext()+"\" )");
								 		yybegin(VAR);
								 	}
								 }
								 if (!conditionsWhile.isEmpty()) {
								 	if (conditionsWhile.contains(condition)) {
								 		descr = yytext();
								 		LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> VAR (Transition : VAR \""+yytext()+"\" )");
								 		yybegin(VAR);
								 	}
								 }
            }
          case 46: break;
          case 14: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> NEW_LINE (Transition : \\n )");
                                    yybegin(NEW_LINE);
            }
          case 47: break;
          case 15: 
            { conditionsDo.add(yytext()); valueLoop++;
            }
          case 48: break;
          case 16: 
            { numDo.add(valueLoop);
                                    valueLoop=0;
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - ENTER_DO -> NEW_LINE (Transition : \\n )");
                                    yybegin(NEW_LINE);
            }
          case 49: break;
          case 17: 
            { par=1;
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - ENTER_DO -> PAR (Transition : [(] )");
                                    yybegin(PAR);
            }
          case 50: break;
          case 18: 
            { conditionsWhile.add(yytext()); valueLoop++;
            }
          case 51: break;
          case 19: 
            { numWhile.add(valueLoop);
                                    valueLoop=0;
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - ENTER_WHILE -> NEW_LINE (Transition : \\n )");
                                    yybegin(NEW_LINE);
            }
          case 52: break;
          case 20: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - VAR -> LINE (Transition : . )");
                                    yybegin(LINE);
            }
          case 53: break;
          case 21: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - VAR -> NEW_LINE (Transition : \\n )");
                                    yybegin(NEW_LINE);
            }
          case 54: break;
          case 22: 
            { if(!identifiers.isEmpty()) {
    								 	if(identifiers.get(identifiers.size()-1).equals("DO")){
    								 	  checkDo();
    								 	}
    								 	if(identifiers.get(identifiers.size()-1).equals("WHILE")){
    								 	  checkDoWhile();
    								 	}
    								 }
    								 LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - VAR -> LINE (Transition : [=] )");
    								 yybegin(LINE);
            }
          case 55: break;
          case 23: 
            { par++;
            }
          case 56: break;
          case 24: 
            { par--;
                                    if(par==0){
                                        LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - PAR -> ENTER_DO (Transition : [)] )");
                                        yybegin(ENTER_DO);
                                    }
            }
          case 57: break;
          case 25: 
            { identifiers.add("DO");
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> ENTER_DO (Transition : RULE_WORD \""+yytext()+"\" )");
                                    yybegin(ENTER_DO);
            }
          case 58: break;
          case 26: 
            { identifiers.add("DO");
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> ENTER_DO (Transition : RULE_WORD \""+yytext()+"\" )");
    								yybegin(ENTER_DO);
            }
          case 59: break;
          case 27: 
            { identifiers.add("DO");
    								LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> ENTER_DO (Transition : RULE_WORD \""+yytext()+"\" )");
    								yybegin(ENTER_DO);
            }
          case 60: break;
          case 28: 
            { if (!identifiers.isEmpty()){
                                        closeCondition();
                                    }
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> COMMENT (Transition : END \""+yytext()+"\" )");
                                    yybegin(COMMENT);
            }
          case 61: break;
          case 29: 
            { if (!identifiers.isEmpty()){
                                        closeCondition();
                                    }
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> COMMENT (Transition : END \""+yytext()+"\" )");
                                    yybegin(COMMENT);
            }
          case 62: break;
          case 30: 
            { identifiers.set(identifiers.size()-1,"WHILE");
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - ENTER_DO -> ENTER_WHILE (Transition : WHILE \""+yytext()+"\" )");
                                    yybegin(ENTER_WHILE);
            }
          case 63: break;
          case 31: 
            { location = yytext();
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> NAMING (Transition : TYPE \""+yytext()+"\" )");
                                    yybegin(NAMING);
            }
          case 64: break;
          case 32: 
            { location = yytext();
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> NAMING (Transition : TYPE \""+yytext()+"\" )");
                                    yybegin(NAMING);
            }
          case 65: break;
          case 33: 
            { location = yytext();
                                    LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - LINE -> NAMING (Transition : TYPE \""+yytext()+"\" )");
                                    yybegin(NAMING);
            }
          case 66: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
