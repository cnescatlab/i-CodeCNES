/* The following code was generated by JFlex 1.6.1 */

/************************************************************************************************/
/* i-Code CNES is a static code analyzer.                                                       */
/* This software is a free software, under the terms of the Eclipse Public License version 1.0. */ 
/* http://www.eclipse.org/legal/epl-v10.html                                                    */
/************************************************************************************************/ 

/********************************************************************************/
/* This file is used to generate a rule checker for COM.DESIGN.ActiveWait rule.	*/
/* For further information on this, we advise you to refer to RNC manuals.	    */
/* As many comments have been done on the ExampleRule.lex file, this file       */
/* will restrain its comments on modifications.								    */
/*																			    */
/********************************************************************************/

package fr.cnes.analysis.tools.fortran77.rules;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.File;
import java.util.List;
import java.util.LinkedList;

import java.util.logging.Logger;

import org.eclipse.core.runtime.Path;

import fr.cnes.analysis.tools.analyzer.datas.AbstractRule;
import fr.cnes.analysis.tools.analyzer.datas.Violation;
import fr.cnes.analysis.tools.analyzer.exception.JFlexException;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lex/COMDESIGNActiveWait.lex</tt>
 */
public class COMDESIGNActiveWait extends AbstractRule {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int NAMING = 4;
  public static final int NEW_LINE = 6;
  public static final int LINE = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\27\1\34\1\35\1\36\1\35\22\0\1\27\1\1\1\32"+
    "\4\0\1\31\2\0\1\3\5\0\12\24\7\0\1\21\1\17\1\2"+
    "\1\15\1\14\1\4\1\20\1\30\1\25\2\30\1\23\1\22\1\6"+
    "\1\11\1\12\1\30\1\13\1\26\1\7\1\5\1\30\1\33\3\30"+
    "\4\0\1\24\1\0\1\21\1\17\1\2\1\15\1\14\1\4\1\20"+
    "\1\30\1\25\2\30\1\23\1\22\1\6\1\11\1\12\1\30\1\13"+
    "\1\26\1\7\1\5\1\30\1\33\3\30\12\0\1\35\252\0\2\10"+
    "\115\0\1\16\u1ea8\0\1\35\1\35\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\5\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\2\2\12\2\5\1\11\3\5"+
    "\1\11\1\5\1\11\2\5\2\11\2\5\1\4\2\13"+
    "\15\5\1\14\6\0\1\5\1\0\1\5\1\0\2\5"+
    "\1\0\3\5\1\15\2\0\1\5\3\0\3\5\2\0"+
    "\1\16\2\0\2\5\1\0\2\5\2\0\4\5\1\0"+
    "\1\17\1\0\1\5\6\0\1\5\1\0\1\5\1\0"+
    "\2\5\1\0\3\5\2\0\1\5\3\0\3\5\3\0"+
    "\2\5\1\0\2\5\2\0\4\5\1\0\1\5\7\0"+
    "\1\5\1\0\1\5\1\0\2\5\1\0\2\5\1\0"+
    "\2\5\3\0\1\5\3\0\3\5\2\0\2\20\1\5"+
    "\1\0\2\5\1\0\1\5\2\0\4\5\2\21\7\0"+
    "\1\5\2\0\1\5\1\0\2\5\1\0\2\5\1\22"+
    "\2\0\1\5\4\0\2\5\2\0\1\5\1\0\2\5"+
    "\1\0\3\5\5\0\1\23\1\0\1\5\2\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\2\5\1\22\1\0"+
    "\1\24\4\0\2\5\3\0\1\5\1\0\2\5\1\0"+
    "\1\25\2\5\10\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\3\0\3\5\3\0\1\5\1\0\1\5"+
    "\1\0\2\5\4\0\2\26\1\0\1\5\1\24\3\0"+
    "\1\5\2\0\1\25\2\0\1\5\31\0\2\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[339];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\37\0\76\0\135\0\174\0\233\0\233\0\272"+
    "\0\331\0\370\0\u0117\0\u0136\0\233\0\233\0\233\0\233"+
    "\0\u0155\0\233\0\u0174\0\u0174\0\u0193\0\u0174\0\u01b2\0\u01d1"+
    "\0\u01f0\0\u020f\0\u022e\0\u024d\0\u026c\0\u028b\0\u02aa\0\u02c9"+
    "\0\u02e8\0\u0307\0\u0326\0\u0345\0\u0174\0\u0174\0\u0364\0\233"+
    "\0\u0383\0\u03a2\0\u03c1\0\u03e0\0\u03ff\0\u041e\0\u043d\0\u045c"+
    "\0\u047b\0\u049a\0\u04b9\0\u04d8\0\u04f7\0\233\0\u0516\0\u0535"+
    "\0\u0554\0\u0573\0\u0592\0\u05b1\0\u05d0\0\u05ef\0\u060e\0\u062d"+
    "\0\u064c\0\u066b\0\u068a\0\u06a9\0\u06c8\0\u06e7\0\u03a2\0\u0706"+
    "\0\u0725\0\u0744\0\u0763\0\u0782\0\u07a1\0\u07c0\0\u07df\0\u07fe"+
    "\0\u081d\0\u083c\0\233\0\u085b\0\u087a\0\u0899\0\u08b8\0\u08d7"+
    "\0\u08f6\0\u0915\0\u0934\0\u0953\0\u0972\0\u0991\0\u09b0\0\u09cf"+
    "\0\u04b9\0\233\0\u04d8\0\u09ee\0\u0a0d\0\u0a2c\0\u0a4b\0\u0a6a"+
    "\0\u0a89\0\u0aa8\0\u0ac7\0\u0ae6\0\u0b05\0\u0b24\0\u0b43\0\u0b62"+
    "\0\u0b81\0\u0ba0\0\u0bbf\0\u0bde\0\u0bfd\0\u0c1c\0\u0c3b\0\u0c5a"+
    "\0\u0c79\0\u0c98\0\u0cb7\0\u0cd6\0\u0cf5\0\u0d14\0\u0d33\0\u0d52"+
    "\0\u0d71\0\u0d90\0\u0daf\0\u0dce\0\u0ded\0\u0e0c\0\u0e2b\0\u0e4a"+
    "\0\u0e69\0\u0e88\0\u0ea7\0\u0ec6\0\u0ee5\0\u0f04\0\u0f23\0\u0f42"+
    "\0\u0f61\0\u0f80\0\u0f9f\0\u0fbe\0\u0fdd\0\u0ffc\0\u101b\0\u103a"+
    "\0\u1059\0\u1078\0\u1097\0\u10b6\0\u10d5\0\u10f4\0\u1113\0\u1132"+
    "\0\u1151\0\u1170\0\u118f\0\u11ae\0\u11cd\0\u11ec\0\u120b\0\u122a"+
    "\0\u1249\0\u1268\0\u1287\0\u12a6\0\233\0\u03a2\0\u12c5\0\u12e4"+
    "\0\u1303\0\u1322\0\u1341\0\u1360\0\u137f\0\u139e\0\u13bd\0\u13dc"+
    "\0\u13fb\0\u141a\0\233\0\u03a2\0\u1439\0\u1458\0\u1477\0\u1496"+
    "\0\u14b5\0\u14d4\0\u14f3\0\u1512\0\u1531\0\u1550\0\u156f\0\u158e"+
    "\0\u15ad\0\u15cc\0\u15eb\0\u160a\0\u1629\0\u03a2\0\u1648\0\u1667"+
    "\0\u1686\0\u16a5\0\u16c4\0\u16e3\0\u1702\0\u1721\0\u1740\0\u175f"+
    "\0\u177e\0\u179d\0\u17bc\0\u17db\0\u17fa\0\u1819\0\u1838\0\u1857"+
    "\0\u1876\0\u1895\0\u18b4\0\u18d3\0\u18f2\0\u1911\0\233\0\u1930"+
    "\0\u194f\0\u196e\0\u198d\0\u19ac\0\u19cb\0\u19ea\0\u1a09\0\u1a28"+
    "\0\u1a47\0\u1a66\0\u1a85\0\233\0\u1aa4\0\u03a2\0\u1ac3\0\u1ae2"+
    "\0\u1b01\0\u1b20\0\u1b3f\0\u1b5e\0\u1b7d\0\u1b9c\0\u1bbb\0\u1bda"+
    "\0\u1bf9\0\u1c18\0\u1c37\0\u1c56\0\u03a2\0\u1c75\0\u1c94\0\u1cb3"+
    "\0\u1cd2\0\u1cf1\0\u1d10\0\u1d2f\0\u1d4e\0\u1d6d\0\u1d8c\0\u1dab"+
    "\0\u1dca\0\u1de9\0\u1e08\0\u1e27\0\u1e46\0\u1e65\0\u1e84\0\u1ea3"+
    "\0\u1ec2\0\u1ee1\0\u1f00\0\u1f1f\0\u1f3e\0\u1f5d\0\u1f7c\0\u1f9b"+
    "\0\u1fba\0\u1fd9\0\u1ff8\0\u2017\0\u2036\0\u2055\0\u2074\0\u2093"+
    "\0\u20b2\0\233\0\u03a2\0\u20d1\0\u20f0\0\u1ee1\0\u210f\0\u212e"+
    "\0\u214d\0\u216c\0\u218b\0\u21aa\0\233\0\u21c9\0\u21e8\0\u2207"+
    "\0\u2226\0\u2245\0\u2264\0\u2283\0\u22a2\0\u22c1\0\u22e0\0\u22ff"+
    "\0\u231e\0\u233d\0\u235c\0\u237b\0\u239a\0\u23b9\0\u23d8\0\u23f7"+
    "\0\u2416\0\u2435\0\u2454\0\u2473\0\u2492\0\u24b1\0\u24d0\0\u24ef"+
    "\0\u250e\0\u081d\0\u085b";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[339];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\2\6\1\10\3\6\1\11\1\6\1\12"+
    "\3\6\1\13\3\6\1\14\2\6\1\11\1\13\5\6"+
    "\1\15\2\16\1\17\1\7\32\17\1\20\2\16\1\17"+
    "\1\7\1\21\1\17\4\21\1\17\5\21\1\17\5\21"+
    "\1\17\2\21\1\17\1\21\2\17\1\21\1\22\2\16"+
    "\1\23\1\24\1\25\1\26\1\27\3\30\1\31\1\30"+
    "\1\32\1\30\1\33\1\34\1\35\3\30\1\36\1\30"+
    "\1\37\1\40\1\41\1\23\1\30\1\42\1\43\1\44"+
    "\1\45\2\46\1\17\1\7\1\47\1\50\1\51\3\52"+
    "\1\53\1\52\1\54\1\52\1\55\1\56\1\57\3\52"+
    "\1\60\1\52\1\17\1\61\1\62\1\17\1\52\1\63"+
    "\1\64\1\65\1\66\2\16\44\0\1\67\37\0\1\70"+
    "\43\0\1\71\30\0\1\72\42\0\1\73\27\0\1\21"+
    "\1\0\4\21\1\0\5\21\1\0\10\21\1\0\1\21"+
    "\2\0\1\21\25\0\1\74\16\0\1\52\1\0\1\75"+
    "\3\52\1\76\1\77\4\52\1\100\7\52\1\101\1\0"+
    "\1\52\2\0\1\52\5\0\1\52\1\0\1\75\1\102"+
    "\2\52\1\76\5\52\1\100\7\52\1\101\1\0\1\52"+
    "\2\0\1\52\5\0\1\52\1\0\1\75\3\52\1\76"+
    "\5\52\1\100\7\52\1\101\1\0\1\52\2\0\1\52"+
    "\11\0\1\103\13\0\1\74\16\0\1\52\1\0\1\75"+
    "\3\52\1\76\2\52\1\104\2\52\1\100\2\52\1\105"+
    "\4\52\1\101\1\0\1\52\2\0\1\52\5\0\1\52"+
    "\1\0\1\75\1\52\1\106\1\52\1\76\5\52\1\100"+
    "\7\52\1\101\1\0\1\52\2\0\1\52\5\0\1\52"+
    "\1\0\1\75\3\52\1\76\1\107\4\52\1\100\7\52"+
    "\1\101\1\0\1\52\2\0\1\52\10\0\1\110\14\0"+
    "\1\74\1\111\15\0\1\52\1\0\1\75\3\52\1\76"+
    "\1\112\4\52\1\100\7\52\1\101\1\0\1\52\2\0"+
    "\1\52\7\0\1\113\3\0\1\76\1\0\1\114\3\0"+
    "\1\100\3\0\1\115\2\0\1\76\1\100\12\0\1\52"+
    "\1\0\1\75\1\52\1\116\1\52\1\76\5\52\1\100"+
    "\7\52\1\101\1\0\1\52\2\0\1\52\5\0\1\52"+
    "\1\0\1\75\1\117\2\52\1\76\5\52\1\100\4\52"+
    "\1\120\2\52\1\101\1\0\1\52\2\0\1\52\3\0"+
    "\22\121\1\122\6\121\1\123\5\121\22\124\1\125\7\124"+
    "\1\123\4\124\2\0\1\52\1\0\1\75\3\52\1\76"+
    "\5\52\1\100\2\52\1\126\4\52\1\101\1\0\1\52"+
    "\2\0\1\52\5\0\1\52\1\0\4\52\1\0\1\77"+
    "\4\52\1\0\10\52\1\0\1\52\2\0\1\52\5\0"+
    "\1\52\1\0\1\52\1\127\2\52\1\0\5\52\1\0"+
    "\10\52\1\0\1\52\2\0\1\52\5\0\1\52\1\0"+
    "\4\52\1\0\5\52\1\0\10\52\1\0\1\52\2\0"+
    "\1\52\11\0\1\130\32\0\1\52\1\0\4\52\1\0"+
    "\2\52\1\131\2\52\1\0\2\52\1\132\5\52\1\0"+
    "\1\52\2\0\1\52\5\0\1\52\1\0\2\52\1\106"+
    "\1\52\1\0\5\52\1\0\10\52\1\0\1\52\2\0"+
    "\1\52\5\0\1\52\1\0\4\52\1\0\1\107\4\52"+
    "\1\0\10\52\1\0\1\52\2\0\1\52\10\0\1\133"+
    "\15\0\1\134\15\0\1\52\1\0\4\52\1\0\1\135"+
    "\4\52\1\0\10\52\1\0\1\52\2\0\1\52\5\0"+
    "\1\52\1\0\2\52\1\136\1\52\1\0\5\52\1\0"+
    "\10\52\1\0\1\52\2\0\1\52\5\0\1\52\1\0"+
    "\1\52\1\137\2\52\1\0\5\52\1\0\4\52\1\140"+
    "\3\52\1\0\1\52\2\0\1\52\3\0\31\141\1\142"+
    "\5\141\32\143\1\142\4\143\2\0\1\52\1\0\4\52"+
    "\1\0\5\52\1\0\2\52\1\144\5\52\1\0\1\52"+
    "\2\0\1\52\11\0\1\145\37\0\1\146\40\0\1\147"+
    "\44\0\1\150\34\0\1\151\32\0\1\152\27\0\1\52"+
    "\1\0\1\52\1\153\2\52\1\0\5\52\1\0\10\52"+
    "\1\0\1\52\2\0\1\52\11\0\1\154\32\0\1\52"+
    "\1\0\2\52\1\155\1\52\1\0\5\52\1\0\10\52"+
    "\1\0\1\52\2\0\1\52\10\0\1\156\33\0\1\52"+
    "\1\0\1\52\1\157\2\52\1\0\5\52\1\0\10\52"+
    "\1\0\1\52\2\0\1\52\5\0\1\52\1\0\2\52"+
    "\1\160\1\52\1\0\5\52\1\0\10\52\1\0\1\52"+
    "\2\0\1\52\12\0\1\161\31\0\1\52\1\0\4\52"+
    "\1\0\1\162\4\52\1\0\10\52\1\0\1\52\2\0"+
    "\1\52\5\0\1\52\1\0\1\52\1\163\2\52\1\0"+
    "\5\52\1\0\10\52\1\0\1\52\2\0\1\52\5\0"+
    "\1\52\1\0\4\52\1\0\4\52\1\164\1\0\10\52"+
    "\1\0\1\52\2\0\1\52\22\0\1\165\33\0\1\166"+
    "\24\0\1\52\1\0\4\52\1\0\4\52\1\167\1\0"+
    "\10\52\1\0\1\52\2\0\1\52\10\0\1\170\44\0"+
    "\1\171\34\0\1\172\27\0\1\52\1\0\3\52\1\173"+
    "\1\0\5\52\1\0\10\52\1\0\1\52\2\0\1\52"+
    "\5\0\1\52\1\0\4\52\1\0\5\52\1\0\1\174"+
    "\7\52\1\0\1\52\2\0\1\52\5\0\1\52\1\0"+
    "\4\52\1\0\3\52\1\175\1\52\1\0\10\52\1\0"+
    "\1\52\2\0\1\52\3\0\31\121\1\123\16\121\1\176"+
    "\17\121\1\123\5\121\32\124\1\123\15\124\1\177\20\124"+
    "\1\123\4\124\2\0\1\52\1\0\4\52\1\200\5\52"+
    "\1\0\6\52\1\201\1\52\1\0\1\52\2\0\1\52"+
    "\5\0\1\52\1\0\2\52\1\202\1\52\1\0\5\52"+
    "\1\0\10\52\1\0\1\52\2\0\1\52\12\0\1\203"+
    "\31\0\1\52\1\0\4\52\1\0\1\204\4\52\1\0"+
    "\10\52\1\0\1\52\2\0\1\52\5\0\1\52\1\0"+
    "\1\52\1\205\2\52\1\0\5\52\1\0\10\52\1\0"+
    "\1\52\2\0\1\52\22\0\1\206\33\0\1\207\24\0"+
    "\1\52\1\0\4\52\1\0\4\52\1\210\1\0\10\52"+
    "\1\0\1\52\2\0\1\52\5\0\1\52\1\0\3\52"+
    "\1\211\1\0\5\52\1\0\10\52\1\0\1\52\2\0"+
    "\1\52\5\0\1\52\1\0\4\52\1\0\5\52\1\0"+
    "\1\212\7\52\1\0\1\52\2\0\1\52\5\0\1\52"+
    "\1\0\4\52\1\0\3\52\1\213\1\52\1\0\10\52"+
    "\1\0\1\52\2\0\1\52\5\0\1\52\1\0\4\52"+
    "\1\214\5\52\1\0\6\52\1\215\1\52\1\0\1\52"+
    "\2\0\1\52\5\0\1\216\50\0\1\217\24\0\1\220"+
    "\15\0\1\221\31\0\1\222\30\0\1\223\46\0\1\224"+
    "\23\0\1\52\1\0\2\52\1\225\1\52\1\0\5\52"+
    "\1\0\10\52\1\0\1\52\2\0\1\52\12\0\1\226"+
    "\31\0\1\52\1\0\3\52\1\227\1\0\5\52\1\0"+
    "\10\52\1\0\1\52\2\0\1\52\22\0\1\230\21\0"+
    "\1\52\1\0\4\52\1\0\5\52\1\0\1\231\7\52"+
    "\1\0\1\52\2\0\1\52\5\0\1\232\1\0\4\52"+
    "\1\0\5\52\1\0\10\52\1\0\1\52\2\0\1\52"+
    "\17\0\1\233\24\0\1\234\1\0\4\52\1\0\5\52"+
    "\1\0\1\52\1\235\6\52\1\0\1\52\2\0\1\52"+
    "\5\0\1\52\1\0\4\52\1\0\5\52\1\236\7\52"+
    "\1\237\1\0\1\52\2\0\1\52\5\0\1\52\1\0"+
    "\4\52\1\0\4\52\1\240\1\0\10\52\1\241\1\52"+
    "\2\0\1\52\2\0\1\241\13\0\1\242\37\0\1\243"+
    "\24\0\1\52\1\0\1\52\1\244\2\52\1\0\5\52"+
    "\1\0\10\52\1\0\1\52\2\0\1\52\11\0\1\245"+
    "\41\0\1\246\42\0\1\247\23\0\1\52\1\0\4\52"+
    "\1\0\3\52\1\250\1\52\1\0\10\52\1\0\1\52"+
    "\2\0\1\52\5\0\1\52\1\0\4\52\1\0\2\52"+
    "\1\251\2\52\1\0\10\52\1\0\1\52\2\0\1\52"+
    "\5\0\1\52\1\0\4\52\1\0\3\52\1\252\1\52"+
    "\1\0\10\52\1\0\1\52\2\0\1\52\3\0\15\121"+
    "\1\253\13\121\1\123\5\121\15\124\1\254\14\124\1\123"+
    "\4\124\7\0\1\255\31\0\1\52\1\0\3\52\1\256"+
    "\1\0\5\52\1\0\10\52\1\0\1\52\2\0\1\52"+
    "\5\0\1\257\1\0\4\52\1\0\5\52\1\0\10\52"+
    "\1\0\1\52\2\0\1\52\17\0\1\260\24\0\1\261"+
    "\1\0\4\52\1\0\5\52\1\0\1\52\1\262\6\52"+
    "\1\0\1\52\2\0\1\52\5\0\1\52\1\0\4\52"+
    "\1\0\5\52\1\263\7\52\1\264\1\0\1\52\2\0"+
    "\1\52\16\0\1\265\37\0\1\266\24\0\1\52\1\0"+
    "\1\52\1\267\2\52\1\0\5\52\1\0\10\52\1\0"+
    "\1\52\2\0\1\52\5\0\1\52\1\0\4\52\1\0"+
    "\3\52\1\270\1\52\1\0\10\52\1\0\1\52\2\0"+
    "\1\52\5\0\1\52\1\0\4\52\1\0\2\52\1\271"+
    "\2\52\1\0\10\52\1\0\1\52\2\0\1\52\5\0"+
    "\1\52\1\0\4\52\1\0\3\52\1\272\1\52\1\0"+
    "\10\52\1\0\1\52\2\0\1\52\12\0\1\273\31\0"+
    "\1\52\1\0\3\52\1\274\1\0\5\52\1\0\10\52"+
    "\1\0\1\52\2\0\1\52\12\0\1\275\42\0\1\276"+
    "\37\0\1\277\35\0\1\300\34\0\1\301\50\0\1\302"+
    "\20\0\1\303\33\0\1\304\1\0\4\52\1\0\5\52"+
    "\1\0\10\52\1\0\1\52\2\0\1\52\17\0\1\305"+
    "\24\0\1\52\1\0\4\52\1\306\5\52\1\0\6\52"+
    "\1\307\1\52\1\0\1\52\2\0\1\52\16\0\1\310"+
    "\25\0\1\52\1\0\4\52\1\0\2\52\1\311\2\52"+
    "\1\0\10\52\1\0\1\52\2\0\1\52\5\0\1\52"+
    "\1\0\3\52\1\312\1\0\5\52\1\0\10\52\1\0"+
    "\1\52\2\0\1\52\16\0\1\313\25\0\1\52\1\0"+
    "\4\52\1\0\3\52\1\314\1\52\1\0\10\52\1\0"+
    "\1\52\2\0\1\52\5\0\1\52\1\0\4\52\1\0"+
    "\2\52\1\315\2\52\1\0\10\52\1\0\1\52\2\0"+
    "\1\52\17\0\1\255\24\0\1\52\1\0\4\52\1\0"+
    "\3\52\1\256\1\52\1\0\10\52\1\0\1\52\2\0"+
    "\1\52\5\0\1\52\1\0\4\52\1\0\1\316\4\52"+
    "\1\0\10\52\1\0\1\52\2\0\1\52\20\0\1\317"+
    "\11\0\1\241\6\0\1\241\11\0\1\320\37\0\1\255"+
    "\26\0\1\52\1\0\4\52\1\0\5\52\1\0\4\52"+
    "\1\321\3\52\1\0\1\52\2\0\1\52\5\0\1\322"+
    "\36\0\1\323\15\0\1\324\23\0\1\325\33\0\1\52"+
    "\1\0\4\52\1\0\2\52\1\326\2\52\1\0\10\52"+
    "\1\0\1\52\2\0\1\52\5\0\1\52\1\0\4\52"+
    "\1\0\1\327\4\52\1\0\10\52\1\0\1\52\2\0"+
    "\1\52\5\0\1\52\1\0\4\52\1\0\1\52\1\256"+
    "\3\52\1\0\10\52\1\0\1\52\2\0\1\52\3\0"+
    "\5\121\1\330\23\121\1\123\5\121\5\124\1\331\24\124"+
    "\1\123\4\124\2\0\1\52\1\0\3\52\1\332\1\0"+
    "\5\52\1\0\10\52\1\0\1\52\2\0\1\52\16\0"+
    "\1\333\25\0\1\52\1\0\4\52\1\0\3\52\1\334"+
    "\1\52\1\0\10\52\1\0\1\52\2\0\1\52\5\0"+
    "\1\52\1\0\4\52\1\0\2\52\1\335\2\52\1\0"+
    "\10\52\1\0\1\52\2\0\1\52\17\0\1\273\24\0"+
    "\1\52\1\0\4\52\1\0\3\52\1\274\1\52\1\0"+
    "\10\52\1\0\1\52\2\0\1\52\14\0\1\336\37\0"+
    "\1\273\26\0\1\52\1\0\4\52\1\0\5\52\1\0"+
    "\4\52\1\337\3\52\1\0\1\52\2\0\1\52\5\0"+
    "\1\52\1\0\4\52\1\0\2\52\1\340\2\52\1\0"+
    "\10\52\1\0\1\52\2\0\1\52\5\0\1\52\1\0"+
    "\4\52\1\0\1\341\4\52\1\0\10\52\1\0\1\52"+
    "\2\0\1\52\5\0\1\52\1\0\4\52\1\0\1\52"+
    "\1\274\3\52\1\0\10\52\1\0\1\52\2\0\1\52"+
    "\13\0\1\342\14\0\1\342\15\0\1\343\47\0\1\344"+
    "\42\0\1\345\22\0\1\346\45\0\1\347\45\0\1\350"+
    "\15\0\1\52\1\0\3\52\1\351\1\0\5\52\1\0"+
    "\10\52\1\0\1\52\2\0\1\52\16\0\1\352\31\0"+
    "\1\353\32\0\1\52\1\0\2\52\1\354\1\52\1\0"+
    "\5\52\1\0\10\52\1\0\1\52\2\0\1\52\14\0"+
    "\1\355\27\0\1\52\1\0\4\52\1\0\1\356\4\52"+
    "\1\0\10\52\1\0\1\52\2\0\1\52\5\0\1\52"+
    "\1\0\4\52\1\357\5\52\1\0\6\52\1\360\1\52"+
    "\1\0\1\52\2\0\1\52\7\0\1\361\34\0\1\52"+
    "\1\0\4\52\1\0\4\52\1\362\1\0\10\52\1\0"+
    "\1\52\2\0\1\52\5\0\1\52\1\0\4\52\1\0"+
    "\5\52\1\0\2\52\1\363\5\52\1\0\1\52\2\0"+
    "\1\52\14\0\1\364\32\0\1\365\33\0\1\52\1\0"+
    "\4\52\1\0\3\52\1\366\1\52\1\0\10\52\1\0"+
    "\1\52\2\0\1\52\12\0\1\367\43\0\1\370\35\0"+
    "\1\371\46\0\1\372\15\0\1\52\1\0\1\373\3\52"+
    "\1\0\5\52\1\0\10\52\1\0\1\52\2\0\1\52"+
    "\5\0\1\52\1\0\1\52\1\374\2\52\1\0\5\52"+
    "\1\0\10\52\1\0\1\52\2\0\1\52\3\0\23\121"+
    "\1\375\5\121\1\123\5\121\23\124\1\376\6\124\1\123"+
    "\4\124\2\0\1\52\1\0\4\52\1\377\5\52\1\0"+
    "\6\52\1\u0100\1\52\1\0\1\52\2\0\1\52\7\0"+
    "\1\u0101\34\0\1\52\1\0\4\52\1\0\4\52\1\u0102"+
    "\1\0\10\52\1\0\1\52\2\0\1\52\5\0\1\52"+
    "\1\0\4\52\1\0\5\52\1\0\2\52\1\u0103\5\52"+
    "\1\0\1\52\2\0\1\52\10\0\1\u0104\33\0\1\52"+
    "\1\0\4\52\1\0\3\52\1\u0105\1\52\1\0\10\52"+
    "\1\0\1\52\2\0\1\52\5\0\1\52\1\0\1\u0106"+
    "\3\52\1\0\5\52\1\0\10\52\1\0\1\52\2\0"+
    "\1\52\5\0\1\52\1\0\1\52\1\u0107\2\52\1\0"+
    "\5\52\1\0\10\52\1\0\1\52\2\0\1\52\14\0"+
    "\1\u0108\46\0\1\u0109\22\0\1\u010a\53\0\1\347\23\0"+
    "\1\u010b\43\0\1\u010c\24\0\1\52\1\0\4\52\1\u010d"+
    "\5\52\1\0\10\52\1\0\1\52\2\0\1\52\7\0"+
    "\1\u010e\37\0\1\u010f\33\0\1\52\1\0\1\52\1\u0110"+
    "\2\52\1\0\5\52\1\0\10\52\1\0\1\52\2\0"+
    "\1\52\10\0\1\u0111\33\0\1\52\1\0\1\52\1\u0112"+
    "\2\52\1\0\5\52\1\0\10\52\1\0\1\52\2\0"+
    "\1\52\14\0\1\u0113\27\0\1\52\1\0\4\52\1\0"+
    "\1\u0114\4\52\1\0\10\52\1\0\1\52\2\0\1\52"+
    "\24\0\1\u0115\17\0\1\52\1\0\1\52\1\u0116\2\52"+
    "\1\0\5\52\1\0\10\52\1\0\1\52\2\0\1\52"+
    "\5\0\1\52\1\0\4\52\1\0\5\52\1\0\3\52"+
    "\1\366\4\52\1\0\1\52\2\0\1\52\12\0\1\u0117"+
    "\37\0\1\u010d\14\0\1\u010d\26\0\1\u0118\42\0\1\u0119"+
    "\31\0\1\u011a\24\0\1\52\1\0\4\52\1\0\5\52"+
    "\1\0\2\52\1\u011b\5\52\1\0\1\52\2\0\1\52"+
    "\5\0\1\52\1\0\3\52\1\u011c\1\0\5\52\1\0"+
    "\10\52\1\0\1\52\2\0\1\52\3\0\14\121\1\u011d"+
    "\14\121\1\123\5\121\14\124\1\u011e\15\124\1\123\4\124"+
    "\11\0\1\u011f\27\0\1\52\1\0\4\52\1\0\1\u0120"+
    "\4\52\1\0\10\52\1\0\1\52\2\0\1\52\24\0"+
    "\1\u0121\17\0\1\52\1\0\1\52\1\u0122\2\52\1\0"+
    "\5\52\1\0\10\52\1\0\1\52\2\0\1\52\5\0"+
    "\1\52\1\0\4\52\1\0\5\52\1\0\3\52\1\u0105"+
    "\4\52\1\0\1\52\2\0\1\52\12\0\1\u0123\31\0"+
    "\1\52\1\0\4\52\1\0\5\52\1\0\2\52\1\u0124"+
    "\5\52\1\0\1\52\2\0\1\52\5\0\1\52\1\0"+
    "\3\52\1\u0125\1\0\5\52\1\0\10\52\1\0\1\52"+
    "\2\0\1\52\11\0\1\347\32\0\1\302\47\0\1\302"+
    "\33\0\1\u0126\14\0\1\u0126\23\0\1\u0127\14\0\1\u010c"+
    "\6\0\1\u010c\11\0\1\u0128\46\0\1\u0129\31\0\1\u012a"+
    "\24\0\1\52\1\0\4\52\1\0\3\52\1\u012b\1\52"+
    "\1\0\10\52\1\0\1\52\2\0\1\52\12\0\1\u012c"+
    "\31\0\1\52\1\0\3\52\1\u012d\1\0\5\52\1\0"+
    "\10\52\1\0\1\52\2\0\1\52\11\0\1\u012e\32\0"+
    "\1\52\1\0\2\52\1\366\1\52\1\0\5\52\1\0"+
    "\10\52\1\0\1\52\2\0\1\52\5\0\1\u012f\36\0"+
    "\1\52\1\0\4\52\1\0\2\52\1\321\2\52\1\0"+
    "\10\52\1\0\1\52\2\0\1\52\13\0\1\u0130\14\0"+
    "\1\u0130\16\0\1\u0131\53\0\1\u011a\16\0\1\17\1\0"+
    "\4\17\1\0\5\17\1\0\10\17\1\0\1\17\2\0"+
    "\1\17\5\0\1\321\1\0\4\52\1\0\5\52\1\0"+
    "\10\52\1\0\1\52\2\0\1\52\5\0\1\52\1\0"+
    "\4\52\1\u0130\5\52\1\0\6\52\1\u0132\1\52\1\0"+
    "\1\52\2\0\1\52\3\0\12\121\1\u0133\14\121\1\u011d"+
    "\1\121\1\123\4\121\1\u011d\12\124\1\u0134\14\124\1\u011e"+
    "\2\124\1\123\3\124\1\u011e\6\0\1\u0135\32\0\1\52"+
    "\1\0\2\52\1\u0105\1\52\1\0\5\52\1\0\10\52"+
    "\1\0\1\52\2\0\1\52\5\0\1\u0136\36\0\1\52"+
    "\1\0\4\52\1\0\2\52\1\337\2\52\1\0\10\52"+
    "\1\0\1\52\2\0\1\52\13\0\1\u0137\14\0\1\u0137"+
    "\13\0\1\337\1\0\4\52\1\0\5\52\1\0\10\52"+
    "\1\0\1\52\2\0\1\52\5\0\1\52\1\0\4\52"+
    "\1\u0137\5\52\1\0\6\52\1\u0138\1\52\1\0\1\52"+
    "\2\0\1\52\11\0\1\302\43\0\1\u0139\31\0\1\u011a"+
    "\32\0\1\372\44\0\1\u013a\14\0\1\u013a\13\0\1\52"+
    "\1\0\4\52\1\u013a\5\52\1\0\10\52\1\0\1\52"+
    "\2\0\1\52\17\0\1\u012e\30\0\1\u012f\43\0\1\372"+
    "\25\0\1\52\1\0\2\52\1\321\1\52\1\0\5\52"+
    "\1\0\10\52\1\0\1\52\2\0\1\52\3\0\13\121"+
    "\1\u013b\15\121\1\123\5\121\13\124\1\u013c\16\124\1\123"+
    "\4\124\14\0\1\u0135\30\0\1\u0136\32\0\1\52\1\0"+
    "\2\52\1\337\1\52\1\0\5\52\1\0\10\52\1\0"+
    "\1\52\2\0\1\52\14\0\1\u013d\33\0\1\372\30\0"+
    "\11\121\1\u013e\17\121\1\123\5\121\11\124\1\u013f\20\124"+
    "\1\123\4\124\2\0\1\u0140\34\0\2\121\1\u0141\26\121"+
    "\1\123\5\121\2\124\1\u0142\27\124\1\123\4\124\14\0"+
    "\1\u0143\22\0\14\121\1\u0144\14\121\1\123\5\121\14\124"+
    "\1\u0145\15\124\1\123\4\124\15\0\1\u0146\21\0\15\121"+
    "\1\u0147\13\121\1\123\5\121\15\124\1\u0148\14\124\1\123"+
    "\4\124\5\0\1\u0149\31\0\5\121\1\u014a\23\121\1\123"+
    "\5\121\5\124\1\u014b\24\124\1\123\4\124\13\0\1\u014c"+
    "\23\0\13\121\1\u014d\15\121\1\123\5\121\13\124\1\u014e"+
    "\16\124\1\123\4\124\14\0\1\u014f\22\0\14\121\1\u0150"+
    "\14\121\1\123\5\121\14\124\1\u0151\15\124\1\123\4\124"+
    "\2\17\1\0\1\17\4\0\1\17\5\0\1\17\10\0"+
    "\1\17\1\0\2\17\1\0\3\17\2\u0152\1\121\1\u0152"+
    "\4\121\1\u0152\5\121\1\u0152\10\121\1\u0152\1\121\1\123"+
    "\1\u0152\1\121\3\u0152\2\u0153\1\124\1\u0153\4\124\1\u0153"+
    "\5\124\1\u0153\10\124\1\u0153\1\124\1\u0153\1\123\1\124"+
    "\3\u0153";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9517];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\2\11\5\1\4\11\1\1\1\11\25\1\1\11"+
    "\15\1\1\11\6\0\1\1\1\0\1\1\1\0\2\1"+
    "\1\0\4\1\2\0\1\1\3\0\3\1\2\0\1\11"+
    "\2\0\2\1\1\0\2\1\2\0\4\1\1\0\1\11"+
    "\1\0\1\1\6\0\1\1\1\0\1\1\1\0\2\1"+
    "\1\0\3\1\2\0\1\1\3\0\3\1\3\0\2\1"+
    "\1\0\2\1\2\0\4\1\1\0\1\1\7\0\1\1"+
    "\1\0\1\1\1\0\2\1\1\0\2\1\1\0\2\1"+
    "\3\0\1\1\3\0\3\1\2\0\1\11\2\1\1\0"+
    "\2\1\1\0\1\1\2\0\4\1\1\11\1\1\7\0"+
    "\1\1\2\0\1\1\1\0\2\1\1\0\3\1\2\0"+
    "\1\1\4\0\2\1\2\0\1\1\1\0\2\1\1\0"+
    "\3\1\5\0\1\11\1\0\1\1\2\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\2\1\1\11\1\0\1\1"+
    "\4\0\2\1\3\0\1\1\1\0\2\1\1\0\3\1"+
    "\10\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\3\0\3\1\3\0\1\1\1\0\1\1\1\0\2\1"+
    "\4\0\1\11\1\1\1\0\2\1\3\0\1\1\2\0"+
    "\1\11\2\0\1\1\31\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[339];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private static final Logger LOGGER = Logger.getLogger(COMDESIGNActiveWait.class.getName());
	
	String location = "MAIN PROGRAM";
	List<String> errors = new LinkedList<String>();
	int loop = 0;
    String parsedFileName;
	
	
	public COMDESIGNActiveWait(){
	}
	
	@Override
	public void setInputFile(final File file) throws FileNotFoundException {
		super.setInputFile(file);
        LOGGER.finest("begin method setInputFile");
        this.parsedFileName = file.toString();
		this.zzReader = new FileReader(new Path(file.getAbsolutePath()).toOSString());
        LOGGER.finest("end method setInputFile");
	}
	
		


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public COMDESIGNActiveWait(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 184) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public List<Violation> run() throws java.io.IOException, JFlexException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          { 	return getViolations();
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> LINE (Transition : . )");
                			     yybegin(LINE);
            }
          case 23: break;
          case 2: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - [ALL] -> COMMENT (Transition : FREE_COMMENT )");
                                yybegin(COMMENT);
            }
          case 24: break;
          case 3: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> NEW_LINE (Transition : \\n )");
                			     yybegin(NEW_LINE);
            }
          case 25: break;
          case 4: 
            { String errorMessage = "Class"+this.getClass().getName()+"\nIllegal character <" + yytext() + ">\nFile :"+ this.parsedFileName+"\nat line:"+(yyline+1)+" column:"+yycolumn;
                                    throw new JFlexException(new Exception(errorMessage));
            }
          case 26: break;
          case 5: 
            { 
            }
          case 27: break;
          case 6: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - COMMENT -> NEW_LINE (Transition : \\n )");
                    			yybegin(NEW_LINE);
            }
          case 28: break;
          case 7: 
            { location = location + " " + yytext();
                    			loop=0;
                    			LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NAMING -> COMMENT (Transition : VAR \""+yytext()+"\" )");
                    			yybegin(COMMENT);
            }
          case 29: break;
          case 8: 
            { loop=0;
                                LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NAMING -> NEW_LINE (Transition : \\n )");
                                yybegin(NEW_LINE);
            }
          case 30: break;
          case 9: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> LINE (Transition : . )");
                    			     yybegin(LINE);
            }
          case 31: break;
          case 10: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> COMMENT (Transition : COMMENT_WORD \""+yytext()+"\" )");
                    			    yybegin(COMMENT);
            }
          case 32: break;
          case 11: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - COMMENT_WORD -> COMMENT (Transition : COMMENT_WORD \""+yytext()+"\" )");
                			     yybegin(COMMENT);
            }
          case 33: break;
          case 12: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - COMMENT_WORD -> NEW_LINE (Transition : \\n )");
                    			yybegin(NEW_LINE);
            }
          case 34: break;
          case 13: 
            { loop++;
            }
          case 35: break;
          case 14: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> LINE (Transition : STRING \""+yytext()+"\" )");
                                    yybegin(LINE);
            }
          case 36: break;
          case 15: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - COMMENT_WORD -> LINE (Transition : STRING \""+yytext()+"\" )");
                    			yybegin(LINE);
            }
          case 37: break;
          case 16: 
            { if(loop>0){
                        			     LOGGER.fine("Setting error line "+yyline+1+" at the location "+location+".");
                        			     this.setError(location,"This process contains an active wait.", yyline+1);
                        		    }
            }
          case 38: break;
          case 17: 
            { if(loop>0){
                    			     LOGGER.fine("Setting error line "+yyline+1+" at the location "+location+".");
                    			     this.setError(location,"This process contains an active wait.", yyline+1);
                			    }
            }
          case 39: break;
          case 18: 
            { loop--;
            }
          case 40: break;
          case 19: 
            { location = yytext();
                                LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - YYINITIAL -> NAMING (Transition : TYPE \""+yytext()+"\" )");
                                yybegin(NAMING);
            }
          case 41: break;
          case 20: 
            { location = yytext();
                        			LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - NEW_LINE -> NAMING (Transition : TYPE \""+yytext()+"\" )");
                                    yybegin(NAMING);
            }
          case 42: break;
          case 21: 
            { LOGGER.fine("["+this.parsedFileName+":"+(yyline+1)+":"+yycolumn+"] - COMMENT_WORD -> NAMING (Transition : TYPE \""+yytext()+"\" )");
                    			location = yytext();
                    			yybegin(NAMING);
            }
          case 43: break;
          case 22: 
            { loop=0;
            }
          case 44: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
