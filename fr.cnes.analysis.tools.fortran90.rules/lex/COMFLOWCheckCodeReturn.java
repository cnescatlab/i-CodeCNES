/* The following code was generated by JFlex 1.6.1 */

/************************************************************************************************/
/* i-Code CNES is a static code analyzer.                                                       */
/* This software is a free software, under the terms of the Eclipse Public License version 1.0. */ 
/* http://www.eclipse.org/legal/epl-v10.html                                                    */
/************************************************************************************************/ 

/**********************************************************************************/
/* This file is used to generate a rule checker for COM.FLOW.CheckCodeReturn rule.*/
/* For further information on this, we advise you to refer to RNC manuals.	      */
/* As many comments have been done on the ExampleRule.lex file, this file         */
/* will restrain its comments on modifications.								      */
/*																			      */
/**********************************************************************************/

package fr.cnes.analysis.tools.fortran90.rules;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.File;
import java.util.Collections;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;

import org.eclipse.core.runtime.Path;

import fr.cnes.analysis.tools.analyzer.datas.AbstractRule;
import fr.cnes.analysis.tools.analyzer.datas.Violation;
import fr.cnes.analysis.tools.analyzer.exception.JFlexException;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lex/COMFLOWCheckCodeReturn.lex</tt>
 */
public class COMFLOWCheckCodeReturn extends AbstractRule {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int NAMING = 4;
  public static final int EQUAL = 6;
  public static final int IF = 8;
  public static final int VAR_EQ = 10;
  public static final int DECL = 12;
  public static final int AVOID = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7, 7
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\26\1\36\1\54\1\55\1\36\22\0\1\26\1\1\1\31"+
    "\3\0\1\56\1\30\1\53\1\0\1\33\1\33\1\0\1\33\1\0"+
    "\1\33\1\43\1\44\1\41\7\23\1\34\2\0\1\32\3\0\1\20"+
    "\1\16\1\5\1\14\1\13\1\2\1\17\1\35\1\24\1\37\1\50"+
    "\1\22\1\21\1\4\1\10\1\11\1\52\1\12\1\25\1\6\1\3"+
    "\1\51\1\27\1\45\1\40\1\46\4\0\1\42\1\0\1\20\1\16"+
    "\1\5\1\14\1\13\1\2\1\17\1\35\1\24\1\37\1\50\1\22"+
    "\1\21\1\4\1\10\1\11\1\52\1\12\1\25\1\6\1\3\1\51"+
    "\1\27\1\45\1\40\1\46\12\0\1\54\252\0\2\7\115\0\1\15"+
    "\u1ea8\0\1\54\1\54\u0100\0\1\47\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\1\1\1\2\2\3\1\1\1\3\1\1\1\3"+
    "\1\1\2\3\3\1\1\4\1\5\1\6\1\1\1\2"+
    "\1\1\1\7\1\5\1\1\1\10\1\11\1\6\26\1"+
    "\1\12\1\1\1\13\1\1\1\5\1\14\1\4\2\15"+
    "\1\16\1\15\1\17\1\1\7\0\3\3\2\0\1\3"+
    "\1\0\1\3\1\0\1\3\3\0\2\3\20\0\1\20"+
    "\1\4\10\1\1\11\6\0\1\21\171\0\1\13\11\0"+
    "\2\3\2\0\1\3\1\0\1\3\1\0\1\3\3\0"+
    "\2\3\214\0\1\22\1\23\1\0\1\24\2\0\2\3"+
    "\2\0\1\3\1\0\2\3\1\0\1\3\3\0\2\3"+
    "\2\0\1\22\1\23\1\0\1\24\4\0\1\22\1\23"+
    "\1\0\1\24\124\0\1\23\3\0\2\3\2\0\1\3"+
    "\1\0\2\3\1\0\1\3\4\0\2\3\10\0\1\23"+
    "\13\0\1\23\56\0\1\25\1\26\1\0\1\23\5\0"+
    "\2\27\1\0\1\27\2\0\1\3\1\0\1\3\2\0"+
    "\1\3\1\0\2\3\1\0\1\30\4\0\2\3\1\25"+
    "\1\26\1\0\1\23\5\0\2\27\1\0\1\27\2\0"+
    "\1\25\1\26\1\0\1\23\5\0\2\27\1\0\1\27"+
    "\30\0\1\26\13\0\1\3\2\0\1\3\1\0\1\3"+
    "\3\0\3\3\56\0\1\30\2\0\1\3\3\0\2\3"+
    "\237\0\2\3\3\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[943];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\274\0\353\0\u011a\0\u0149"+
    "\0\u0178\0\u0178\0\u01a7\0\u01d6\0\u0205\0\u0234\0\u0263\0\u0292"+
    "\0\u02c1\0\u02f0\0\u031f\0\u034e\0\u037d\0\u03ac\0\u03db\0\u0178"+
    "\0\u040a\0\u0439\0\u0439\0\u0468\0\u0497\0\u0439\0\u04c6\0\u04f5"+
    "\0\u0524\0\u04c6\0\u0553\0\u0582\0\u05b1\0\u05e0\0\u060f\0\u063e"+
    "\0\u066d\0\u069c\0\u06cb\0\u06fa\0\u0729\0\u0758\0\u0787\0\u07b6"+
    "\0\u07e5\0\u0814\0\u0843\0\u0872\0\u08a1\0\u08d0\0\u08ff\0\u092e"+
    "\0\u0439\0\u095d\0\u098c\0\u09bb\0\u08d0\0\u09ea\0\u0497\0\u0439"+
    "\0\u0468\0\u0439\0\u04c6\0\u0a19\0\u0a48\0\u0a77\0\u0aa6\0\u0ad5"+
    "\0\u0b04\0\u0b33\0\u0b62\0\u0b91\0\u0bc0\0\u0bef\0\u0c1e\0\u0c4d"+
    "\0\u0c7c\0\u0cab\0\u0cda\0\u0d09\0\u0d38\0\u0d67\0\u0d96\0\u0dc5"+
    "\0\u0df4\0\u0e23\0\u0e52\0\u0e81\0\u0eb0\0\u0edf\0\u0f0e\0\u0f3d"+
    "\0\u0f6c\0\u0f9b\0\u0fca\0\u0ff9\0\u1028\0\u1057\0\u1086\0\u10b5"+
    "\0\u10e4\0\u1113\0\u1142\0\u0468\0\u1171\0\u0a77\0\u0aa6\0\u0ad5"+
    "\0\u0b04\0\u0b33\0\u0b62\0\u0b91\0\u11a0\0\u11cf\0\u066d\0\u11fe"+
    "\0\u122d\0\u125c\0\u128b\0\u12ba\0\u0468\0\u12e9\0\u1318\0\u1347"+
    "\0\u1376\0\u13a5\0\u13d4\0\u1403\0\u1432\0\u1461\0\u1490\0\u14bf"+
    "\0\u14ee\0\u151d\0\u154c\0\u157b\0\u15aa\0\u15d9\0\u1608\0\u1637"+
    "\0\u1666\0\u1695\0\u16c4\0\u16f3\0\u1722\0\u1751\0\u1780\0\u17af"+
    "\0\u17de\0\u180d\0\u183c\0\u186b\0\u189a\0\u18c9\0\u18f8\0\u1927"+
    "\0\u1956\0\u1985\0\u19b4\0\u19e3\0\u1a12\0\u1a41\0\u1a70\0\u1a9f"+
    "\0\u1ace\0\u1afd\0\u1b2c\0\u1b5b\0\u1b8a\0\u1bb9\0\u1be8\0\u1c17"+
    "\0\u1c46\0\u1c75\0\u1ca4\0\u1cd3\0\u1d02\0\u1d31\0\u1d60\0\u1d8f"+
    "\0\u1dbe\0\u1ded\0\u1e1c\0\u1e4b\0\u1e7a\0\u1ea9\0\u1ed8\0\u1f07"+
    "\0\u1f36\0\u1f65\0\u1f94\0\u1fc3\0\u1ff2\0\u2021\0\u2050\0\u207f"+
    "\0\u20ae\0\u20dd\0\u210c\0\u213b\0\u216a\0\u2199\0\u21c8\0\u21f7"+
    "\0\u2226\0\u2255\0\u2284\0\u22b3\0\u22e2\0\u2311\0\u2340\0\u236f"+
    "\0\u239e\0\u23cd\0\u23fc\0\u242b\0\u245a\0\u2489\0\u0553\0\u0582"+
    "\0\u05b1\0\u05e0\0\u24b8\0\u24e7\0\u069c\0\u06cb\0\u06fa\0\u0729"+
    "\0\u2516\0\u0787\0\u07b6\0\u07e5\0\u0814\0\u0843\0\u0872\0\u08a1"+
    "\0\u2545\0\u095d\0\u09bb\0\u2574\0\u25a3\0\u25d2\0\u2601\0\u2630"+
    "\0\u265f\0\u268e\0\u26bd\0\u26ec\0\u271b\0\u274a\0\u2779\0\u27a8"+
    "\0\u27d7\0\u2806\0\u2835\0\u2864\0\u2893\0\u28c2\0\u28f1\0\u2920"+
    "\0\u294f\0\u297e\0\u29ad\0\u29dc\0\u2a0b\0\u2a3a\0\u2a69\0\u2a98"+
    "\0\u2ac7\0\u2af6\0\u2b25\0\u2b54\0\u2b83\0\u2bb2\0\u2be1\0\u2c10"+
    "\0\u2c3f\0\u2c6e\0\u2c9d\0\u2ccc\0\u2cfb\0\u2d2a\0\u2d59\0\u2d88"+
    "\0\u2db7\0\u2de6\0\u2e15\0\u2e44\0\u2e73\0\u2ea2\0\u2ed1\0\u2f00"+
    "\0\u2f2f\0\u2f5e\0\u2f8d\0\u2fbc\0\u2feb\0\u301a\0\u3049\0\u3078"+
    "\0\u30a7\0\u30d6\0\u3105\0\u3134\0\u3163\0\u3192\0\u31c1\0\u31f0"+
    "\0\u321f\0\u324e\0\u327d\0\u32ac\0\u32db\0\u330a\0\u3339\0\u3368"+
    "\0\u3397\0\u33c6\0\u33f5\0\u3424\0\u3453\0\u3482\0\u34b1\0\u34e0"+
    "\0\u350f\0\u353e\0\u356d\0\u359c\0\u35cb\0\u35fa\0\u3629\0\u3658"+
    "\0\u3687\0\u36b6\0\u36e5\0\u3714\0\u3743\0\u3772\0\u37a1\0\u37d0"+
    "\0\u37ff\0\u382e\0\u385d\0\u388c\0\u38bb\0\u38ea\0\u3919\0\u3948"+
    "\0\u3977\0\u39a6\0\u39d5\0\u3a04\0\u3a33\0\u3a62\0\u3a91\0\u3ac0"+
    "\0\u3aef\0\u3b1e\0\u3b4d\0\u3b7c\0\u3bab\0\u3bda\0\u3c09\0\u3c38"+
    "\0\u3c67\0\u3c96\0\u3cc5\0\u3cf4\0\u3d23\0\u3d52\0\u3d81\0\u3db0"+
    "\0\u3ddf\0\u3e0e\0\u3e3d\0\u3e6c\0\u3e9b\0\u3eca\0\u3ef9\0\u3f28"+
    "\0\u3f57\0\u3f86\0\u3fb5\0\u3fe4\0\u4013\0\u4042\0\u4071\0\u40a0"+
    "\0\u40cf\0\u40fe\0\u412d\0\u415c\0\u418b\0\u41ba\0\u41e9\0\u4218"+
    "\0\u4247\0\u4276\0\u42a5\0\u060f\0\u42d4\0\u4303\0\u4332\0\u4361"+
    "\0\u4390\0\u43bf\0\u0468\0\u43ee\0\u441d\0\u0468\0\u444c\0\u447b"+
    "\0\u44aa\0\u44d9\0\u4508\0\u4537\0\u4566\0\u4595\0\u45c4\0\u45f3"+
    "\0\u4622\0\u4651\0\u4680\0\u46af\0\u46de\0\u470d\0\u473c\0\u476b"+
    "\0\u479a\0\u0e81\0\u47c9\0\u47f8\0\u0e81\0\u4827\0\u4856\0\u4885"+
    "\0\u48b4\0\u0ff9\0\u48e3\0\u4912\0\u0ff9\0\u4941\0\u4970\0\u499f"+
    "\0\u49ce\0\u49fd\0\u4a2c\0\u4a5b\0\u4a8a\0\u4ab9\0\u4ae8\0\u4b17"+
    "\0\u4b46\0\u4b75\0\u4ba4\0\u4bd3\0\u4c02\0\u4c31\0\u4c60\0\u4c8f"+
    "\0\u4cbe\0\u4ced\0\u4d1c\0\u4d4b\0\u4d7a\0\u4da9\0\u4dd8\0\u4e07"+
    "\0\u4e36\0\u4e65\0\u4e94\0\u4ec3\0\u4ef2\0\u4f21\0\u4f50\0\u4f7f"+
    "\0\u4fae\0\u4fdd\0\u500c\0\u503b\0\u506a\0\u5099\0\u50c8\0\u50f7"+
    "\0\u5126\0\u5155\0\u5184\0\u51b3\0\u51e2\0\u5211\0\u5240\0\u526f"+
    "\0\u529e\0\u52cd\0\u52fc\0\u532b\0\u535a\0\u5389\0\u53b8\0\u53e7"+
    "\0\u5416\0\u5445\0\u5474\0\u54a3\0\u54d2\0\u5501\0\u5530\0\u555f"+
    "\0\u558e\0\u55bd\0\u55ec\0\u561b\0\u564a\0\u5679\0\u56a8\0\u56d7"+
    "\0\u5706\0\u5735\0\u5764\0\u5793\0\u57c2\0\u57f1\0\u5820\0\u584f"+
    "\0\u587e\0\u58ad\0\u58dc\0\u590b\0\u593a\0\u5969\0\u5998\0\u59c7"+
    "\0\u59f6\0\u5a25\0\u5a54\0\u5a83\0\u5ab2\0\u5ae1\0\u5b10\0\u5b3f"+
    "\0\u5b6e\0\u5b9d\0\u5bcc\0\u5bfb\0\u5c2a\0\u5c59\0\u5c88\0\u5cb7"+
    "\0\u5ce6\0\u5d15\0\u5d44\0\u5d73\0\u5da2\0\u5dd1\0\u5e00\0\u5e2f"+
    "\0\u5e5e\0\u5e8d\0\u5ebc\0\u5eeb\0\u5f1a\0\u5f49\0\u5f78\0\u5fa7"+
    "\0\u5fd6\0\u6005\0\u6034\0\u6063\0\u6092\0\u60c1\0\u60f0\0\u611f"+
    "\0\u614e\0\u617d\0\u61ac\0\u61db\0\u620a\0\u6239\0\u6268\0\u6297"+
    "\0\u62c6\0\u62f5\0\u6324\0\u6353\0\u6382\0\u63b1\0\u63e0\0\u640f"+
    "\0\u643e\0\u646d\0\u649c\0\u64cb\0\u64fa\0\u6529\0\u6558\0\u6587"+
    "\0\u65b6\0\u65e5\0\u6614\0\u6643\0\u6672\0\u66a1\0\u66d0\0\u66ff"+
    "\0\u672e\0\u675d\0\u678c\0\u67bb\0\u67ea\0\u6819\0\u6848\0\u6877"+
    "\0\u0468\0\u0468\0\u68a6\0\u68d5\0\u6904\0\u6933\0\u6962\0\u6991"+
    "\0\u69c0\0\u0468\0\u69ef\0\u69ef\0\u58dc\0\u6a1e\0\u6a4d\0\u6a7c"+
    "\0\u6aab\0\u6ada\0\u6b09\0\u6b38\0\u6b67\0\u6b96\0\u6bc5\0\u6bf4"+
    "\0\u6c23\0\u0c1e\0\u6c52\0\u6c81\0\u6cb0\0\u6cdf\0\u6d0e\0\u6d3d"+
    "\0\u0e81\0\u0e81\0\u6d6c\0\u6d9b\0\u6dca\0\u6df9\0\u6e28\0\u6e57"+
    "\0\u6e86\0\u0e81\0\u6eb5\0\u6eb5\0\u5e00\0\u6ee4\0\u6f13\0\u0ff9"+
    "\0\u0ff9\0\u6f42\0\u6f71\0\u6fa0\0\u6fcf\0\u6ffe\0\u702d\0\u705c"+
    "\0\u0ff9\0\u708b\0\u708b\0\u6034\0\u70ba\0\u70e9\0\u7118\0\u7147"+
    "\0\u7176\0\u71a5\0\u71d4\0\u7203\0\u7232\0\u7261\0\u7290\0\u72bf"+
    "\0\u72ee\0\u731d\0\u734c\0\u737b\0\u73aa\0\u73d9\0\u7408\0\u7437"+
    "\0\u7466\0\u7495\0\u74c4\0\u74f3\0\u12ba\0\u7522\0\u7551\0\u7580"+
    "\0\u75af\0\u75de\0\u760d\0\u763c\0\u766b\0\u769a\0\u76c9\0\u76f8"+
    "\0\u7727\0\u7756\0\u7785\0\u77b4\0\u77e3\0\u7812\0\u7841\0\u7870"+
    "\0\u789f\0\u78ce\0\u78fd\0\u792c\0\u795b\0\u798a\0\u79b9\0\u79e8"+
    "\0\u7a17\0\u7a46\0\u7a75\0\u7aa4\0\u7ad3\0\u7b02\0\u7b31\0\u7b60"+
    "\0\u7b8f\0\u7bbe\0\u7bed\0\u7c1c\0\u7c4b\0\u7c7a\0\u7ca9\0\u7cd8"+
    "\0\u7d07\0\u7d36\0\u7d65\0\u7d94\0\u7dc3\0\u7df2\0\u7e21\0\u7e50"+
    "\0\u7e7f\0\u7eae\0\u7edd\0\u7f0c\0\u7f3b\0\u7f6a\0\u7f99\0\u7fc8"+
    "\0\u7ff7\0\u8026\0\u8055\0\u8084\0\u80b3\0\u80e2\0\u8111\0\u8140"+
    "\0\u816f\0\u819e\0\u78ce\0\u81cd\0\u81fc\0\u822b\0\u825a\0\u8289"+
    "\0\u82b8\0\u0468\0\u82e7\0\u8316\0\u8345\0\u8374\0\u83a3\0\u83d2"+
    "\0\u8401\0\u8430\0\u845f\0\u848e\0\u84bd\0\u84ec\0\u851b\0\u854a"+
    "\0\u8579\0\u85a8\0\u85d7\0\u8606\0\u8635\0\u8664\0\u8693\0\u86c2"+
    "\0\u86f1\0\u8720\0\u874f\0\u877e\0\u87ad\0\u87dc\0\u880b\0\u883a"+
    "\0\u8869\0\u8898\0\u88c7\0\u88f6\0\u8925\0\u8954\0\u8983\0\u89b2"+
    "\0\u89e1\0\u8a10\0\u8a3f\0\u8a6e\0\u8a9d\0\u8acc\0\u8afb\0\u8b2a"+
    "\0\u8b59\0\u8b88\0\u8bb7\0\u8be6\0\u8c15\0\u8c44\0\u8c73\0\u8ca2"+
    "\0\u8cd1\0\u8d00\0\u8d2f\0\u8d5e\0\u8d8d\0\u8dbc\0\u8deb\0\u8e1a"+
    "\0\u8e49\0\u8e78\0\u8ea7\0\u8ed6\0\u8f05\0\u8f34\0\u8f63\0\u8f92"+
    "\0\u8fc1\0\u8ff0\0\u901f\0\u904e\0\u907d\0\u90ac\0\u90db\0\u910a"+
    "\0\u9139\0\u9168\0\u9197\0\u91c6\0\u91f5\0\u9224\0\u9253\0\u9282"+
    "\0\u92b1\0\u92e0\0\u930f\0\u933e\0\u936d\0\u939c\0\u93cb\0\u93fa"+
    "\0\u9429\0\u9458\0\u9487\0\u94b6\0\u94e5\0\u9514\0\u9543\0\u9572"+
    "\0\u95a1\0\u95d0\0\u95ff\0\u962e\0\u965d\0\u968c\0\u96bb\0\u96ea"+
    "\0\u9719\0\u9748\0\u9777\0\u97a6\0\u97d5\0\u9804\0\u9833\0\u9862"+
    "\0\u9891\0\u98c0\0\u98ef\0\u991e\0\u994d\0\u997c\0\u99ab\0\u99da"+
    "\0\u9a09\0\u9a38\0\u9a67\0\u9a96\0\u9ac5\0\u9af4\0\u9b23\0\u9b52"+
    "\0\u9b81\0\u9bb0\0\u9bdf\0\u9c0e\0\u9c3d\0\u9c6c\0\u9c9b\0\u9cca"+
    "\0\u9cf9\0\u9d28\0\u9d57\0\u9d86\0\u9db5\0\u9de4\0\u9e13\0\u9e42"+
    "\0\u9e71\0\u9ea0\0\u9ecf\0\u9efe\0\u9f2d\0\u9f5c\0\u9f8b\0\u9fba"+
    "\0\u9fe9\0\ua018\0\u0e81\0\u0ff9\0\ua047\0\ua076\0\ua0a5";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[943];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\1\12\1\13\4\14\1\15\1\14\1\16\3\14"+
    "\1\17\3\14\1\20\1\14\1\21\1\22\1\23\1\11"+
    "\1\14\1\24\1\25\2\11\1\26\1\14\1\27\2\14"+
    "\4\21\2\14\1\11\3\14\1\11\1\30\1\11\1\31"+
    "\1\32\1\33\5\34\1\32\5\34\1\32\10\34\1\32"+
    "\1\34\5\32\1\34\1\35\10\34\1\32\3\34\1\32"+
    "\2\36\1\37\1\32\1\33\5\40\1\32\5\40\1\32"+
    "\5\40\1\34\2\40\1\32\1\40\5\32\1\40\1\41"+
    "\2\40\4\34\2\40\1\32\3\40\1\32\2\36\1\42"+
    "\1\32\1\33\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\34\1\64\1\65\1\66\1\51"+
    "\1\67\1\70\1\32\1\71\1\32\1\72\1\73\2\51"+
    "\4\34\2\51\1\32\1\51\1\74\1\51\1\32\1\36"+
    "\1\75\1\42\1\32\1\33\5\76\1\32\5\76\1\32"+
    "\5\76\1\34\2\76\1\32\1\76\5\32\1\76\1\77"+
    "\2\76\4\34\2\76\1\32\3\76\1\32\2\36\1\42"+
    "\1\100\1\33\5\101\1\100\5\101\1\100\10\101\1\32"+
    "\1\101\2\100\1\102\2\100\1\101\1\77\10\101\1\100"+
    "\3\101\1\100\1\36\1\32\1\103\1\32\1\33\5\104"+
    "\1\32\5\104\1\32\5\104\1\34\2\104\1\32\1\104"+
    "\5\32\1\104\1\77\2\104\4\34\2\104\1\32\3\104"+
    "\1\32\2\36\1\42\1\32\1\33\5\34\1\32\5\34"+
    "\1\32\10\34\1\32\1\34\4\32\1\105\1\34\1\77"+
    "\10\34\1\32\3\34\1\32\2\36\1\42\5\0\1\106"+
    "\1\107\1\110\3\0\1\111\1\112\1\113\3\0\1\114"+
    "\2\0\1\110\1\113\33\0\1\115\1\116\3\117\1\120"+
    "\5\117\1\121\7\117\1\122\1\0\1\117\5\0\1\117"+
    "\1\0\10\117\1\0\3\117\6\0\1\115\4\117\1\120"+
    "\5\117\1\121\7\117\1\122\1\0\1\117\5\0\1\117"+
    "\1\0\10\117\1\0\3\117\10\0\1\123\1\106\1\107"+
    "\1\110\3\0\1\111\1\112\1\113\3\0\1\114\2\0"+
    "\1\110\1\113\33\0\1\115\4\117\1\120\2\117\1\124"+
    "\2\117\1\121\7\117\1\122\1\0\1\117\5\0\1\117"+
    "\1\0\10\117\1\0\3\117\7\0\1\125\1\0\1\106"+
    "\1\107\1\110\3\0\1\111\1\112\1\113\3\0\1\114"+
    "\2\0\1\110\1\113\33\0\1\115\4\117\1\120\1\126"+
    "\4\117\1\121\7\117\1\122\1\0\1\117\5\0\1\117"+
    "\1\0\10\117\1\0\3\117\6\0\1\127\4\0\1\120"+
    "\1\0\1\130\3\0\1\121\3\0\1\131\2\0\1\120"+
    "\1\121\33\0\1\115\1\117\1\132\2\117\1\120\5\117"+
    "\1\121\7\117\1\122\1\0\1\117\5\0\1\117\1\0"+
    "\10\117\1\0\3\117\6\0\1\115\1\133\3\117\1\120"+
    "\5\117\1\121\7\117\1\122\1\0\1\117\5\0\1\117"+
    "\1\0\10\117\1\0\3\117\4\0\5\134\1\135\1\136"+
    "\1\137\3\134\1\140\1\141\1\142\3\134\1\143\2\134"+
    "\1\137\1\142\2\134\1\34\26\134\5\144\1\145\1\146"+
    "\1\147\3\144\1\150\1\151\1\152\3\144\1\153\2\144"+
    "\1\147\1\152\3\144\1\34\25\144\5\0\1\106\1\107"+
    "\1\110\3\0\1\111\1\112\1\113\3\0\1\114\2\0"+
    "\1\110\1\113\6\0\1\154\27\0\1\106\1\107\1\110"+
    "\3\0\1\111\1\112\1\113\3\0\1\114\2\0\1\110"+
    "\1\113\10\0\1\155\20\0\5\34\1\156\1\157\1\160"+
    "\3\34\1\161\1\162\1\163\3\34\1\164\2\34\1\160"+
    "\1\163\1\165\7\34\1\0\16\34\1\165\1\34\6\0"+
    "\1\107\135\0\1\107\27\0\1\155\20\0\6\34\1\157"+
    "\17\34\1\165\7\34\1\0\16\34\1\165\1\34\2\0"+
    "\5\40\1\0\5\40\1\0\10\40\1\0\1\40\5\0"+
    "\1\40\1\0\10\40\1\0\3\40\12\0\1\107\27\0"+
    "\1\166\22\0\5\167\1\170\2\167\1\171\2\167\1\0"+
    "\4\167\1\172\1\167\1\173\1\167\1\174\1\167\5\0"+
    "\1\167\1\0\10\167\1\0\3\167\1\175\1\0\1\174"+
    "\3\0\2\167\1\176\2\167\1\0\5\167\1\0\10\167"+
    "\1\174\1\167\5\0\1\167\1\0\10\167\1\0\3\167"+
    "\1\175\1\0\1\174\3\0\1\167\1\177\3\167\1\200"+
    "\1\201\2\167\1\202\1\167\1\0\6\167\1\203\1\167"+
    "\1\174\1\167\5\0\1\167\1\0\10\167\1\0\3\167"+
    "\1\175\1\0\1\174\3\0\3\167\1\204\1\167\1\0"+
    "\1\205\2\167\1\206\1\167\1\207\2\167\1\210\1\211"+
    "\1\212\2\167\1\213\1\174\1\167\5\0\1\214\1\0"+
    "\10\167\1\0\3\167\1\175\1\0\1\174\3\0\5\167"+
    "\1\0\2\167\1\215\2\167\1\0\2\167\1\216\5\167"+
    "\1\174\1\167\5\0\1\217\1\0\10\167\1\0\3\167"+
    "\1\175\1\0\1\174\3\0\1\220\1\0\1\221\1\222"+
    "\1\107\1\0\1\223\1\224\1\0\1\225\1\226\1\227"+
    "\1\230\1\0\1\231\4\0\1\227\33\0\5\167\1\0"+
    "\5\167\1\0\10\167\1\174\1\167\5\0\1\167\1\0"+
    "\10\167\1\0\3\167\1\175\1\0\1\174\3\0\5\167"+
    "\1\0\1\232\1\167\1\233\2\167\1\0\2\167\1\234"+
    "\5\167\1\174\1\167\5\0\1\167\1\0\10\167\1\0"+
    "\3\167\1\175\1\0\1\174\3\0\5\167\1\0\2\167"+
    "\1\235\1\236\1\167\1\0\10\167\1\174\1\167\5\0"+
    "\1\167\1\0\10\167\1\0\3\167\1\175\1\0\1\174"+
    "\3\0\5\167\1\0\1\237\1\167\1\240\2\167\1\0"+
    "\10\167\1\174\1\167\5\0\1\167\1\0\6\167\1\241"+
    "\1\167\1\0\3\167\1\175\1\0\1\174\3\0\2\167"+
    "\1\242\1\243\1\244\1\200\1\245\1\246\1\167\1\247"+
    "\1\250\1\251\1\252\1\167\1\253\1\254\1\255\1\167"+
    "\1\203\1\256\1\174\1\167\5\0\1\167\1\0\10\167"+
    "\1\0\3\167\1\175\1\0\1\174\4\0\1\257\1\260"+
    "\1\261\1\107\1\262\1\0\1\263\1\0\1\264\10\0"+
    "\1\262\10\0\1\265\14\0\1\266\6\0\4\167\1\267"+
    "\1\0\3\167\1\270\1\167\1\0\1\167\1\271\2\167"+
    "\1\271\3\167\1\174\1\167\5\0\1\167\1\0\10\167"+
    "\1\0\3\167\1\175\1\0\1\174\3\0\5\167\1\0"+
    "\5\167\1\0\2\167\1\272\5\167\1\174\1\167\5\0"+
    "\1\167\1\0\10\167\1\0\3\167\1\175\1\0\1\174"+
    "\3\0\2\167\1\273\1\274\1\275\1\276\4\167\1\277"+
    "\1\300\1\301\2\167\1\302\1\303\1\167\1\304\1\305"+
    "\1\174\1\167\5\0\1\167\1\0\10\167\1\0\3\167"+
    "\1\175\1\0\1\174\3\0\5\167\1\306\1\307\2\167"+
    "\1\310\1\167\1\0\2\167\1\311\3\167\1\312\1\167"+
    "\1\174\1\167\5\0\1\167\1\0\10\167\1\0\3\167"+
    "\1\175\1\0\1\174\3\0\5\167\1\0\1\313\2\167"+
    "\1\314\1\167\1\0\1\167\1\271\2\167\1\271\3\167"+
    "\1\174\1\167\5\0\1\167\1\0\10\167\1\0\3\167"+
    "\1\175\1\0\1\174\3\0\1\315\1\167\1\316\1\317"+
    "\1\167\1\0\1\320\1\321\1\167\1\322\1\323\1\227"+
    "\1\324\1\167\1\325\4\167\1\326\1\174\1\167\5\0"+
    "\1\167\1\0\10\167\1\0\3\167\1\175\1\0\1\174"+
    "\3\0\1\167\1\327\1\330\1\331\1\167\1\262\1\167"+
    "\1\332\1\167\1\333\1\167\1\0\6\167\1\334\1\167"+
    "\1\174\1\167\5\0\1\335\1\0\10\167\1\0\2\167"+
    "\1\336\1\175\1\0\1\174\3\0\1\337\1\340\1\341"+
    "\1\342\1\343\1\344\1\167\1\345\1\346\1\347\1\350"+
    "\1\351\1\352\1\353\1\354\1\355\1\356\1\0\1\357"+
    "\1\360\1\361\1\167\5\0\1\362\1\0\2\167\4\0"+
    "\2\167\1\0\1\167\1\363\1\167\1\34\1\0\1\361"+
    "\1\0\6\134\1\364\21\134\1\34\26\134\6\144\1\365"+
    "\22\144\1\34\25\144\2\0\5\167\1\0\5\167\1\0"+
    "\10\167\1\174\1\167\5\0\1\167\1\0\1\167\1\366"+
    "\6\167\1\0\3\167\1\175\1\0\1\174\7\0\1\107"+
    "\27\0\1\367\22\0\5\167\1\0\3\167\1\370\1\167"+
    "\1\0\10\167\1\174\1\167\5\0\1\167\1\0\10\167"+
    "\1\0\3\167\1\175\1\0\1\174\3\0\5\76\1\0"+
    "\5\76\1\0\10\76\1\0\1\76\5\0\1\76\1\0"+
    "\10\76\1\0\3\76\6\0\5\104\1\0\5\104\1\0"+
    "\10\104\1\0\1\104\5\0\1\104\1\0\10\104\1\0"+
    "\3\104\12\0\1\107\25\0\1\154\42\0\1\371\73\0"+
    "\1\372\23\0\1\373\60\0\1\374\15\0\1\375\44\0"+
    "\1\376\61\0\1\377\53\0\1\u0100\50\0\1\117\1\u0101"+
    "\3\117\1\0\5\117\1\0\10\117\1\0\1\117\5\0"+
    "\1\117\1\0\10\117\1\0\3\117\6\0\2\117\1\u0102"+
    "\2\117\1\0\5\117\1\0\10\117\1\0\1\117\5\0"+
    "\1\117\1\0\10\117\1\0\3\117\6\0\5\117\1\0"+
    "\5\117\1\0\10\117\1\0\1\117\5\0\1\117\1\0"+
    "\10\117\1\0\3\117\10\0\1\u0103\55\0\1\u0104\55\0"+
    "\1\117\1\u0105\3\117\1\0\5\117\1\0\10\117\1\0"+
    "\1\117\5\0\1\117\1\0\10\117\1\0\3\117\12\0"+
    "\1\u0106\52\0\5\117\1\0\1\u0107\4\117\1\0\10\117"+
    "\1\0\1\117\5\0\1\117\1\0\10\117\1\0\3\117"+
    "\22\0\1\u0108\42\0\5\117\1\0\4\117\1\u0109\1\0"+
    "\10\117\1\0\1\117\5\0\1\117\1\0\10\117\1\0"+
    "\3\117\7\0\1\u010a\65\0\1\u010b\54\0\1\u010c\50\0"+
    "\4\117\1\u010d\1\0\5\117\1\0\10\117\1\0\1\117"+
    "\5\0\1\117\1\0\10\117\1\0\3\117\6\0\5\117"+
    "\1\0\5\117\1\0\1\u010e\7\117\1\0\1\117\5\0"+
    "\1\117\1\0\10\117\1\0\3\117\4\0\30\134\1\34"+
    "\46\134\1\u010f\7\134\1\34\56\134\1\34\4\134\1\u0110"+
    "\23\134\1\u0111\25\134\1\34\32\134\1\u0112\15\134\1\u0113"+
    "\5\134\1\34\36\134\1\u0114\17\134\1\34\41\134\1\u0115"+
    "\14\134\1\34\36\134\1\u0116\17\134\1\34\26\134\31\144"+
    "\1\34\45\144\1\u0117\10\144\1\34\56\144\1\34\3\144"+
    "\1\u0118\23\144\1\u0119\26\144\1\34\31\144\1\u011a\15\144"+
    "\1\u011b\6\144\1\34\35\144\1\u011c\20\144\1\34\40\144"+
    "\1\u011d\15\144\1\34\35\144\1\u011e\20\144\1\34\25\144"+
    "\36\0\1\155\20\0\26\34\1\165\7\34\1\0\16\34"+
    "\1\165\1\34\36\0\1\166\24\0\1\u011f\54\0\5\167"+
    "\1\0\5\167\1\0\2\167\1\u0120\5\167\1\174\1\167"+
    "\5\0\1\167\1\0\10\167\1\0\3\167\1\175\1\0"+
    "\1\174\3\0\5\167\1\0\1\u0121\4\167\1\0\10\167"+
    "\1\174\1\167\5\0\1\167\1\0\10\167\1\0\3\167"+
    "\1\175\1\0\1\174\3\0\2\167\1\u0122\2\167\1\0"+
    "\5\167\1\0\10\167\1\174\1\167\5\0\1\167\1\0"+
    "\10\167\1\0\3\167\1\175\1\0\1\174\27\0\1\174"+
    "\24\0\1\175\1\0\1\174\3\0\5\167\1\0\1\167"+
    "\1\u0123\3\167\1\0\10\167\1\174\1\167\5\0\1\167"+
    "\1\0\10\167\1\0\3\167\1\175\1\0\1\174\3\0"+
    "\5\167\1\0\5\167\1\0\3\167\1\u0124\1\u0125\3\167"+
    "\1\174\1\167\5\0\1\167\1\0\10\167\1\0\3\167"+
    "\1\175\1\0\1\174\5\0\1\u0126\54\0\4\167\1\u0127"+
    "\1\0\2\167\1\u0128\2\167\1\0\10\167\1\174\1\167"+
    "\5\0\1\167\1\0\10\167\1\0\3\167\1\175\1\0"+
    "\1\174\3\0\5\167\1\0\5\167\1\0\2\167\1\u0129"+
    "\5\167\1\174\1\167\5\0\1\167\1\0\10\167\1\0"+
    "\3\167\1\175\1\0\1\174\3\0\2\167\1\u012a\2\167"+
    "\1\0\5\167\1\0\10\167\1\174\1\167\5\0\1\167"+
    "\1\0\10\167\1\0\3\167\1\175\1\0\1\174\3\0"+
    "\5\167\1\0\1\301\4\167\1\0\10\167\1\174\1\167"+
    "\5\0\1\167\1\0\10\167\1\0\3\167\1\175\1\0"+
    "\1\174\3\0\1\167\1\203\1\u012b\2\167\1\0\5\167"+
    "\1\u012c\3\167\1\u012d\3\167\1\u0127\1\174\1\167\5\0"+
    "\1\167\1\0\10\167\1\0\3\167\1\175\1\0\1\174"+
    "\3\0\5\167\1\u012e\5\167\1\0\6\167\1\u012f\1\167"+
    "\1\174\1\167\5\0\1\167\1\0\6\167\1\u0130\1\167"+
    "\1\0\3\167\1\175\1\0\1\174\10\0\1\u0131\14\0"+
    "\1\u0131\10\0\1\u0132\14\0\1\266\6\0\5\167\1\0"+
    "\5\167\1\0\1\301\7\167\1\174\1\167\5\0\1\167"+
    "\1\0\10\167\1\0\3\167\1\175\1\0\1\174\3\0"+
    "\5\167\1\0\1\167\1\u0133\3\167\1\0\10\167\1\174"+
    "\1\167\5\0\1\167\1\0\10\167\1\0\3\167\1\175"+
    "\1\0\1\174\3\0\5\167\1\0\1\u0134\4\167\1\0"+
    "\10\167\1\174\1\167\5\0\1\167\1\0\10\167\1\0"+
    "\3\167\1\175\1\0\1\174\3\0\5\167\1\u0131\5\167"+
    "\1\0\6\167\1\u0135\1\167\1\174\1\167\5\0\1\u0136"+
    "\1\0\10\167\1\0\2\167\1\336\1\175\1\0\1\174"+
    "\3\0\5\167\1\0\5\167\1\0\2\167\1\320\5\167"+
    "\1\174\1\167\5\0\1\167\1\0\10\167\1\0\3\167"+
    "\1\175\1\0\1\174\3\0\5\167\1\257\5\167\1\0"+
    "\2\167\1\u0137\3\167\1\327\1\167\1\174\1\167\5\0"+
    "\1\167\1\0\10\167\1\0\3\167\1\175\1\0\1\174"+
    "\3\0\2\167\1\u0138\2\167\1\0\5\167\1\0\10\167"+
    "\1\174\1\167\5\0\1\167\1\0\10\167\1\0\3\167"+
    "\1\175\1\0\1\174\3\0\5\167\1\u0139\5\167\1\0"+
    "\6\167\1\u013a\1\167\1\174\1\167\5\0\1\167\1\0"+
    "\10\167\1\0\3\167\1\175\1\0\1\174\10\0\1\u013b"+
    "\14\0\1\u013b\40\0\1\u012c\5\0\1\u013c\77\0\1\u013d"+
    "\33\0\1\u012c\64\0\1\u013e\46\0\1\223\55\0\1\u013f"+
    "\14\0\1\u013f\41\0\1\u0140\14\0\1\u0140\10\0\1\u0141"+
    "\4\0\1\u0142\21\0\1\u0143\1\0\1\u0144\5\0\1\u0145"+
    "\6\0\1\u0144\1\u0145\35\0\1\u0146\1\222\10\0\1\u0147"+
    "\3\0\1\u0148\36\0\5\167\1\0\1\167\1\u0149\3\167"+
    "\1\0\10\167\1\174\1\167\5\0\1\167\1\0\10\167"+
    "\1\0\3\167\1\175\1\0\1\174\3\0\5\167\1\0"+
    "\1\u014a\4\167\1\0\10\167\1\174\1\167\5\0\1\167"+
    "\1\0\10\167\1\0\3\167\1\175\1\0\1\174\3\0"+
    "\3\167\1\u014b\1\167\1\0\2\167\1\u014c\2\167\1\0"+
    "\10\167\1\174\1\167\5\0\1\167\1\0\10\167\1\0"+
    "\3\167\1\175\1\0\1\174\3\0\5\167\1\0\5\167"+
    "\1\u014d\7\167\1\u014e\1\174\1\167\5\0\1\167\1\0"+
    "\10\167\1\0\3\167\1\175\1\0\1\174\3\0\5\167"+
    "\1\0\1\167\1\u014f\3\167\1\u0150\2\167\1\u0125\4\167"+
    "\1\u0151\1\174\1\167\5\0\1\167\1\0\10\167\1\0"+
    "\3\167\1\175\1\0\1\174\3\0\5\167\1\0\5\167"+
    "\1\u0152\7\167\1\u0153\1\174\1\167\5\0\1\167\1\0"+
    "\10\167\1\0\3\167\1\175\1\0\1\174\3\0\1\u0154"+
    "\4\167\1\0\5\167\1\0\10\167\1\174\1\167\5\0"+
    "\1\167\1\0\10\167\1\0\3\167\1\175\1\0\1\174"+
    "\3\0\5\167\1\0\1\167\1\u0155\3\167\1\0\10\167"+
    "\1\174\1\167\5\0\1\167\1\0\10\167\1\0\3\167"+
    "\1\175\1\0\1\174\3\0\5\167\1\200\5\167\1\0"+
    "\6\167\1\203\1\167\1\174\1\167\5\0\1\167\1\0"+
    "\10\167\1\0\3\167\1\175\1\0\1\174\3\0\5\167"+
    "\1\0\1\u0156\4\167\1\0\10\167\1\174\1\167\5\0"+
    "\1\167\1\0\10\167\1\0\3\167\1\175\1\0\1\174"+
    "\3\0\5\167\1\0\5\167\1\0\2\167\1\216\5\167"+
    "\1\174\1\167\5\0\1\167\1\0\10\167\1\0\3\167"+
    "\1\175\1\0\1\174\3\0\4\167\1\u0157\1\0\5\167"+
    "\1\0\10\167\1\174\1\167\5\0\1\167\1\0\10\167"+
    "\1\0\3\167\1\175\1\0\1\174\3\0\5\167\1\0"+
    "\1\u0158\4\167\1\0\10\167\1\174\1\167\5\0\1\167"+
    "\1\0\10\167\1\0\3\167\1\175\1\0\1\174\3\0"+
    "\5\167\1\0\5\167\1\0\10\167\1\174\1\167\5\0"+
    "\1\167\1\0\6\167\1\u0130\1\167\1\0\3\167\1\175"+
    "\1\0\1\174\3\0\5\167\1\257\5\167\1\0\6\167"+
    "\1\327\1\167\1\174\1\167\5\0\1\167\1\0\10\167"+
    "\1\0\3\167\1\175\1\0\1\174\10\0\1\262\14\0"+
    "\1\262\10\0\1\u0159\14\0\1\266\6\0\5\167\1\0"+
    "\5\167\1\0\4\167\1\u015a\3\167\1\174\1\167\5\0"+
    "\1\167\1\0\10\167\1\0\3\167\1\175\1\0\1\174"+
    "\3\0\3\167\1\204\1\u015b\1\0\5\167\1\u015c\1\301"+
    "\6\167\1\u015d\1\174\1\167\5\0\1\167\1\0\10\167"+
    "\1\0\3\167\1\175\1\0\1\174\3\0\5\167\1\u015e"+
    "\1\u015f\4\167\1\0\2\167\1\u0160\3\167\1\u0161\1\167"+
    "\1\174\1\167\5\0\1\167\1\0\10\167\1\0\3\167"+
    "\1\175\1\0\1\174\3\0\5\167\1\0\1\u0162\4\167"+
    "\1\0\10\167\1\174\1\167\5\0\1\167\1\0\10\167"+
    "\1\0\3\167\1\175\1\0\1\174\3\0\5\167\1\262"+
    "\5\167\1\0\6\167\1\334\1\167\1\174\1\167\5\0"+
    "\1\u0163\1\0\10\167\1\0\2\167\1\336\1\175\1\0"+
    "\1\174\22\0\1\u012c\54\0\1\u0148\57\0\1\u0164\42\0"+
    "\1\u0165\12\0\1\u0131\51\0\1\u0166\5\0\1\u0167\44\0"+
    "\1\u0168\13\0\1\u0169\43\0\1\u016a\14\0\1\u016a\44\0"+
    "\1\u0126\46\0\5\167\1\0\3\167\1\u016b\1\167\1\0"+
    "\10\167\1\174\1\167\5\0\1\167\1\0\10\167\1\0"+
    "\3\167\1\175\1\0\1\174\3\0\5\167\1\0\5\167"+
    "\1\u016c\7\167\1\u016d\1\174\1\167\5\0\1\167\1\0"+
    "\10\167\1\0\3\167\1\175\1\0\1\174\3\0\4\167"+
    "\1\u0127\1\0\3\167\1\u0127\1\167\1\0\10\167\1\174"+
    "\1\167\5\0\1\167\1\0\10\167\1\0\3\167\1\175"+
    "\1\0\1\174\3\0\5\167\1\0\5\167\1\0\3\167"+
    "\1\u016e\4\167\1\174\1\167\5\0\1\167\1\0\10\167"+
    "\1\0\3\167\1\175\1\0\1\174\3\0\5\167\1\200"+
    "\5\167\1\0\6\167\1\203\1\167\1\174\1\167\5\0"+
    "\1\167\1\0\1\167\1\u0127\6\167\1\0\3\167\1\175"+
    "\1\0\1\174\3\0\5\167\1\0\1\u0156\4\167\1\0"+
    "\10\167\1\174\1\167\5\0\1\214\1\0\10\167\1\0"+
    "\3\167\1\175\1\0\1\174\3\0\5\167\1\0\5\167"+
    "\1\0\2\167\1\u016f\5\167\1\174\1\167\5\0\1\167"+
    "\1\0\10\167\1\0\3\167\1\175\1\0\1\174\5\0"+
    "\1\u0126\14\0\1\u0170\37\0\5\167\1\0\5\167\1\0"+
    "\10\167\1\174\1\167\5\0\1\167\1\0\1\u0171\7\167"+
    "\1\0\3\167\1\175\1\0\1\174\10\0\1\u0172\14\0"+
    "\1\u0172\34\0\5\167\1\0\5\167\1\u012c\7\167\1\u0127"+
    "\1\174\1\167\5\0\1\167\1\0\10\167\1\0\3\167"+
    "\1\175\1\0\1\174\3\0\5\167\1\u0173\1\u015f\4\167"+
    "\1\0\2\167\1\u0174\3\167\1\u0175\1\167\1\174\1\167"+
    "\5\0\1\167\1\0\10\167\1\0\3\167\1\175\1\0"+
    "\1\174\3\0\5\167\1\0\1\u0162\4\167\1\0\4\167"+
    "\1\u0127\3\167\1\174\1\167\5\0\1\167\1\0\10\167"+
    "\1\0\3\167\1\175\1\0\1\174\3\0\2\167\1\u012a"+
    "\2\167\1\0\5\167\1\0\3\167\1\u0176\4\167\1\174"+
    "\1\167\5\0\1\167\1\0\10\167\1\0\3\167\1\175"+
    "\1\0\1\174\3\0\5\167\1\u0172\5\167\1\0\6\167"+
    "\1\216\1\167\1\174\1\167\5\0\1\167\1\0\10\167"+
    "\1\0\3\167\1\175\1\0\1\174\5\0\1\u0177\54\0"+
    "\5\167\1\0\4\167\1\u0178\1\0\10\167\1\174\1\167"+
    "\5\0\1\167\1\0\10\167\1\0\3\167\1\175\1\0"+
    "\1\174\3\0\5\167\1\0\2\167\1\u0179\2\167\1\0"+
    "\10\167\1\174\1\167\5\0\1\167\1\0\10\167\1\0"+
    "\3\167\1\175\1\0\1\174\3\0\4\167\1\u017a\1\0"+
    "\5\167\1\u017b\7\167\1\u017c\1\174\1\167\5\0\1\167"+
    "\1\0\6\167\1\u017d\1\167\1\0\3\167\1\175\1\0"+
    "\1\174\3\0\2\167\1\u017d\2\167\1\0\5\167\1\0"+
    "\10\167\1\174\1\167\5\0\1\167\1\0\10\167\1\0"+
    "\3\167\1\175\1\0\1\174\3\0\5\167\1\0\5\167"+
    "\1\0\1\167\1\u017e\6\167\1\174\1\167\5\0\1\167"+
    "\1\0\3\167\1\u017f\4\167\1\0\3\167\1\175\1\0"+
    "\1\174\3\0\2\167\1\u0180\2\167\1\0\5\167\1\0"+
    "\2\167\1\u0181\5\167\1\174\1\167\5\0\1\167\1\0"+
    "\10\167\1\0\3\167\1\175\1\0\1\174\3\0\5\167"+
    "\1\u013b\5\167\1\0\6\167\1\u0182\1\167\1\174\1\167"+
    "\5\0\1\167\1\0\10\167\1\0\3\167\1\175\1\0"+
    "\1\174\3\0\4\167\1\u0127\1\0\4\167\1\u0183\1\0"+
    "\10\167\1\174\1\167\5\0\1\167\1\0\10\167\1\0"+
    "\3\167\1\175\1\0\1\174\3\0\5\167\1\0\5\167"+
    "\1\0\10\167\1\174\1\167\5\0\1\214\1\0\10\167"+
    "\1\0\3\167\1\175\1\0\1\174\3\0\5\167\1\0"+
    "\2\167\1\u0127\2\167\1\0\10\167\1\174\1\167\5\0"+
    "\1\167\1\0\10\167\1\0\3\167\1\175\1\0\1\174"+
    "\3\0\5\167\1\0\5\167\1\0\2\167\1\u0184\5\167"+
    "\1\174\1\167\5\0\1\167\1\0\10\167\1\0\3\167"+
    "\1\175\1\0\1\174\3\0\5\167\1\0\1\320\4\167"+
    "\1\0\10\167\1\174\1\167\5\0\1\167\1\0\10\167"+
    "\1\0\3\167\1\175\1\0\1\174\3\0\5\167\1\u013f"+
    "\5\167\1\0\6\167\1\u0185\1\167\1\174\1\167\5\0"+
    "\1\167\1\0\10\167\1\0\3\167\1\175\1\0\1\174"+
    "\3\0\3\167\1\u0186\1\167\1\u0144\5\167\1\u0145\6\167"+
    "\1\u0187\1\u0188\1\174\1\167\5\0\1\167\1\0\10\167"+
    "\1\0\3\167\1\175\1\0\1\174\3\0\2\167\1\u0189"+
    "\1\317\1\167\1\0\5\167\1\0\1\301\3\167\1\u0125"+
    "\3\167\1\174\1\167\5\0\1\167\1\0\10\167\1\0"+
    "\3\167\1\175\1\0\1\174\3\0\5\167\1\u0140\5\167"+
    "\1\0\6\167\1\u018a\1\167\1\174\1\167\5\0\1\u018b"+
    "\1\0\3\167\1\u018c\4\167\1\0\3\167\1\175\1\0"+
    "\1\174\3\0\5\167\1\0\5\167\1\0\3\167\1\u0127"+
    "\4\167\1\174\1\167\5\0\1\167\1\0\10\167\1\0"+
    "\3\167\1\175\1\0\1\174\3\0\5\167\1\0\5\167"+
    "\1\0\1\167\1\u0125\6\167\1\174\1\167\5\0\1\167"+
    "\1\0\10\167\1\0\3\167\1\175\1\0\1\174\3\0"+
    "\5\167\1\0\5\167\1\0\2\167\1\u018d\5\167\1\174"+
    "\1\167\5\0\1\167\1\0\10\167\1\0\3\167\1\175"+
    "\1\0\1\174\3\0\5\167\1\0\2\167\1\u018e\2\167"+
    "\1\0\2\167\1\u018f\5\167\1\174\1\167\5\0\1\167"+
    "\1\0\10\167\1\0\3\167\1\175\1\0\1\174\3\0"+
    "\4\167\1\u0190\1\0\5\167\1\0\4\167\1\u0191\3\167"+
    "\1\174\1\167\5\0\1\167\1\0\10\167\1\0\3\167"+
    "\1\175\1\0\1\174\3\0\2\167\1\u0138\2\167\1\0"+
    "\5\167\1\0\1\167\1\u0135\6\167\1\174\1\167\5\0"+
    "\1\167\1\0\10\167\1\0\3\167\1\175\1\0\1\174"+
    "\3\0\5\167\1\u016a\5\167\1\0\6\167\1\u0192\1\167"+
    "\1\174\1\167\5\0\1\167\1\0\10\167\1\0\3\167"+
    "\1\175\1\0\1\174\3\0\5\167\1\0\2\167\1\u012a"+
    "\2\167\1\0\10\167\1\174\1\167\5\0\1\167\1\0"+
    "\10\167\1\0\3\167\1\175\1\0\1\174\3\0\5\167"+
    "\1\0\2\167\1\215\2\167\1\0\2\167\1\216\5\167"+
    "\1\174\1\167\5\0\1\u0193\1\0\10\167\1\0\3\167"+
    "\1\175\1\0\1\174\3\0\1\220\1\0\1\221\1\222"+
    "\2\0\1\223\1\224\1\0\1\225\1\226\1\227\1\230"+
    "\1\0\1\231\4\0\1\227\34\0\1\257\1\260\1\261"+
    "\1\0\1\262\1\0\1\263\1\0\1\264\10\0\1\262"+
    "\10\0\1\265\14\0\1\266\6\0\1\337\1\340\1\341"+
    "\1\342\1\u0194\1\344\1\167\1\345\1\346\1\347\1\350"+
    "\1\351\1\352\1\353\1\354\1\355\1\356\1\0\1\357"+
    "\1\360\1\361\1\167\5\0\1\362\1\0\2\167\4\0"+
    "\2\167\1\0\1\167\1\363\1\167\1\34\1\0\1\361"+
    "\1\0\30\134\1\34\4\134\1\u0195\21\134\31\144\1\34"+
    "\3\144\1\u0196\21\144\2\0\5\167\1\0\1\167\1\u0197"+
    "\3\167\1\0\10\167\1\174\1\167\5\0\1\167\1\0"+
    "\10\167\1\0\3\167\1\175\1\0\1\174\37\0\1\367"+
    "\22\0\5\167\1\0\2\167\1\u0198\2\167\1\0\10\167"+
    "\1\174\1\167\5\0\1\167\1\0\10\167\1\0\3\167"+
    "\1\175\1\0\1\174\16\0\1\u0199\7\0\1\u0199\44\0"+
    "\1\u019a\43\0\2\u019b\5\0\1\u019b\5\0\1\u019b\10\0"+
    "\1\u019b\1\0\5\u019b\1\0\1\u019b\10\0\1\u019b\3\0"+
    "\4\u019b\14\0\1\u019c\57\0\1\u019d\7\0\1\u019d\31\0"+
    "\2\u019e\5\0\1\u019e\5\0\1\u019e\10\0\1\u019e\1\0"+
    "\5\u019e\1\0\1\u019e\10\0\1\u019e\3\0\4\u019e\22\0"+
    "\1\u019f\50\0\1\u01a0\44\0\2\117\1\u01a1\2\117\1\0"+
    "\5\117\1\0\10\117\1\0\1\117\5\0\1\117\1\0"+
    "\10\117\1\0\3\117\6\0\3\117\1\u01a2\1\117\1\0"+
    "\5\117\1\0\10\117\1\0\1\117\5\0\1\117\1\0"+
    "\10\117\1\0\3\117\12\0\1\u01a3\66\0\1\u01a4\42\0"+
    "\5\117\1\0\5\117\1\0\1\u01a5\7\117\1\0\1\117"+
    "\5\0\1\117\1\0\10\117\1\0\3\117\17\0\1\u01a6"+
    "\45\0\3\117\1\u01a7\1\117\1\0\5\117\1\0\1\117"+
    "\1\u01a8\6\117\1\0\1\117\5\0\1\117\1\0\10\117"+
    "\1\0\3\117\16\0\1\u01a9\46\0\1\117\1\u01aa\3\117"+
    "\1\0\5\117\1\0\10\117\1\0\1\117\5\0\1\117"+
    "\1\0\10\117\1\0\3\117\10\0\1\u01ab\62\0\1\u01ac"+
    "\62\0\1\u01ad\44\0\5\117\1\0\3\117\1\u01ae\1\117"+
    "\1\0\10\117\1\0\1\117\5\0\1\117\1\0\10\117"+
    "\1\0\3\117\6\0\5\117\1\0\2\117\1\u01af\2\117"+
    "\1\0\10\117\1\0\1\117\5\0\1\117\1\0\10\117"+
    "\1\0\3\117\4\0\15\134\1\u01b0\7\134\1\u01b0\2\134"+
    "\1\34\41\134\1\u01b1\14\134\1\34\26\134\2\u01b2\5\134"+
    "\1\u01b2\5\134\1\u01b2\10\134\1\u01b2\1\134\1\34\4\u01b2"+
    "\1\134\1\u01b2\10\134\1\u01b2\3\134\4\u01b2\14\134\1\u01b3"+
    "\13\134\1\34\43\134\1\u01b4\7\134\1\u01b4\2\134\1\34"+
    "\26\134\2\u01b5\5\134\1\u01b5\5\134\1\u01b5\10\134\1\u01b5"+
    "\1\134\1\34\4\u01b5\1\134\1\u01b5\10\134\1\u01b5\3\134"+
    "\4\u01b5\22\134\1\u01b6\5\134\1\34\42\134\1\u01b7\13\134"+
    "\1\34\26\134\15\144\1\u01b8\7\144\1\u01b8\3\144\1\34"+
    "\40\144\1\u01b9\15\144\1\34\25\144\2\u01ba\5\144\1\u01ba"+
    "\5\144\1\u01ba\10\144\1\u01ba\1\144\1\u01ba\1\34\3\u01ba"+
    "\1\144\1\u01ba\10\144\1\u01ba\3\144\4\u01ba\14\144\1\u01bb"+
    "\14\144\1\34\42\144\1\u01bc\7\144\1\u01bc\3\144\1\34"+
    "\25\144\2\u01bd\5\144\1\u01bd\5\144\1\u01bd\10\144\1\u01bd"+
    "\1\144\1\u01bd\1\34\3\u01bd\1\144\1\u01bd\10\144\1\u01bd"+
    "\3\144\4\u01bd\22\144\1\u01be\6\144\1\34\41\144\1\u01bf"+
    "\14\144\1\34\25\144\14\0\1\u01c0\44\0\3\167\1\u01c1"+
    "\1\167\1\0\5\167\1\0\10\167\1\174\1\167\5\0"+
    "\1\167\1\0\10\167\1\0\3\167\1\175\1\0\1\174"+
    "\3\0\5\167\1\0\1\320\4\167\1\0\2\167\1\u012a"+
    "\5\167\1\174\1\167\5\0\1\167\1\0\10\167\1\0"+
    "\3\167\1\175\1\0\1\174\3\0\5\167\1\0\4\167"+
    "\1\u01c2\1\0\10\167\1\174\1\167\5\0\1\167\1\0"+
    "\10\167\1\0\3\167\1\175\1\0\1\174\3\0\5\167"+
    "\1\0\5\167\1\0\2\167\1\u01c3\5\167\1\174\1\167"+
    "\5\0\1\167\1\0\10\167\1\0\3\167\1\175\1\0"+
    "\1\174\3\0\5\167\1\0\5\167\1\0\10\167\1\174"+
    "\1\167\5\0\1\167\1\0\3\167\1\u01c4\4\167\1\0"+
    "\3\167\1\175\1\0\1\174\3\0\5\167\1\0\5\167"+
    "\1\0\4\167\1\u0127\3\167\1\174\1\167\5\0\1\167"+
    "\1\0\10\167\1\0\3\167\1\175\1\0\1\174\7\0"+
    "\1\u012c\52\0\5\167\1\0\5\167\1\0\10\167\1\u012c"+
    "\1\167\5\0\1\167\1\0\10\167\1\0\3\167\1\34"+
    "\1\0\1\u012c\3\0\5\167\1\0\5\167\1\0\3\167"+
    "\1\u01c5\4\167\1\174\1\167\5\0\1\167\1\0\10\167"+
    "\1\0\3\167\1\175\1\0\1\174\3\0\5\167\1\0"+
    "\2\167\1\267\2\167\1\0\10\167\1\174\1\167\5\0"+
    "\1\167\1\0\10\167\1\0\3\167\1\175\1\0\1\174"+
    "\3\0\4\167\1\u0127\1\0\5\167\1\0\10\167\1\174"+
    "\1\167\5\0\1\167\1\0\10\167\1\0\3\167\1\175"+
    "\1\0\1\174\3\0\5\167\1\0\5\167\1\0\10\167"+
    "\1\174\1\167\5\0\1\167\1\0\1\u0134\7\167\1\0"+
    "\3\167\1\175\1\0\1\174\27\0\1\u012c\24\0\1\34"+
    "\1\0\1\u012c\3\0\5\167\1\0\5\167\1\0\3\167"+
    "\1\u01c6\4\167\1\174\1\167\5\0\1\167\1\0\10\167"+
    "\1\0\3\167\1\175\1\0\1\174\23\0\1\u01c7\36\0"+
    "\5\167\1\0\5\167\1\0\4\167\1\u01c8\3\167\1\174"+
    "\1\167\5\0\1\167\1\0\10\167\1\0\3\167\1\175"+
    "\1\0\1\174\3\0\5\167\1\0\1\167\1\u0127\3\167"+
    "\1\0\10\167\1\174\1\167\5\0\1\167\1\0\10\167"+
    "\1\0\3\167\1\175\1\0\1\174\5\0\1\u012c\61\0"+
    "\1\u01c9\14\0\1\u01c9\34\0\5\167\1\0\5\167\1\0"+
    "\4\167\1\u0182\3\167\1\174\1\167\5\0\1\167\1\0"+
    "\10\167\1\0\3\167\1\175\1\0\1\174\3\0\5\167"+
    "\1\0\5\167\1\0\1\167\1\u0127\6\167\1\174\1\167"+
    "\5\0\1\167\1\0\10\167\1\0\3\167\1\175\1\0"+
    "\1\174\3\0\2\167\1\u0127\2\167\1\0\5\167\1\0"+
    "\10\167\1\174\1\167\5\0\1\167\1\0\10\167\1\0"+
    "\3\167\1\175\1\0\1\174\3\0\5\167\1\u01c9\5\167"+
    "\1\0\6\167\1\u01ca\1\167\1\174\1\167\5\0\1\167"+
    "\1\0\10\167\1\0\3\167\1\175\1\0\1\174\3\0"+
    "\2\167\1\u01cb\2\167\1\u01cc\5\167\1\0\6\167\1\u01cd"+
    "\1\167\1\174\1\167\5\0\1\167\1\0\10\167\1\0"+
    "\3\167\1\175\1\0\1\174\3\0\5\167\1\0\5\167"+
    "\1\0\10\167\1\u012c\1\167\5\0\1\u0127\1\0\10\167"+
    "\1\0\3\167\1\34\1\0\1\u012c\16\0\1\u01ce\7\0"+
    "\1\u01ce\33\0\5\167\1\0\5\167\1\u01ce\7\167\1\u01cf"+
    "\1\174\1\167\5\0\1\167\1\0\10\167\1\0\3\167"+
    "\1\175\1\0\1\174\46\0\1\u012c\24\0\1\u013b\63\0"+
    "\1\223\50\0\1\u01d0\50\0\1\u0126\14\0\1\u012c\54\0"+
    "\1\u0131\41\0\1\u01d1\63\0\1\u01d2\14\0\1\u01d2\54\0"+
    "\1\223\42\0\1\u0147\63\0\1\u0126\57\0\1\u012c\23\0"+
    "\1\u012c\33\0\1\u012c\7\0\1\u012c\53\0\1\u012c\36\0"+
    "\3\167\1\203\1\167\1\0\1\167\1\214\3\167\1\0"+
    "\10\167\1\174\1\167\5\0\1\167\1\0\10\167\1\0"+
    "\3\167\1\175\1\0\1\174\3\0\5\167\1\0\4\167"+
    "\1\u01d3\1\0\10\167\1\174\1\167\5\0\1\167\1\0"+
    "\10\167\1\0\3\167\1\175\1\0\1\174\3\0\5\167"+
    "\1\0\5\167\1\0\10\167\1\174\1\167\5\0\1\167"+
    "\1\0\10\167\1\u012c\1\u0127\2\167\1\175\1\0\1\174"+
    "\3\0\5\167\1\u01d4\5\167\1\0\6\167\1\u01d5\1\167"+
    "\1\174\1\167\5\0\1\167\1\0\10\167\1\0\3\167"+
    "\1\175\1\0\1\174\12\0\1\u01d6\47\0\5\167\1\0"+
    "\1\167\1\u01d7\3\167\1\0\10\167\1\174\1\167\5\0"+
    "\1\167\1\0\10\167\1\0\3\167\1\175\1\0\1\174"+
    "\3\0\5\167\1\0\3\167\1\u01d8\1\167\1\0\10\167"+
    "\1\174\1\167\5\0\1\167\1\0\10\167\1\0\3\167"+
    "\1\175\1\0\1\174\36\0\1\u01d9\23\0\5\167\1\0"+
    "\5\167\1\0\10\167\1\174\1\167\5\0\1\u01da\1\0"+
    "\10\167\1\0\3\167\1\175\1\0\1\174\36\0\1\u0132"+
    "\23\0\5\167\1\0\5\167\1\0\10\167\1\174\1\167"+
    "\5\0\1\u0136\1\0\10\167\1\0\3\167\1\175\1\0"+
    "\1\174\3\0\3\167\1\u01db\1\167\1\0\5\167\1\0"+
    "\10\167\1\u012c\1\167\5\0\1\167\1\0\10\167\1\0"+
    "\3\167\1\34\1\0\1\u012c\3\0\5\167\1\0\1\u01dc"+
    "\4\167\1\0\10\167\1\u012c\1\167\5\0\1\167\1\0"+
    "\10\167\1\0\3\167\1\34\1\0\1\u012c\3\0\5\167"+
    "\1\0\5\167\1\u0165\7\167\1\u0138\1\174\1\167\5\0"+
    "\1\167\1\0\10\167\1\0\3\167\1\175\1\0\1\174"+
    "\3\0\5\167\1\0\5\167\1\0\10\167\1\174\1\167"+
    "\5\0\1\167\1\0\3\167\1\u01dd\4\167\1\0\3\167"+
    "\1\175\1\0\1\174\3\0\5\167\1\0\2\167\1\u015f"+
    "\2\167\1\0\10\167\1\174\1\167\5\0\1\167\1\0"+
    "\10\167\1\0\3\167\1\175\1\0\1\174\10\0\1\u01de"+
    "\14\0\1\u01de\34\0\5\167\1\0\3\167\1\u0127\1\167"+
    "\1\0\10\167\1\174\1\167\5\0\1\167\1\0\10\167"+
    "\1\0\3\167\1\175\1\0\1\174\3\0\5\167\1\0"+
    "\5\167\1\0\2\167\1\u01df\5\167\1\174\1\167\5\0"+
    "\1\167\1\0\10\167\1\0\3\167\1\175\1\0\1\174"+
    "\10\0\1\u0131\14\0\1\u0131\34\0\5\167\1\u0131\5\167"+
    "\1\0\6\167\1\u0135\1\167\1\174\1\167\5\0\1\167"+
    "\1\0\10\167\1\0\3\167\1\175\1\0\1\174\5\0"+
    "\1\u01e0\54\0\5\167\1\0\4\167\1\u0127\1\0\10\167"+
    "\1\174\1\167\5\0\1\167\1\0\10\167\1\0\3\167"+
    "\1\175\1\0\1\174\3\0\5\167\1\0\5\167\1\0"+
    "\10\167\1\174\1\167\5\0\1\167\1\0\6\167\1\u01e1"+
    "\1\167\1\0\3\167\1\175\1\0\1\174\3\0\2\167"+
    "\1\u01e1\2\167\1\0\5\167\1\0\10\167\1\174\1\167"+
    "\5\0\1\167\1\0\10\167\1\0\3\167\1\175\1\0"+
    "\1\174\3\0\5\167\1\0\5\167\1\0\1\167\1\u01e2"+
    "\6\167\1\174\1\167\5\0\1\167\1\0\10\167\1\0"+
    "\3\167\1\175\1\0\1\174\3\0\5\167\1\u01de\5\167"+
    "\1\0\6\167\1\u01e3\1\167\1\174\1\167\5\0\1\167"+
    "\1\0\10\167\1\0\3\167\1\175\1\0\1\174\5\0"+
    "\1\u012c\15\0\1\u01e4\62\0\1\u012c\6\0\1\u012c\15\0"+
    "\1\34\1\0\1\u012c\14\0\1\u01e5\50\0\1\u01c7\113\0"+
    "\1\u01e6\27\0\1\u01e7\45\0\1\u01e8\56\0\5\167\1\0"+
    "\5\167\1\u0126\7\167\1\u012a\1\174\1\167\5\0\1\167"+
    "\1\0\10\167\1\0\3\167\1\175\1\0\1\174\16\0"+
    "\1\u01e9\7\0\1\u01e9\33\0\5\167\1\0\5\167\1\u01e9"+
    "\7\167\1\u01ea\1\174\1\167\5\0\1\167\1\0\10\167"+
    "\1\0\3\167\1\175\1\0\1\174\3\0\5\167\1\0"+
    "\5\167\1\0\3\167\1\u01eb\4\167\1\174\1\167\5\0"+
    "\1\167\1\0\10\167\1\0\3\167\1\175\1\0\1\174"+
    "\3\0\2\167\1\u01ec\2\167\1\0\5\167\1\0\10\167"+
    "\1\174\1\167\5\0\1\167\1\0\10\167\1\0\3\167"+
    "\1\175\1\0\1\174\21\0\1\u01ed\40\0\1\167\1\u01ee"+
    "\3\167\1\0\5\167\1\0\10\167\1\174\1\167\5\0"+
    "\1\167\1\0\10\167\1\0\3\167\1\175\1\0\1\174"+
    "\5\0\1\u0165\56\0\1\u01ef\54\0\5\167\1\0\5\167"+
    "\1\0\10\167\1\174\1\167\5\0\1\167\1\0\6\167"+
    "\1\u01f0\1\167\1\0\3\167\1\175\1\0\1\174\3\0"+
    "\2\167\1\u01f0\2\167\1\0\5\167\1\0\10\167\1\174"+
    "\1\167\5\0\1\167\1\0\10\167\1\0\3\167\1\175"+
    "\1\0\1\174\3\0\5\167\1\0\5\167\1\0\2\167"+
    "\1\u0134\5\167\1\174\1\167\5\0\1\167\1\0\10\167"+
    "\1\0\3\167\1\175\1\0\1\174\23\0\1\u01f1\3\0"+
    "\1\u012c\14\0\2\u012c\4\0\1\u01f2\1\0\1\34\1\0"+
    "\1\u012c\3\0\1\167\1\u01f3\3\167\1\0\5\167\1\0"+
    "\10\167\1\u012c\1\167\5\0\1\167\1\0\10\167\1\0"+
    "\3\167\1\34\1\0\1\u012c\3\0\5\167\1\0\5\167"+
    "\1\0\1\167\1\u01f4\6\167\1\174\1\167\5\0\1\167"+
    "\1\0\10\167\1\0\3\167\1\175\1\0\1\174\3\0"+
    "\5\167\1\0\5\167\1\0\3\167\1\u01f5\4\167\1\174"+
    "\1\167\5\0\1\167\1\0\10\167\1\0\3\167\1\175"+
    "\1\0\1\174\50\0\2\u01f6\10\0\5\167\1\0\5\167"+
    "\1\0\10\167\1\174\1\167\5\0\1\167\1\0\10\167"+
    "\1\u01f6\1\u01f7\2\167\1\175\1\0\1\174\3\0\5\167"+
    "\1\0\5\167\1\0\4\167\1\u01f8\3\167\1\u012c\1\167"+
    "\5\0\1\167\1\0\4\167\2\u0127\2\167\1\0\1\167"+
    "\1\u01f9\1\167\1\34\1\0\1\u012c\3\0\5\167\1\u01fa"+
    "\5\167\1\0\6\167\1\u01fb\1\167\1\u012c\1\167\5\0"+
    "\1\167\1\0\5\167\1\u01fc\2\167\1\0\3\167\1\34"+
    "\1\0\1\u012c\3\0\5\167\1\0\5\167\1\0\1\167"+
    "\1\353\6\167\1\174\1\167\5\0\1\167\1\0\10\167"+
    "\1\0\3\167\1\175\1\0\1\174\3\0\5\167\1\0"+
    "\5\167\1\0\10\167\1\174\1\167\5\0\1\167\1\0"+
    "\3\167\1\u01fd\4\167\1\0\3\167\1\175\1\0\1\174"+
    "\3\0\5\167\1\0\4\167\1\u01fe\1\0\10\167\1\174"+
    "\1\167\5\0\1\167\1\0\10\167\1\0\3\167\1\175"+
    "\1\0\1\174\3\0\5\167\1\0\5\167\1\0\10\167"+
    "\1\174\1\167\5\0\1\167\1\0\6\167\1\u0127\1\167"+
    "\1\0\3\167\1\175\1\0\1\174\3\0\5\167\1\0"+
    "\3\167\1\u0182\1\167\1\0\10\167\1\174\1\167\5\0"+
    "\1\167\1\0\10\167\1\0\3\167\1\175\1\0\1\174"+
    "\3\0\5\167\1\0\2\167\1\u014c\2\167\1\0\10\167"+
    "\1\174\1\167\5\0\1\167\1\0\10\167\1\0\3\167"+
    "\1\175\1\0\1\174\3\0\2\167\1\u012a\2\167\1\0"+
    "\5\167\1\0\3\167\1\u0127\4\167\1\174\1\167\5\0"+
    "\1\167\1\0\10\167\1\0\3\167\1\175\1\0\1\174"+
    "\3\0\5\167\1\0\5\167\1\0\4\167\1\320\3\167"+
    "\1\174\1\167\5\0\1\167\1\0\10\167\1\0\3\167"+
    "\1\175\1\0\1\174\3\0\4\167\1\301\1\0\5\167"+
    "\1\0\10\167\1\174\1\167\5\0\1\167\1\0\10\167"+
    "\1\0\3\167\1\175\1\0\1\174\3\0\5\167\1\0"+
    "\3\167\1\u012a\1\167\1\0\10\167\1\174\1\167\5\0"+
    "\1\167\1\0\10\167\1\0\3\167\1\175\1\0\1\174"+
    "\3\0\5\167\1\0\4\167\1\u0127\1\0\10\167\1\174"+
    "\1\167\5\0\1\167\1\0\1\167\1\u0127\6\167\1\0"+
    "\3\167\1\175\1\0\1\174\3\0\5\167\1\0\5\167"+
    "\1\0\1\167\1\u0135\6\167\1\174\1\167\5\0\1\167"+
    "\1\0\10\167\1\0\3\167\1\175\1\0\1\174\3\0"+
    "\1\u01ff\4\167\1\0\5\167\1\0\10\167\1\174\1\167"+
    "\5\0\1\167\1\0\10\167\1\0\3\167\1\175\1\0"+
    "\1\174\3\0\5\167\1\u01d2\5\167\1\0\6\167\1\u0200"+
    "\1\167\1\174\1\167\5\0\1\167\1\0\10\167\1\0"+
    "\3\167\1\175\1\0\1\174\3\0\2\167\1\u0127\2\167"+
    "\1\0\5\167\1\0\4\167\1\u015a\3\167\1\174\1\167"+
    "\5\0\1\167\1\0\10\167\1\0\3\167\1\175\1\0"+
    "\1\174\3\0\5\167\1\0\3\167\1\u0201\1\167\1\0"+
    "\10\167\1\174\1\167\5\0\1\167\1\0\10\167\1\0"+
    "\3\167\1\175\1\0\1\174\3\0\3\167\1\u01c8\1\167"+
    "\1\0\5\167\1\0\10\167\1\174\1\167\5\0\1\167"+
    "\1\0\10\167\1\0\3\167\1\175\1\0\1\174\3\0"+
    "\5\167\1\0\5\167\1\0\10\167\1\174\1\167\5\0"+
    "\1\167\1\0\3\167\1\u0202\4\167\1\0\3\167\1\175"+
    "\1\0\1\174\3\0\5\167\1\0\3\167\1\u0203\1\167"+
    "\1\0\10\167\1\174\1\167\5\0\1\167\1\0\10\167"+
    "\1\0\3\167\1\175\1\0\1\174\3\0\1\u0204\4\167"+
    "\1\0\5\167\1\0\10\167\1\174\1\167\5\0\1\167"+
    "\1\0\10\167\1\0\3\167\1\175\1\0\1\174\3\0"+
    "\5\167\1\u0139\3\167\1\u0205\1\167\1\0\6\167\1\u013a"+
    "\1\167\1\174\1\167\5\0\1\167\1\0\10\167\1\0"+
    "\3\167\1\175\1\0\1\174\1\0\13\134\1\u0206\14\134"+
    "\1\34\26\134\13\144\1\u0207\15\144\1\34\25\144\2\0"+
    "\5\167\1\0\1\u012a\4\167\1\0\10\167\1\174\1\167"+
    "\5\0\1\167\1\0\10\167\1\0\3\167\1\175\1\0"+
    "\1\174\3\0\5\167\1\u0208\5\167\1\0\6\167\1\u0209"+
    "\1\167\1\174\1\167\5\0\1\167\1\0\10\167\1\0"+
    "\3\167\1\175\1\0\1\174\14\0\1\u020a\47\0\1\u020b"+
    "\54\0\1\u020c\4\0\1\u020d\1\0\1\u020e\2\0\1\u020f"+
    "\1\u0210\3\0\1\u0211\2\0\1\u020d\1\u0210\1\u019c\7\0"+
    "\1\u0212\16\0\1\u019c\14\0\1\u0213\56\0\1\u0214\46\0"+
    "\1\u0215\55\0\3\117\1\u0216\1\117\1\0\5\117\1\0"+
    "\10\117\1\0\1\117\5\0\1\117\1\0\10\117\1\0"+
    "\3\117\6\0\4\117\1\u0217\1\0\5\117\1\0\10\117"+
    "\1\0\1\117\5\0\1\117\1\0\10\117\1\0\3\117"+
    "\17\0\1\u0218\55\0\1\u0219\46\0\5\117\1\0\2\117"+
    "\1\u021a\2\117\1\0\10\117\1\0\1\117\5\0\1\117"+
    "\1\0\10\117\1\0\3\117\16\0\1\u021b\46\0\5\117"+
    "\1\0\3\117\1\u021c\1\117\1\0\10\117\1\0\1\117"+
    "\5\0\1\117\1\0\10\117\1\0\3\117\6\0\5\117"+
    "\1\0\2\117\1\u021d\2\117\1\0\10\117\1\0\1\117"+
    "\5\0\1\117\1\0\10\117\1\0\3\117\14\0\1\u021e"+
    "\50\0\5\117\1\0\5\117\1\0\4\117\1\u021f\3\117"+
    "\1\0\1\117\5\0\1\117\1\0\10\117\1\0\3\117"+
    "\11\0\1\u0220\56\0\1\u0221\11\0\1\u0222\42\0\1\u0223"+
    "\55\0\5\117\1\0\2\117\1\u0224\2\117\1\0\10\117"+
    "\1\0\1\117\5\0\1\117\1\0\10\117\1\0\3\117"+
    "\6\0\5\117\1\0\1\u0225\4\117\1\0\10\117\1\0"+
    "\1\117\5\0\1\117\1\0\10\117\1\0\3\117\4\0"+
    "\13\134\1\u0226\14\134\1\34\32\134\1\u0227\23\134\1\34"+
    "\30\134\1\u0228\4\134\1\u0229\1\134\1\u022a\2\134\1\u022b"+
    "\1\u022c\3\134\1\u022d\2\134\1\u0229\1\u022c\1\u01b3\1\134"+
    "\1\34\5\134\1\u022e\16\134\1\u01b3\14\134\1\u022f\14\134"+
    "\1\34\41\134\1\u0230\14\134\1\34\31\134\1\u0231\24\134"+
    "\1\34\26\134\13\144\1\u0232\15\144\1\34\31\144\1\u0233"+
    "\24\144\1\34\27\144\1\u0234\4\144\1\u0235\1\144\1\u0236"+
    "\2\144\1\u0237\1\u0238\3\144\1\u0239\2\144\1\u0235\1\u0238"+
    "\1\u01bb\2\144\1\34\4\144\1\u023a\16\144\1\u01bb\14\144"+
    "\1\u023b\15\144\1\34\40\144\1\u023c\15\144\1\34\30\144"+
    "\1\u023d\25\144\1\34\25\144\22\0\1\u01f1\36\0\4\167"+
    "\1\u023e\1\0\5\167\1\0\10\167\1\174\1\167\5\0"+
    "\1\167\1\0\10\167\1\0\3\167\1\175\1\0\1\174"+
    "\3\0\5\167\1\0\5\167\1\0\4\167\1\u01f8\3\167"+
    "\1\174\1\167\5\0\1\167\1\0\10\167\1\0\3\167"+
    "\1\175\1\0\1\174\3\0\3\167\1\u014b\1\167\1\0"+
    "\5\167\1\0\10\167\1\174\1\167\5\0\1\167\1\0"+
    "\10\167\1\0\3\167\1\175\1\0\1\174\3\0\5\167"+
    "\1\u023f\5\167\1\0\6\167\1\u0240\1\167\1\174\1\167"+
    "\5\0\1\167\1\0\10\167\1\0\3\167\1\175\1\0"+
    "\1\174\3\0\5\167\1\0\5\167\1\0\10\167\1\174"+
    "\1\167\5\0\1\167\1\0\2\167\1\u0127\5\167\1\0"+
    "\3\167\1\175\1\0\1\174\3\0\5\167\1\0\5\167"+
    "\1\0\2\167\1\u0241\5\167\1\174\1\167\5\0\1\167"+
    "\1\0\10\167\1\0\3\167\1\175\1\0\1\174\10\0"+
    "\1\u0242\14\0\1\u0242\34\0\5\167\1\u0242\5\167\1\0"+
    "\6\167\1\u0243\1\167\1\174\1\167\5\0\1\167\1\0"+
    "\10\167\1\0\3\167\1\175\1\0\1\174\3\0\1\u0126"+
    "\56\0\1\u012a\4\167\1\0\5\167\1\0\10\167\1\174"+
    "\1\167\5\0\1\167\1\0\10\167\1\0\3\167\1\175"+
    "\1\0\1\174\3\0\5\167\1\0\5\167\1\u0244\7\167"+
    "\1\u0245\1\174\1\167\5\0\1\167\1\0\10\167\1\0"+
    "\3\167\1\175\1\0\1\174\23\0\1\u0246\36\0\5\167"+
    "\1\0\5\167\1\0\4\167\1\u01fe\3\167\1\174\1\167"+
    "\5\0\1\167\1\0\10\167\1\0\3\167\1\175\1\0"+
    "\1\174\43\0\1\u0247\16\0\5\167\1\0\5\167\1\0"+
    "\10\167\1\174\1\167\5\0\1\167\1\0\3\167\1\u0248"+
    "\4\167\1\0\3\167\1\175\1\0\1\174\10\0\1\u01d4"+
    "\14\0\1\u01d4\40\0\1\u0249\60\0\1\u024a\50\0\1\167"+
    "\1\u024b\3\167\1\0\5\167\1\0\10\167\1\174\1\167"+
    "\5\0\1\167\1\0\10\167\1\0\3\167\1\175\1\0"+
    "\1\174\7\0\1\u024c\52\0\4\167\1\u024d\1\0\5\167"+
    "\1\0\10\167\1\174\1\167\5\0\1\167\1\0\10\167"+
    "\1\0\3\167\1\175\1\0\1\174\21\0\1\u0167\40\0"+
    "\5\167\1\0\5\167\1\0\2\167\1\u018f\5\167\1\174"+
    "\1\167\5\0\1\167\1\0\10\167\1\0\3\167\1\175"+
    "\1\0\1\174\3\0\5\167\1\0\5\167\1\0\2\167"+
    "\1\u012a\5\167\1\174\1\167\5\0\1\167\1\0\10\167"+
    "\1\0\3\167\1\175\1\0\1\174\21\0\1\u024e\40\0"+
    "\5\167\1\0\5\167\1\0\2\167\1\u024f\5\167\1\174"+
    "\1\167\5\0\1\167\1\0\10\167\1\0\3\167\1\175"+
    "\1\0\1\174\3\0\5\167\1\0\5\167\1\0\10\167"+
    "\1\u012c\1\167\5\0\1\167\1\0\3\167\1\u0250\4\167"+
    "\1\0\3\167\1\34\1\0\1\u012c\3\0\2\167\1\u0251"+
    "\2\167\1\0\5\167\1\0\10\167\1\174\1\167\5\0"+
    "\1\167\1\0\10\167\1\0\3\167\1\175\1\0\1\174"+
    "\3\0\5\167\1\0\1\167\1\u0252\3\167\1\0\10\167"+
    "\1\174\1\167\5\0\1\167\1\0\10\167\1\0\3\167"+
    "\1\175\1\0\1\174\3\0\1\u0253\56\0\2\167\1\u0254"+
    "\2\167\1\0\5\167\1\0\10\167\1\174\1\167\5\0"+
    "\1\167\1\0\10\167\1\0\3\167\1\175\1\0\1\174"+
    "\45\0\1\u012c\14\0\5\167\1\0\5\167\1\0\10\167"+
    "\1\174\1\167\5\0\1\167\1\0\5\167\1\u0127\2\167"+
    "\1\0\3\167\1\175\1\0\1\174\3\0\5\167\1\0"+
    "\5\167\1\0\10\167\1\u012c\1\167\5\0\1\167\1\0"+
    "\5\167\1\u01fc\2\167\1\0\3\167\1\34\1\0\1\u012c"+
    "\3\0\1\u0255\4\167\1\0\5\167\1\0\10\167\1\174"+
    "\1\167\5\0\1\167\1\0\10\167\1\0\3\167\1\175"+
    "\1\0\1\174\14\0\1\u012c\63\0\1\u0256\51\0\1\u0257"+
    "\50\0\1\u0258\57\0\1\u0259\63\0\1\u025a\45\0\5\167"+
    "\1\0\3\167\1\u025b\1\167\1\0\10\167\1\174\1\167"+
    "\5\0\1\167\1\0\10\167\1\0\3\167\1\175\1\0"+
    "\1\174\3\0\5\167\1\0\5\167\1\0\2\167\1\u0127"+
    "\5\167\1\174\1\167\5\0\1\167\1\0\10\167\1\0"+
    "\3\167\1\175\1\0\1\174\3\0\5\167\1\0\5\167"+
    "\1\0\10\167\1\u012c\1\167\5\0\1\u0127\1\0\2\167"+
    "\1\u0127\5\167\1\0\3\167\1\34\1\0\1\u012c\20\0"+
    "\1\u012c\41\0\5\167\1\0\5\167\1\u0253\7\167\1\u0255"+
    "\1\174\1\167\5\0\1\167\1\0\10\167\1\0\3\167"+
    "\1\175\1\0\1\174\44\0\2\u012c\14\0\5\167\1\0"+
    "\5\167\1\0\10\167\1\174\1\167\5\0\1\167\1\0"+
    "\4\167\2\u0127\2\167\1\0\3\167\1\175\1\0\1\174"+
    "\11\0\1\u025c\66\0\1\u0148\40\0\5\167\1\0\5\167"+
    "\1\0\4\167\1\u025d\3\167\1\174\1\167\5\0\1\167"+
    "\1\0\10\167\1\0\3\167\1\175\1\0\1\174\3\0"+
    "\5\167\1\0\3\167\1\u025e\1\167\1\0\10\167\1\174"+
    "\1\167\5\0\1\167\1\0\10\167\1\0\3\167\1\175"+
    "\1\0\1\174\3\0\1\167\1\u0125\3\167\1\0\5\167"+
    "\1\0\10\167\1\174\1\167\5\0\1\167\1\0\10\167"+
    "\1\0\3\167\1\175\1\0\1\174\13\0\1\u012c\7\0"+
    "\1\u012c\36\0\5\167\1\0\2\167\1\u0127\2\167\1\0"+
    "\4\167\1\u0127\3\167\1\174\1\167\5\0\1\167\1\0"+
    "\10\167\1\0\3\167\1\175\1\0\1\174\3\0\5\167"+
    "\1\0\1\u025f\4\167\1\0\10\167\1\174\1\167\5\0"+
    "\1\167\1\0\10\167\1\0\3\167\1\175\1\0\1\174"+
    "\3\0\5\167\1\0\5\167\1\0\2\167\1\u0125\5\167"+
    "\1\174\1\167\5\0\1\167\1\0\10\167\1\0\3\167"+
    "\1\175\1\0\1\174\6\0\1\u01f2\53\0\3\167\1\u01f9"+
    "\1\167\1\0\5\167\1\0\10\167\1\174\1\167\5\0"+
    "\1\167\1\0\10\167\1\0\3\167\1\175\1\0\1\174"+
    "\3\0\5\167\1\0\5\167\1\0\10\167\1\174\1\167"+
    "\5\0\1\167\1\0\4\167\1\u0127\3\167\1\0\3\167"+
    "\1\175\1\0\1\174\3\0\4\167\1\u0260\1\0\5\167"+
    "\1\0\10\167\1\174\1\167\5\0\1\167\1\0\10\167"+
    "\1\0\3\167\1\175\1\0\1\174\3\0\5\167\1\0"+
    "\5\167\1\0\10\167\1\174\1\167\5\0\1\167\1\0"+
    "\7\167\1\u0127\1\0\3\167\1\175\1\0\1\174\3\0"+
    "\4\167\1\u0261\1\0\5\167\1\0\10\167\1\174\1\167"+
    "\5\0\1\167\1\0\10\167\1\0\3\167\1\175\1\0"+
    "\1\174\3\0\5\167\1\0\1\u0262\4\167\1\0\10\167"+
    "\1\174\1\167\5\0\1\167\1\0\10\167\1\0\3\167"+
    "\1\175\1\0\1\174\3\0\5\167\1\0\5\167\1\0"+
    "\2\167\1\u015f\5\167\1\174\1\167\5\0\1\167\1\0"+
    "\10\167\1\0\3\167\1\175\1\0\1\174\3\0\5\167"+
    "\1\0\3\167\1\u0263\1\167\1\0\10\167\1\174\1\167"+
    "\5\0\1\167\1\0\10\167\1\0\3\167\1\175\1\0"+
    "\1\174\3\0\3\167\1\u0264\1\167\1\0\5\167\1\0"+
    "\10\167\1\174\1\167\5\0\1\167\1\0\10\167\1\0"+
    "\3\167\1\175\1\0\1\174\3\0\4\167\1\u0265\1\0"+
    "\5\167\1\0\10\167\1\174\1\167\5\0\1\167\1\0"+
    "\10\167\1\0\3\167\1\175\1\0\1\174\3\0\2\167"+
    "\1\u0266\2\167\1\0\5\167\1\0\10\167\1\174\1\167"+
    "\5\0\1\167\1\0\10\167\1\0\3\167\1\175\1\0"+
    "\1\174\1\0\4\134\1\u0267\23\134\1\34\26\134\4\144"+
    "\1\u0268\24\144\1\34\25\144\2\0\1\u024c\56\0\1\u024d"+
    "\4\167\1\0\5\167\1\0\10\167\1\174\1\167\5\0"+
    "\1\167\1\0\10\167\1\0\3\167\1\175\1\0\1\174"+
    "\1\0\2\u0269\5\0\1\u0269\5\0\1\u0269\10\0\1\u0269"+
    "\1\0\5\u0269\1\0\1\u0269\10\0\1\u0269\3\0\4\u0269"+
    "\2\u026a\5\0\1\u026a\5\0\1\u026a\10\0\1\u026a\1\0"+
    "\5\u026a\1\0\1\u026a\10\0\1\u026a\3\0\4\u026a\3\0"+
    "\1\u026b\55\0\1\u026c\1\0\1\u026d\64\0\1\u026e\54\0"+
    "\1\u026c\51\0\1\u026f\7\0\1\u0270\53\0\1\u0271\104\0"+
    "\1\u0212\20\0\2\u0272\5\0\1\u0273\5\0\1\u0272\6\0"+
    "\1\u0274\1\0\1\u0275\1\0\5\u0272\1\0\1\u0272\10\0"+
    "\1\u0272\3\0\2\u0272\1\u0275\1\u0272\5\0\1\u0276\73\0"+
    "\1\u0277\36\0\4\117\1\u0278\1\0\5\117\1\0\10\117"+
    "\1\0\1\117\5\0\1\117\1\0\10\117\1\0\3\117"+
    "\6\0\5\117\1\u0279\5\117\1\0\6\117\1\u027a\1\117"+
    "\1\0\1\117\5\0\1\117\1\0\10\117\1\0\3\117"+
    "\16\0\1\u027b\54\0\1\u027c\50\0\5\117\1\0\1\u027d"+
    "\4\117\1\0\10\117\1\0\1\117\5\0\1\117\1\0"+
    "\10\117\1\0\3\117\6\0\1\u027e\56\0\5\117\1\0"+
    "\4\117\1\u027f\1\0\10\117\1\0\1\117\5\0\1\117"+
    "\1\0\10\117\1\0\3\117\6\0\5\117\1\0\5\117"+
    "\1\0\2\117\1\u0280\5\117\1\0\1\117\5\0\1\117"+
    "\1\0\10\117\1\0\3\117\7\0\1\u0281\55\0\5\117"+
    "\1\0\3\117\1\u0282\1\117\1\0\10\117\1\0\1\117"+
    "\5\0\1\117\1\0\10\117\1\0\3\117\12\0\1\u0283"+
    "\63\0\1\u0284\55\0\1\u0285\66\0\1\u0286\36\0\1\u0287"+
    "\4\117\1\0\5\117\1\0\10\117\1\0\1\117\5\0"+
    "\1\117\1\0\10\117\1\0\3\117\6\0\1\117\1\u0288"+
    "\3\117\1\0\5\117\1\0\10\117\1\0\1\117\5\0"+
    "\1\117\1\0\10\117\1\0\3\117\4\0\2\u0289\5\134"+
    "\1\u0289\5\134\1\u0289\10\134\1\u0289\1\134\1\34\4\u0289"+
    "\1\134\1\u0289\10\134\1\u0289\3\134\4\u0289\2\u028a\5\134"+
    "\1\u028a\5\134\1\u028a\10\134\1\u028a\1\134\1\u026a\4\u028a"+
    "\1\134\1\u028a\10\134\1\u028a\3\134\4\u028a\3\134\1\u028b"+
    "\24\134\1\34\30\134\1\u028c\1\134\1\u028d\23\134\1\34"+
    "\40\134\1\u028e\15\134\1\34\36\134\1\u028c\17\134\1\34"+
    "\31\134\1\u028f\7\134\1\u0290\14\134\1\34\36\134\1\u0291"+
    "\17\134\1\34\56\134\1\34\5\134\1\u022e\20\134\2\u0292"+
    "\5\134\1\u0293\5\134\1\u0292\6\134\1\u0294\1\134\1\u0295"+
    "\1\134\1\34\4\u0292\1\134\1\u0292\10\134\1\u0292\3\134"+
    "\2\u0292\1\u0295\1\u0292\5\134\1\u0296\22\134\1\34\50\134"+
    "\1\u0297\5\134\1\34\26\134\2\u0298\5\144\1\u0298\5\144"+
    "\1\u0298\10\144\1\u0298\1\144\1\u0298\1\34\3\u0298\1\144"+
    "\1\u0298\10\144\1\u0298\3\144\4\u0298\2\u0299\5\144\1\u0299"+
    "\5\144\1\u0299\10\144\1\u0299\1\144\1\u0299\1\u026a\3\u0299"+
    "\1\144\1\u0299\10\144\1\u0299\3\144\4\u0299\3\144\1\u029a"+
    "\25\144\1\34\27\144\1\u029b\1\144\1\u029c\24\144\1\34"+
    "\37\144\1\u029d\16\144\1\34\35\144\1\u029b\20\144\1\34"+
    "\30\144\1\u029e\7\144\1\u029f\15\144\1\34\35\144\1\u02a0"+
    "\20\144\1\34\56\144\1\34\4\144\1\u023a\20\144\2\u02a1"+
    "\5\144\1\u02a2\5\144\1\u02a1\6\144\1\u02a3\1\144\1\u02a4"+
    "\1\144\1\u02a1\1\34\3\u02a1\1\144\1\u02a1\10\144\1\u02a1"+
    "\3\144\2\u02a1\1\u02a4\1\u02a1\5\144\1\u02a5\23\144\1\34"+
    "\47\144\1\u02a6\6\144\1\34\25\144\2\0\5\167\1\u02a7"+
    "\5\167\1\0\6\167\1\u02a8\1\167\1\174\1\167\5\0"+
    "\1\167\1\0\10\167\1\0\3\167\1\175\1\0\1\174"+
    "\22\0\1\u02a9\37\0\5\167\1\0\5\167\1\0\3\167"+
    "\1\u02aa\4\167\1\174\1\167\5\0\1\167\1\0\10\167"+
    "\1\0\3\167\1\175\1\0\1\174\3\0\2\167\1\u02ab"+
    "\2\167\1\0\5\167\1\0\10\167\1\174\1\167\5\0"+
    "\1\167\1\0\10\167\1\0\3\167\1\175\1\0\1\174"+
    "\5\0\1\u01ed\54\0\2\167\1\u0134\2\167\1\0\5\167"+
    "\1\0\10\167\1\174\1\167\5\0\1\167\1\0\10\167"+
    "\1\0\3\167\1\175\1\0\1\174\3\0\1\u02ac\6\0"+
    "\1\u02ad\47\0\1\u02ae\4\167\1\0\1\167\1\u02af\3\167"+
    "\1\0\10\167\1\174\1\167\5\0\1\167\1\0\10\167"+
    "\1\0\3\167\1\175\1\0\1\174\47\0\1\u012c\17\0"+
    "\1\u02b0\14\0\1\u02b0\34\0\5\167\1\u02b0\5\167\1\0"+
    "\6\167\1\u02b1\1\167\1\174\1\167\5\0\1\167\1\0"+
    "\10\167\1\0\3\167\1\175\1\0\1\174\6\0\1\u012c"+
    "\20\0\1\u012c\24\0\1\34\1\0\1\u012c\16\0\1\u02b2"+
    "\7\0\1\u02b2\33\0\3\167\1\u012a\1\167\1\0\5\167"+
    "\1\0\10\167\1\174\1\167\5\0\1\167\1\0\10\167"+
    "\1\0\3\167\1\175\1\0\1\174\41\0\1\u012c\20\0"+
    "\5\167\1\0\5\167\1\0\10\167\1\174\1\167\5\0"+
    "\1\167\1\0\1\167\1\u0127\6\167\1\0\3\167\1\175"+
    "\1\0\1\174\12\0\1\u01e4\47\0\5\167\1\0\1\167"+
    "\1\u015a\3\167\1\0\10\167\1\174\1\167\5\0\1\167"+
    "\1\0\10\167\1\0\3\167\1\175\1\0\1\174\3\0"+
    "\5\167\1\0\5\167\1\u02b3\7\167\1\u02b4\1\174\1\167"+
    "\5\0\1\167\1\0\10\167\1\0\3\167\1\175\1\0"+
    "\1\174\3\0\5\167\1\0\3\167\1\203\1\167\1\0"+
    "\10\167\1\174\1\167\5\0\1\167\1\0\10\167\1\0"+
    "\3\167\1\175\1\0\1\174\3\0\5\167\1\0\2\167"+
    "\1\233\2\167\1\0\10\167\1\174\1\167\5\0\1\167"+
    "\1\0\10\167\1\0\3\167\1\175\1\0\1\174\7\0"+
    "\1\u01f6\52\0\5\167\1\0\5\167\1\0\10\167\1\u012c"+
    "\1\167\5\0\1\167\1\0\2\167\1\u0127\5\167\1\0"+
    "\3\167\1\34\1\0\1\u012c\3\0\4\167\1\u01f7\1\0"+
    "\5\167\1\0\10\167\1\174\1\167\5\0\1\167\1\0"+
    "\10\167\1\0\3\167\1\175\1\0\1\174\15\0\1\u012c"+
    "\107\0\1\u02b5\17\0\1\u02b6\62\0\1\u012c\5\0\1\u012c"+
    "\1\0\1\u012c\56\0\1\u02b7\36\0\5\167\1\0\5\167"+
    "\1\0\4\167\1\u02b8\3\167\1\174\1\167\5\0\1\167"+
    "\1\0\10\167\1\0\3\167\1\175\1\0\1\174\6\0"+
    "\1\u012c\53\0\5\167\1\0\1\u0127\4\167\1\0\10\167"+
    "\1\174\1\167\5\0\1\167\1\0\10\167\1\0\3\167"+
    "\1\175\1\0\1\174\3\0\5\167\1\0\5\167\1\0"+
    "\10\167\1\u012c\1\167\5\0\1\167\1\0\3\167\1\u02b9"+
    "\4\167\1\0\3\167\1\34\1\0\1\u012c\3\0\3\167"+
    "\1\u0127\1\167\1\0\5\167\1\0\10\167\1\174\1\167"+
    "\5\0\1\167\1\0\10\167\1\0\3\167\1\175\1\0"+
    "\1\174\3\0\5\167\1\0\2\167\1\250\2\167\1\0"+
    "\10\167\1\174\1\167\5\0\1\167\1\0\10\167\1\0"+
    "\3\167\1\175\1\0\1\174\3\0\3\167\1\u0127\1\167"+
    "\1\0\5\167\1\0\10\167\1\u012c\1\167\5\0\1\167"+
    "\1\0\10\167\1\0\3\167\1\34\1\0\1\u012c\3\0"+
    "\5\167\1\0\5\167\1\u02b2\7\167\1\u02ba\1\174\1\167"+
    "\5\0\1\167\1\0\10\167\1\0\3\167\1\175\1\0"+
    "\1\174\3\0\5\167\1\0\5\167\1\0\10\167\1\174"+
    "\1\167\5\0\1\167\1\0\6\167\1\u02bb\1\167\1\0"+
    "\3\167\1\175\1\0\1\174\3\0\4\167\1\u02bc\1\0"+
    "\5\167\1\0\10\167\1\174\1\167\5\0\1\167\1\0"+
    "\10\167\1\0\3\167\1\175\1\0\1\174\3\0\5\167"+
    "\1\0\2\167\1\u0127\2\167\1\0\2\167\1\u0127\1\167"+
    "\1\u0127\3\167\1\174\1\167\5\0\1\167\1\0\10\167"+
    "\1\0\3\167\1\175\1\0\1\174\1\0\2\u026a\5\167"+
    "\1\u026a\5\167\1\u026a\10\167\1\u02bd\1\167\5\u026a\1\167"+
    "\1\u026a\10\167\1\u026a\3\167\1\175\1\u026a\1\u02bd\1\u026a"+
    "\2\u028a\5\134\1\u028a\5\134\1\u028a\10\134\1\u028a\1\134"+
    "\1\34\4\u028a\1\134\1\u028a\10\134\1\u028a\3\134\4\u028a"+
    "\2\u0299\5\144\1\u0299\5\144\1\u0299\10\144\1\u0299\1\144"+
    "\1\u0299\1\34\3\u0299\1\144\1\u0299\10\144\1\u0299\3\144"+
    "\4\u0299\4\0\1\u02be\100\0\1\u026c\7\0\1\u0212\16\0"+
    "\1\u026c\7\0\1\u02bf\60\0\1\u02c0\64\0\1\u02c1\62\0"+
    "\1\u02c2\50\0\1\u02c3\44\0\1\u02c4\62\0\1\u02c5\63\0"+
    "\1\u02c6\45\0\5\117\1\u02c7\5\117\1\0\10\117\1\0"+
    "\1\117\5\0\1\117\1\0\10\117\1\0\3\117\14\0"+
    "\1\u02c8\50\0\5\117\1\0\1\u02c9\4\117\1\0\10\117"+
    "\1\0\1\117\5\0\1\117\1\0\10\117\1\0\3\117"+
    "\6\0\1\u02ca\57\0\1\u02cb\55\0\1\117\1\u02cc\3\117"+
    "\1\0\5\117\1\0\10\117\1\0\1\117\5\0\1\117"+
    "\1\0\10\117\1\0\3\117\24\0\1\u02cd\40\0\1\117"+
    "\1\u02ce\3\117\1\0\5\117\1\0\10\117\1\0\1\117"+
    "\5\0\1\117\1\0\10\117\1\0\3\117\6\0\5\117"+
    "\1\0\5\117\1\0\3\117\1\u0282\4\117\1\0\1\117"+
    "\5\0\1\117\1\0\10\117\1\0\3\117\12\0\1\u02cf"+
    "\57\0\1\u02c7\14\0\1\u02c7\46\0\1\u02d0\62\0\1\u02d1"+
    "\51\0\1\u02d2\45\0\5\117\1\0\5\117\1\0\2\117"+
    "\1\u02d3\5\117\1\0\1\117\5\0\1\117\1\0\10\117"+
    "\1\0\3\117\6\0\4\117\1\u02d4\1\0\5\117\1\0"+
    "\10\117\1\0\1\117\5\0\1\117\1\0\10\117\1\0"+
    "\3\117\4\0\4\134\1\u02d5\23\134\1\34\54\134\1\u028c"+
    "\1\134\1\34\5\134\1\u022e\16\134\1\u028c\7\134\1\u02d6"+
    "\21\134\1\34\36\134\1\u02d7\17\134\1\34\44\134\1\u02d8"+
    "\11\134\1\34\50\134\1\u02d9\5\134\1\34\42\134\1\u02da"+
    "\13\134\1\34\30\134\1\u02db\25\134\1\34\34\134\1\u02dc"+
    "\21\134\1\34\41\134\1\u02dd\14\134\1\34\26\134\4\144"+
    "\1\u02de\24\144\1\34\53\144\1\u029b\2\144\1\34\4\144"+
    "\1\u023a\16\144\1\u029b\7\144\1\u02df\22\144\1\34\35\144"+
    "\1\u02e0\20\144\1\34\43\144\1\u02e1\12\144\1\34\47\144"+
    "\1\u02e2\6\144\1\34\41\144\1\u02e3\14\144\1\34\27\144"+
    "\1\u02e4\26\144\1\34\33\144\1\u02e5\22\144\1\34\40\144"+
    "\1\u02e6\15\144\1\34\25\144\10\0\1\u0131\50\0\5\167"+
    "\1\0\1\u0135\4\167\1\0\10\167\1\174\1\167\5\0"+
    "\1\167\1\0\10\167\1\0\3\167\1\175\1\0\1\174"+
    "\21\0\1\u02e7\40\0\5\167\1\0\5\167\1\0\2\167"+
    "\1\u02e8\5\167\1\174\1\167\5\0\1\167\1\0\10\167"+
    "\1\0\3\167\1\175\1\0\1\174\3\0\5\167\1\0"+
    "\4\167\1\u02e9\1\0\10\167\1\174\1\167\5\0\1\167"+
    "\1\0\10\167\1\0\3\167\1\175\1\0\1\174\14\0"+
    "\1\223\53\0\1\u02ea\50\0\5\167\1\0\3\167\1\320"+
    "\1\167\1\0\10\167\1\174\1\167\5\0\1\167\1\0"+
    "\10\167\1\0\3\167\1\175\1\0\1\174\3\0\5\167"+
    "\1\0\1\u02eb\4\167\1\0\10\167\1\174\1\167\5\0"+
    "\1\167\1\0\10\167\1\0\3\167\1\175\1\0\1\174"+
    "\22\0\1\u02ec\37\0\5\167\1\0\5\167\1\0\3\167"+
    "\1\u02ed\4\167\1\174\1\167\5\0\1\167\1\0\10\167"+
    "\1\0\3\167\1\175\1\0\1\174\7\0\1\u02ee\55\0"+
    "\1\u02ef\53\0\3\167\1\u02f0\1\167\1\0\5\167\1\0"+
    "\10\167\1\174\1\167\5\0\1\167\1\0\10\167\1\0"+
    "\3\167\1\175\1\0\1\174\12\0\1\u02f1\60\0\1\u02f2"+
    "\105\0\1\u02f3\16\0\5\167\1\0\5\167\1\0\10\167"+
    "\1\174\1\167\5\0\1\167\1\0\3\167\1\u02f4\4\167"+
    "\1\0\3\167\1\175\1\0\1\174\3\0\5\167\1\0"+
    "\5\167\1\0\1\u02f5\7\167\1\174\1\167\5\0\1\167"+
    "\1\0\10\167\1\0\3\167\1\175\1\0\1\174\3\0"+
    "\4\167\1\u02f6\1\0\5\167\1\0\10\167\1\174\1\167"+
    "\5\0\1\167\1\0\10\167\1\0\3\167\1\175\1\0"+
    "\1\174\3\0\5\167\1\0\1\167\1\u02f7\3\167\1\0"+
    "\10\167\1\174\1\167\5\0\1\167\1\0\10\167\1\0"+
    "\3\167\1\175\1\0\1\174\3\0\5\167\1\0\3\167"+
    "\1\u02f8\1\167\1\0\10\167\1\174\1\167\5\0\1\167"+
    "\1\0\10\167\1\0\3\167\1\175\1\0\1\174\6\0"+
    "\1\u02f9\64\0\1\u02fa\50\0\1\u02fb\11\0\1\u02fc\51\0"+
    "\1\u02fd\57\0\1\u02fe\46\0\1\u02ff\53\0\2\u0272\5\0"+
    "\1\u0272\5\0\1\u0272\10\0\1\u0272\1\0\5\u0272\1\0"+
    "\1\u0272\10\0\1\u0272\3\0\4\u0272\5\0\1\u0300\20\0"+
    "\1\u02c5\26\0\1\u02c5\12\0\1\u0301\14\0\1\u02c6\26\0"+
    "\1\u02c6\11\0\1\u0302\52\0\1\u0303\54\0\2\117\1\u0282"+
    "\2\117\1\0\5\117\1\0\10\117\1\0\1\117\5\0"+
    "\1\117\1\0\10\117\1\0\3\117\24\0\1\u0304\44\0"+
    "\1\u0305\52\0\4\117\1\u0306\1\0\5\117\1\0\10\117"+
    "\1\0\1\117\5\0\1\117\1\0\10\117\1\0\3\117"+
    "\11\0\1\u0307\53\0\5\117\1\0\2\117\1\u021f\2\117"+
    "\1\0\10\117\1\0\1\117\5\0\1\117\1\0\10\117"+
    "\1\0\3\117\13\0\1\u0308\14\0\1\u0308\35\0\1\u0309"+
    "\74\0\1\u02d2\37\0\5\u030a\1\0\5\u030a\1\0\10\u030a"+
    "\1\0\1\u030a\5\0\1\u030a\1\0\10\u030a\1\0\3\u030a"+
    "\6\0\3\117\1\u021f\1\117\1\0\5\117\1\0\10\117"+
    "\1\0\1\117\5\0\1\117\1\0\10\117\1\0\3\117"+
    "\6\0\5\117\1\u0308\5\117\1\0\6\117\1\u030b\1\117"+
    "\1\0\1\117\5\0\1\117\1\0\10\117\1\0\3\117"+
    "\4\0\5\134\1\u030c\22\134\1\34\41\134\1\u030d\14\134"+
    "\1\34\33\134\1\u030e\11\134\1\u030f\10\134\1\34\40\134"+
    "\1\u0310\15\134\1\34\41\134\1\u0311\14\134\1\34\31\134"+
    "\1\u0312\24\134\1\34\26\134\2\u0292\5\134\1\u0292\5\134"+
    "\1\u0292\10\134\1\u0292\1\134\1\34\4\u0292\1\134\1\u0292"+
    "\10\134\1\u0292\3\134\4\u0292\5\134\1\u0313\20\134\1\u02dc"+
    "\1\134\1\34\24\134\1\u02dc\12\134\1\u0314\14\134\1\u02dd"+
    "\1\134\1\34\24\134\1\u02dd\1\134\5\144\1\u0315\23\144"+
    "\1\34\40\144\1\u0316\15\144\1\34\32\144\1\u0317\11\144"+
    "\1\u0318\11\144\1\34\37\144\1\u0319\16\144\1\34\40\144"+
    "\1\u031a\15\144\1\34\30\144\1\u031b\25\144\1\34\25\144"+
    "\2\u02a1\5\144\1\u02a1\5\144\1\u02a1\10\144\1\u02a1\1\144"+
    "\1\u02a1\1\34\3\u02a1\1\144\1\u02a1\10\144\1\u02a1\3\144"+
    "\4\u02a1\5\144\1\u031c\20\144\1\u02e5\2\144\1\34\23\144"+
    "\1\u02e5\12\144\1\u031d\14\144\1\u02e6\2\144\1\34\23\144"+
    "\1\u02e6\1\144\17\0\1\u031e\41\0\5\167\1\0\5\167"+
    "\1\0\1\167\1\u031f\6\167\1\174\1\167\5\0\1\167"+
    "\1\0\10\167\1\0\3\167\1\175\1\0\1\174\3\0"+
    "\5\167\1\0\5\167\1\0\10\167\1\174\1\167\5\0"+
    "\1\167\1\0\3\167\1\u0320\4\167\1\0\3\167\1\175"+
    "\1\0\1\174\16\0\1\u01e4\7\0\1\u01e4\33\0\5\167"+
    "\1\0\5\167\1\u01e4\7\167\1\u015a\1\174\1\167\5\0"+
    "\1\167\1\0\10\167\1\0\3\167\1\175\1\0\1\174"+
    "\21\0\1\u0321\40\0\5\167\1\0\5\167\1\0\2\167"+
    "\1\u0322\5\167\1\174\1\167\5\0\1\167\1\0\10\167"+
    "\1\0\3\167\1\175\1\0\1\174\21\0\1\u0323\56\0"+
    "\1\u0324\40\0\5\167\1\0\5\167\1\0\2\167\1\u0325"+
    "\5\167\1\174\1\167\5\0\1\167\1\0\10\167\1\0"+
    "\3\167\1\175\1\0\1\174\11\0\1\u0326\62\0\1\u0327"+
    "\101\0\1\u0328\1\u0329\20\0\5\167\1\0\5\167\1\0"+
    "\10\167\1\174\1\167\5\0\1\167\1\0\1\u032a\1\u032b"+
    "\6\167\1\0\3\167\1\175\1\0\1\174\3\0\5\167"+
    "\1\u0144\5\167\1\0\6\167\1\u0187\1\167\1\174\1\167"+
    "\5\0\1\167\1\0\10\167\1\0\3\167\1\175\1\0"+
    "\1\174\3\0\5\167\1\0\5\167\1\0\2\167\1\u032c"+
    "\5\167\1\174\1\167\5\0\1\167\1\0\10\167\1\0"+
    "\3\167\1\175\1\0\1\174\3\0\5\167\1\0\1\u01dc"+
    "\4\167\1\0\10\167\1\174\1\167\5\0\1\167\1\0"+
    "\10\167\1\0\3\167\1\175\1\0\1\174\3\0\5\167"+
    "\1\0\4\167\1\u032d\1\0\10\167\1\174\1\167\5\0"+
    "\1\167\1\0\10\167\1\0\3\167\1\175\1\0\1\174"+
    "\7\0\1\u032e\62\0\1\u032f\57\0\1\u0330\55\0\1\u0331"+
    "\54\0\1\u0332\53\0\1\u0333\73\0\1\u0334\54\0\1\u0335"+
    "\50\0\1\u0336\50\0\1\u02d2\57\0\1\u0286\60\0\1\u0337"+
    "\14\0\1\u0337\34\0\5\117\1\u0337\5\117\1\0\10\117"+
    "\1\0\1\117\5\0\1\117\1\0\10\117\1\0\3\117"+
    "\17\0\1\u0303\47\0\1\u0307\64\0\1\u0286\46\0\2\117"+
    "\1\u021f\2\117\1\0\5\117\1\0\10\117\1\0\1\117"+
    "\5\0\1\117\1\0\10\117\1\0\3\117\4\0\6\134"+
    "\1\u0338\21\134\1\34\40\134\1\u0339\15\134\1\34\41\134"+
    "\1\u033a\14\134\1\34\40\134\1\u033b\15\134\1\34\36\134"+
    "\1\u033c\17\134\1\34\33\134\1\u033d\22\134\1\34\50\134"+
    "\1\u033e\5\134\1\34\46\134\1\u033f\7\134\1\34\40\134"+
    "\1\u0340\15\134\1\34\26\134\6\144\1\u0341\22\144\1\34"+
    "\37\144\1\u0342\16\144\1\34\40\144\1\u0343\15\144\1\34"+
    "\37\144\1\u0344\16\144\1\34\35\144\1\u0345\20\144\1\34"+
    "\32\144\1\u0346\23\144\1\34\47\144\1\u0347\6\144\1\34"+
    "\45\144\1\u0348\10\144\1\34\37\144\1\u0349\16\144\1\34"+
    "\25\144\13\0\1\u0147\45\0\5\167\1\0\3\167\1\301"+
    "\1\167\1\0\10\167\1\174\1\167\5\0\1\167\1\0"+
    "\10\167\1\0\3\167\1\175\1\0\1\174\3\0\5\167"+
    "\1\0\5\167\1\0\2\167\1\u034a\5\167\1\174\1\167"+
    "\5\0\1\167\1\0\10\167\1\0\3\167\1\175\1\0"+
    "\1\174\20\0\1\u01e4\41\0\5\167\1\0\5\167\1\0"+
    "\1\167\1\u015a\6\167\1\174\1\167\5\0\1\167\1\0"+
    "\10\167\1\0\3\167\1\175\1\0\1\174\7\0\1\u034b"+
    "\72\0\1\u034c\36\0\5\167\1\0\5\167\1\0\4\167"+
    "\1\u034d\3\167\1\174\1\167\5\0\1\167\1\0\10\167"+
    "\1\0\3\167\1\175\1\0\1\174\5\0\1\u034e\114\0"+
    "\1\u034f\20\0\1\u012c\36\0\2\u012c\16\0\1\u012c\36\0"+
    "\1\u012c\15\0\2\167\1\u0127\2\167\1\0\5\167\1\0"+
    "\10\167\1\174\1\167\5\0\1\167\1\0\4\167\2\u0127"+
    "\2\167\1\0\3\167\1\175\1\0\1\174\3\0\2\167"+
    "\1\u0127\2\167\1\0\5\167\1\0\10\167\1\174\1\167"+
    "\5\0\1\167\1\0\4\167\1\u0127\3\167\1\0\3\167"+
    "\1\175\1\0\1\174\3\0\4\167\1\u0350\1\0\5\167"+
    "\1\0\10\167\1\174\1\167\5\0\1\167\1\0\10\167"+
    "\1\0\3\167\1\175\1\0\1\174\3\0\5\167\1\0"+
    "\5\167\1\0\10\167\1\174\1\167\5\0\1\167\1\0"+
    "\3\167\1\u0351\4\167\1\0\3\167\1\175\1\0\1\174"+
    "\10\0\1\u0352\14\0\1\u0352\34\0\1\u0353\70\0\1\u0354"+
    "\62\0\1\u0355\41\0\1\u0356\61\0\1\u026c\63\0\1\u026c"+
    "\60\0\1\u0357\7\0\1\u0357\41\0\1\u0358\52\0\1\u0286"+
    "\52\0\7\134\1\u0359\14\134\1\u0359\3\134\1\34\30\134"+
    "\1\u035a\25\134\1\34\42\134\1\u035b\13\134\1\34\46\134"+
    "\1\u035c\7\134\1\34\31\134\1\u035d\24\134\1\34\34\134"+
    "\1\u028c\21\134\1\34\41\134\1\u028c\14\134\1\34\43\134"+
    "\1\u035e\7\134\1\u035e\2\134\1\34\36\134\1\u035f\17\134"+
    "\1\34\26\134\7\144\1\u0360\14\144\1\u0360\4\144\1\34"+
    "\27\144\1\u0361\26\144\1\34\41\144\1\u0362\14\144\1\34"+
    "\45\144\1\u0363\10\144\1\34\30\144\1\u0364\25\144\1\34"+
    "\33\144\1\u029b\22\144\1\34\40\144\1\u029b\15\144\1\34"+
    "\42\144\1\u0365\7\144\1\u0365\3\144\1\34\35\144\1\u0366"+
    "\20\144\1\34\25\144\2\0\5\167\1\0\2\167\1\u0367"+
    "\2\167\1\0\10\167\1\174\1\167\5\0\1\167\1\0"+
    "\10\167\1\0\3\167\1\175\1\0\1\174\43\0\1\u0368"+
    "\27\0\1\u0256\45\0\5\167\1\0\3\167\1\u015f\1\167"+
    "\1\0\10\167\1\174\1\167\5\0\1\167\1\0\10\167"+
    "\1\0\3\167\1\175\1\0\1\174\14\0\1\200\50\0"+
    "\1\u0369\1\0\1\u036a\2\0\1\u036b\11\0\1\u036a\34\0"+
    "\5\167\1\0\5\167\1\0\10\167\1\174\1\167\5\0"+
    "\1\167\1\0\3\167\1\u036c\4\167\1\0\3\167\1\175"+
    "\1\0\1\174\3\0\3\167\1\u036d\1\167\1\u036a\2\167"+
    "\1\u036e\2\167\1\0\6\167\1\u036f\1\167\1\174\1\167"+
    "\5\0\1\167\1\0\10\167\1\0\3\167\1\175\1\0"+
    "\1\174\11\0\1\u0370\66\0\1\u0371\41\0\1\u0372\74\0"+
    "\1\u026c\43\0\1\u0373\63\0\1\373\50\0\1\u0374\51\0"+
    "\10\134\1\u0375\17\134\1\34\46\134\1\u0376\7\134\1\34"+
    "\31\134\1\u0377\24\134\1\34\47\134\1\u028c\6\134\1\34"+
    "\34\134\1\u0378\21\134\1\34\41\134\1\u0111\14\134\1\34"+
    "\33\134\1\u0379\22\134\1\34\26\134\10\144\1\u037a\20\144"+
    "\1\34\45\144\1\u037b\10\144\1\34\30\144\1\u037c\25\144"+
    "\1\34\46\144\1\u029b\7\144\1\34\33\144\1\u037d\22\144"+
    "\1\34\40\144\1\u0119\15\144\1\34\32\144\1\u037e\23\144"+
    "\1\34\25\144\2\0\5\167\1\0\5\167\1\0\1\167"+
    "\1\u037f\6\167\1\174\1\167\5\0\1\167\1\0\10\167"+
    "\1\0\3\167\1\175\1\0\1\174\14\0\1\u0380\100\0"+
    "\1\u0381\25\0\1\u0382\65\0\1\u0383\45\0\5\167\1\0"+
    "\3\167\1\u0384\1\167\1\0\10\167\1\174\1\167\5\0"+
    "\1\167\1\0\10\167\1\0\3\167\1\175\1\0\1\174"+
    "\3\0\5\167\1\0\5\167\1\0\10\167\1\174\1\167"+
    "\5\0\1\u0385\1\0\10\167\1\0\3\167\1\175\1\0"+
    "\1\174\3\0\5\167\1\0\3\167\1\u0386\1\167\1\0"+
    "\10\167\1\174\1\167\5\0\1\167\1\0\10\167\1\0"+
    "\3\167\1\175\1\0\1\174\3\0\2\167\1\u0387\2\167"+
    "\1\0\5\167\1\0\10\167\1\174\1\167\5\0\1\167"+
    "\1\0\10\167\1\0\3\167\1\175\1\0\1\174\5\0"+
    "\1\u026c\57\0\1\u0334\63\0\1\u0334\53\0\1\u0388\14\0"+
    "\1\u0388\45\0\1\u0389\43\0\4\134\1\u028c\23\134\1\34"+
    "\33\134\1\u033e\22\134\1\34\40\134\1\u033e\15\134\1\34"+
    "\35\134\1\u038a\14\134\1\u038a\3\134\1\34\41\134\1\u038b"+
    "\14\134\1\34\26\134\4\144\1\u029b\24\144\1\34\32\144"+
    "\1\u0347\23\144\1\34\37\144\1\u0347\16\144\1\34\34\144"+
    "\1\u038c\14\144\1\u038c\4\144\1\34\40\144\1\u038d\15\144"+
    "\1\34\25\144\2\0\1\167\1\u038e\3\167\1\0\5\167"+
    "\1\0\10\167\1\174\1\167\5\0\1\167\1\0\10\167"+
    "\1\0\3\167\1\175\1\0\1\174\5\0\1\u0256\3\0"+
    "\1\223\66\0\1\u038f\44\0\1\u0390\70\0\1\u0391\40\0"+
    "\2\167\1\u015f\2\167\1\0\1\320\4\167\1\0\10\167"+
    "\1\174\1\167\5\0\1\167\1\0\10\167\1\0\3\167"+
    "\1\175\1\0\1\174\3\0\5\167\1\0\5\167\1\0"+
    "\2\167\1\u0392\5\167\1\174\1\167\5\0\1\167\1\0"+
    "\10\167\1\0\3\167\1\175\1\0\1\174\3\0\5\167"+
    "\1\0\5\167\1\0\2\167\1\u0393\5\167\1\174\1\167"+
    "\5\0\1\167\1\0\10\167\1\0\3\167\1\175\1\0"+
    "\1\174\3\0\4\167\1\u0394\1\0\5\167\1\0\10\167"+
    "\1\174\1\167\5\0\1\167\1\0\10\167\1\0\3\167"+
    "\1\175\1\0\1\174\5\0\1\u0334\66\0\1\u0395\42\0"+
    "\4\134\1\u033e\23\134\1\34\42\134\1\u0396\13\134\1\34"+
    "\26\134\4\144\1\u0347\24\144\1\34\41\144\1\u0397\14\144"+
    "\1\34\25\144\2\0\5\167\1\0\5\167\1\0\3\167"+
    "\1\u0398\4\167\1\174\1\167\5\0\1\167\1\0\10\167"+
    "\1\0\3\167\1\175\1\0\1\174\13\0\1\u0390\106\0"+
    "\1\u0399\36\0\1\u0390\36\0\5\167\1\0\2\167\1\u0394"+
    "\2\167\1\0\10\167\1\174\1\167\5\0\1\167\1\0"+
    "\10\167\1\0\3\167\1\175\1\0\1\174\3\0\5\167"+
    "\1\0\5\167\1\0\4\167\1\u0394\3\167\1\174\1\167"+
    "\5\0\1\167\1\0\10\167\1\0\3\167\1\175\1\0"+
    "\1\174\3\0\5\167\1\0\5\167\1\0\10\167\1\174"+
    "\1\167\5\0\1\167\1\0\3\167\1\u039a\4\167\1\0"+
    "\3\167\1\175\1\0\1\174\4\0\1\u039b\53\0\3\134"+
    "\1\u039c\24\134\1\34\26\134\3\144\1\u039d\25\144\1\34"+
    "\25\144\2\0\5\167\1\0\3\167\1\u039e\1\167\1\0"+
    "\10\167\1\174\1\167\5\0\1\167\1\0\10\167\1\0"+
    "\3\167\1\175\1\0\1\174\50\0\2\u039f\10\0\5\167"+
    "\1\0\5\167\1\0\10\167\1\174\1\167\5\0\1\167"+
    "\1\0\10\167\1\u039f\1\u03a0\2\167\1\175\1\0\1\174"+
    "\13\0\1\u03a1\44\0\12\134\1\u03a2\15\134\1\34\26\134"+
    "\12\144\1\u03a3\16\144\1\34\25\144\2\0\2\167\1\u03a4"+
    "\2\167\1\0\5\167\1\0\10\167\1\174\1\167\5\0"+
    "\1\167\1\0\10\167\1\0\3\167\1\175\1\0\1\174"+
    "\10\0\1\u03a5\14\0\1\u03a5\34\0\5\167\1\u03a5\5\167"+
    "\1\0\6\167\1\u03a6\1\167\1\174\1\167\5\0\1\167"+
    "\1\0\10\167\1\0\3\167\1\175\1\0\1\174\14\0"+
    "\1\u03a7\43\0\13\134\1\u03a8\14\134\1\34\26\134\13\144"+
    "\1\u03a9\15\144\1\34\25\144\2\0\4\167\1\u03aa\1\0"+
    "\5\167\1\0\10\167\1\174\1\167\5\0\1\167\1\0"+
    "\10\167\1\0\3\167\1\175\1\0\1\174\5\0\1\u0256"+
    "\54\0\2\167\1\u015f\2\167\1\0\5\167\1\0\10\167"+
    "\1\174\1\167\5\0\1\167\1\0\10\167\1\0\3\167"+
    "\1\175\1\0\1\174\1\0\2\u030a\5\0\1\u030a\5\0"+
    "\1\u030a\10\0\1\u030a\1\0\5\u030a\1\0\1\u030a\10\0"+
    "\1\u030a\3\0\4\u030a\2\u03ab\5\134\1\u03ab\5\134\1\u03ab"+
    "\10\134\1\u03ab\1\134\1\34\4\u03ab\1\134\1\u03ab\10\134"+
    "\1\u03ab\3\134\4\u03ab\2\u03ac\5\144\1\u03ac\5\144\1\u03ac"+
    "\10\144\1\u03ac\1\144\1\u03ac\1\34\3\u03ac\1\144\1\u03ac"+
    "\10\144\1\u03ac\3\144\4\u03ac\2\0\5\167\1\0\5\167"+
    "\1\0\10\167\1\174\1\167\5\0\1\167\1\0\3\167"+
    "\1\u03ad\4\167\1\0\3\167\1\175\1\0\1\174\3\0"+
    "\3\167\1\u03ae\1\167\1\0\5\167\1\0\10\167\1\174"+
    "\1\167\5\0\1\167\1\0\10\167\1\0\3\167\1\175"+
    "\1\0\1\174\3\0\5\167\1\0\1\u03af\4\167\1\0"+
    "\10\167\1\174\1\167\5\0\1\167\1\0\10\167\1\0"+
    "\3\167\1\175\1\0\1\174\3\0\1\167\1\203\3\167"+
    "\1\0\5\167\1\0\10\167\1\174\1\167\5\0\1\167"+
    "\1\0\10\167\1\0\3\167\1\175\1\0\1\174\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[41172];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\23\1\1\11\44\1\1\11\4\1\7\0\3\1"+
    "\2\0\1\1\1\0\1\1\1\0\1\1\3\0\2\1"+
    "\20\0\1\11\12\1\6\0\1\11\171\0\1\1\11\0"+
    "\2\1\2\0\1\1\1\0\1\1\1\0\1\1\3\0"+
    "\2\1\214\0\1\11\1\1\1\0\1\11\2\0\2\1"+
    "\2\0\1\1\1\0\2\1\1\0\1\1\3\0\2\1"+
    "\2\0\2\1\1\0\1\1\4\0\2\1\1\0\1\1"+
    "\124\0\1\1\3\0\2\1\2\0\1\1\1\0\2\1"+
    "\1\0\1\1\4\0\2\1\10\0\1\1\13\0\1\1"+
    "\56\0\2\11\1\0\1\1\5\0\1\11\1\1\1\0"+
    "\1\1\2\0\1\1\1\0\1\1\2\0\1\1\1\0"+
    "\2\1\1\0\1\1\4\0\4\1\1\0\1\1\5\0"+
    "\2\1\1\0\1\1\2\0\2\1\1\0\1\1\5\0"+
    "\2\1\1\0\1\1\30\0\1\1\13\0\1\1\2\0"+
    "\1\1\1\0\1\1\3\0\3\1\56\0\1\1\2\0"+
    "\1\1\3\0\1\11\1\1\237\0\2\1\3\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[943];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	/** Variable used to store violation location and variable involved. **/
	String location = "MAIN PROGRAM";
	/** Variable used to store file value and function values associated. **/
	/** Boolean used to determine if a line continues or not. **/
	boolean ampFound = false;
	/** List of String containing all variables associated to function return. **/
	List<String> variables = new LinkedList<String>();
	/** List of locations associated to previous variables. **/
	List<String> locations = new LinkedList<String>();
	/** List of lines associated to previous variables. **/
	List<Integer> lines = new LinkedList<Integer>();
	/** A String used to store variables encountered. **/
	String variable = "";
	/** A boolean which is set to true if OPER is encountered. **/
	boolean isOper = false;
	/** A boolean set to true when a variable is added to the list. **/
	boolean added = false;
	/** List of String containing all declared variables, to avoid mistaking tab for a function. **/
	List<String> possibleTab = new LinkedList<String>();
	/** List of String to identify which IF statement a variable is in. **/
	List<LinkedList<Integer>> codeLevels = new LinkedList<LinkedList<Integer>>();
	/** An integer to determine the current IF level. **/
	LinkedList<Integer> codeLevel = new LinkedList<Integer>();
	/** A boolean to determine if an else statement if found. **/
	boolean elseFound = false;
	
    public COMFLOWCheckCodeReturn() {
    }
	
	@Override
	public void setInputFile(final File file) throws FileNotFoundException {
		super.setInputFile(file);
		this.zzReader = new FileReader(new Path(file.getAbsolutePath()).toOSString());
		codeLevel.add(1);
	}
	
	/**
	 * Method used to raise all violations remaining at the end of a function, subroutine, etc.
	 * All variables remaining in variables list are considered as error (they are deleted when
	 * found in an if or select case statement).
	 */
	private void raiseRemainingErrors() throws JFlexException {
		for (int i =0; i < variables.size(); i++){
			setError(locations.get(i),"The return code of the function "+ variables.get(i) + " is not checked." , lines.get(i));
		}
		variables.clear();
		locations.clear();
		lines.clear();
		codeLevels.clear();
		codeLevel.clear();
	}
	
	/**
	 * Method used to sort violations on increasing order considering their lines.
	 **/
	private void sortResults() {
        Collections.sort(getViolations(), new Comparator<Violation>() {
            @Override
            public int compare(final Violation o1, final Violation o2) {
                int res = o1.getRuleName().compareTo(o2.getRuleName());
                if (o1.getRuleName().compareTo(o2.getRuleName()) == 0) {
                    if (o1.getFile().getName()
                            .compareTo(o2.getFile().getName()) == 0) {
                        res = o1.getLine().compareTo(o2.getLine());
                    } else {
                        res =
                                o1.getFile()
                                        .getName()
                                        .compareTo(
                                                o2.getFile()
                                                        .getName());
                    }
                }
                return res;
            }
        });
    }
	
	/**
	 * Method used to determine is variable is a declared tab.
	 * @param text
	 *			the variable to analyze
	 * @return true if the variable is a tab, flase otherwise
	 **/
	private boolean isTab(String text){
		boolean tab = false;
		for (String element : possibleTab){
				if (text.replace(" ","").replace("(","").equals(element)){
					tab = true;
				}
		}
		return tab;
	}
	
	/**
	 * Method to verify that there is no conflict by writing on the same variable.
	 * This takes to list of integer for parameter, the old level and new one. If
	 * two writing in the same variable are in to else process independent (which 
	 * means depending on the same first if condition) then there's no conflict.
	 * 
	 * @param oldLevel
	 *				the list of integer for old affectation 
	 * @param newLevel
	 *				the list of integer for new affectation
	 * @return true if there's a conflicting for these affectations, false otherwise
	 **/
	private boolean isConflictLevel(List<Integer> oldLevel, List<Integer> newLevel){
		boolean conflict = true;
		int size = Math.min(oldLevel.size(), newLevel.size());
		if (size > 1 || oldLevel.get(0) == newLevel.get(0)){
			int i = 1;
			while (conflict && i < size){
				if (oldLevel.get(i) != newLevel.get(i)){
					conflict = false;
				}
				i = i+1;
			}
		}
		return conflict;
	}
		


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public COMFLOWCheckCodeReturn(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 224) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public List<Violation> run() throws java.io.IOException, JFlexException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          { 	raiseRemainingErrors();
	sortResults();
    
	
	return getViolations();
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            }
          case 25: break;
          case 2: 
            { yybegin(COMMENT);
            }
          case 26: break;
          case 3: 
            { variable = yytext(); 
													 yybegin(VAR_EQ);
            }
          case 27: break;
          case 4: 
            { if (!ampFound){
									elseFound = false;
									yybegin(YYINITIAL);
								 }
								 ampFound = false;
            }
          case 28: break;
          case 5: 
            { throw new JFlexException( new Exception("Illegal character <" + yytext() + ">") );
            }
          case 29: break;
          case 6: 
            { ampFound = true;
            }
          case 30: break;
          case 7: 
            { yybegin(YYINITIAL);
            }
          case 31: break;
          case 8: 
            { possibleTab.clear(); 
								 location = location + " " + yytext(); 
								 raiseRemainingErrors();
								 codeLevel.add(1);
								 yybegin(AVOID);
            }
          case 32: break;
          case 9: 
            { possibleTab.clear(); 
								 raiseRemainingErrors(); 
								 codeLevel.add(1);
								 yybegin(YYINITIAL);
            }
          case 33: break;
          case 10: 
            { isOper = true;
            }
          case 34: break;
          case 11: 
            { if (isOper && !variables.isEmpty() && variables.get(variables.size()-1).equals(variable)){
												setError(location,"Return code used in arithmetical statement.", yyline + 1);
												locations.remove(variables.size()-1);
												lines.remove(variables.size()-1);
												variables.remove(variables.size()-1);
										 }
										 if (!ampFound){
											isOper = false;
											added = false;
											yybegin(YYINITIAL);
										 }
										 ampFound = false;
            }
          case 35: break;
          case 12: 
            { variable = yytext();
								 if (variables.contains(variable) ){
									LinkedList<String> tempVar = new LinkedList<String>();
									LinkedList<Integer> tempLine = new LinkedList<Integer>();
									LinkedList<String> tempLoc = new LinkedList<String>();
									LinkedList<LinkedList<Integer>> tempLevel = new LinkedList<LinkedList<Integer>>();
									int i = 0;
									for(String var : variables){
										if (!var.equals(variable) || !isConflictLevel(codeLevels.get(i), codeLevel)) {
											tempVar.add(var);
											tempLevel.add(codeLevels.get(i));
											tempLoc.add(locations.get(i));
											tempLine.add(lines.get(i));
										}
										i = i + 1;
									}
									variables = (List<String>) tempVar.clone();
									lines = (List<Integer>) tempLine.clone();
									locations = (List<String>) tempLoc.clone();
									codeLevels = (List<LinkedList<Integer>>) tempLevel.clone();
								 }
            }
          case 36: break;
          case 13: 
            { yybegin(AVOID);
            }
          case 37: break;
          case 14: 
            { yybegin(EQUAL);
            }
          case 38: break;
          case 15: 
            { possibleTab.add(yytext());
            }
          case 39: break;
          case 16: 
            { yybegin(DECL);
            }
          case 40: break;
          case 17: 
            { if (!isTab(yytext()) && !added){
											if (variables.contains(variable)){
												LinkedList<String> tempVar = new LinkedList<String>();
												LinkedList<Integer> tempLine = new LinkedList<Integer>();
												LinkedList<String> tempLoc = new LinkedList<String>();
												LinkedList<LinkedList<Integer>> tempLevel = new LinkedList<LinkedList<Integer>>();
												int i = 0;
												for(String var : variables){
													if (var.equals(variable) && isConflictLevel(codeLevels.get(i), codeLevel)) {
														setError(locations.get(i),"The return code of the function "+ variables.get(i) + " is not checked.", lines.get(i));
													} else {
														tempVar.add(var);
														tempLevel.add(codeLevels.get(i));
														tempLoc.add(locations.get(i));
														tempLine.add(lines.get(i));
													}
													i = i + 1;
												}
												variables = (List<String>) tempVar.clone();
												lines = (List<Integer>) tempLine.clone();
												locations = (List<String>) tempLoc.clone();
												codeLevels = (List<LinkedList<Integer>>) tempLevel.clone();
											}
											variables.add(variable);
											codeLevels.add((LinkedList) codeLevel.clone());
											locations.add(location);
											lines.add(yyline + 1);
											added = true;
										 }
            }
          case 41: break;
          case 18: 
            { if (yytext().toLowerCase().contains("select")){
														codeLevel.add(1);
													 }
													 yybegin(IF);
            }
          case 42: break;
          case 19: 
            { int last = codeLevel.size() - 1;
													 if (last == 0){
														codeLevel.set(last, codeLevel.get(last)+1);
													 } else {
														codeLevel.remove(last);
													 }
            }
          case 43: break;
          case 20: 
            { codeLevel.add(1);
            }
          case 44: break;
          case 21: 
            { int last = codeLevel.size() - 1;
													 codeLevel.set(last, codeLevel.get(last)+1);
            }
          case 45: break;
          case 22: 
            { if (!elseFound){
									codeLevel.add(1);
								 }
            }
          case 46: break;
          case 23: 
            { elseFound = true;
													 int last = codeLevel.size() - 1;
													 codeLevel.set(last, codeLevel.get(last)+1);
													 yybegin(IF);
            }
          case 47: break;
          case 24: 
            { location = yytext(); 
													 yybegin(NAMING);
            }
          case 48: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
